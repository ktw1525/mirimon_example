
mirimon_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9a8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd94  0800bd94  0001bd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd98  0800bd98  0001bd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000002c  20000004  0800bd9c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000030  0800bdc8  00020030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000059  200000cc  0800be61  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000128  0800beba  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000124  2000013c  0800becb  0002013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000035c  20000260  0800bfef  00020260  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200005bc  0800bfef  000205bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0003c478  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006bfa  00000000  00000000  0005c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002818  00000000  00000000  00063308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002550  00000000  00000000  00065b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002d7a9  00000000  00000000  00068070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002aaa1  00000000  00000000  00095819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00102244  00000000  00000000  000c02ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c24fe  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a678  00000000  00000000  001c2554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000260 	.word	0x20000260
 8000158:	00000000 	.word	0x00000000
 800015c:	0800bacc 	.word	0x0800bacc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000264 	.word	0x20000264
 8000178:	0800bacc 	.word	0x0800bacc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9d08      	ldr	r5, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	468c      	mov	ip, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	f040 8083 	bne.w	80002d2 <__udivmoddi4+0x116>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d947      	bls.n	8000262 <__udivmoddi4+0xa6>
 80001d2:	fab2 f282 	clz	r2, r2
 80001d6:	b142      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d8:	f1c2 0020 	rsb	r0, r2, #32
 80001dc:	fa24 f000 	lsr.w	r0, r4, r0
 80001e0:	4091      	lsls	r1, r2
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea40 0c01 	orr.w	ip, r0, r1
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6f8 	udiv	r6, ip, r8
 80001f4:	fa1f fe87 	uxth.w	lr, r7
 80001f8:	fb08 c116 	mls	r1, r8, r6, ip
 80001fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000200:	fb06 f10e 	mul.w	r1, r6, lr
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18fb      	adds	r3, r7, r3
 800020a:	f106 30ff 	add.w	r0, r6, #4294967295
 800020e:	f080 8119 	bcs.w	8000444 <__udivmoddi4+0x288>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8116 	bls.w	8000444 <__udivmoddi4+0x288>
 8000218:	3e02      	subs	r6, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000230:	45a6      	cmp	lr, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8105 	bcs.w	8000448 <__udivmoddi4+0x28c>
 800023e:	45a6      	cmp	lr, r4
 8000240:	f240 8102 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	eba4 040e 	sub.w	r4, r4, lr
 8000250:	2600      	movs	r6, #0
 8000252:	b11d      	cbz	r5, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c5 4300 	strd	r4, r3, [r5]
 800025c:	4631      	mov	r1, r6
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	b902      	cbnz	r2, 8000266 <__udivmoddi4+0xaa>
 8000264:	deff      	udf	#255	; 0xff
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	2a00      	cmp	r2, #0
 800026c:	d150      	bne.n	8000310 <__udivmoddi4+0x154>
 800026e:	1bcb      	subs	r3, r1, r7
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f f887 	uxth.w	r8, r7
 8000278:	2601      	movs	r6, #1
 800027a:	fbb3 fcfe 	udiv	ip, r3, lr
 800027e:	0c21      	lsrs	r1, r4, #16
 8000280:	fb0e 331c 	mls	r3, lr, ip, r3
 8000284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000288:	fb08 f30c 	mul.w	r3, r8, ip
 800028c:	428b      	cmp	r3, r1
 800028e:	d907      	bls.n	80002a0 <__udivmoddi4+0xe4>
 8000290:	1879      	adds	r1, r7, r1
 8000292:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000296:	d202      	bcs.n	800029e <__udivmoddi4+0xe2>
 8000298:	428b      	cmp	r3, r1
 800029a:	f200 80e9 	bhi.w	8000470 <__udivmoddi4+0x2b4>
 800029e:	4684      	mov	ip, r0
 80002a0:	1ac9      	subs	r1, r1, r3
 80002a2:	b2a3      	uxth	r3, r4
 80002a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002b0:	fb08 f800 	mul.w	r8, r8, r0
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0x10c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x10a>
 80002c0:	45a0      	cmp	r8, r4
 80002c2:	f200 80d9 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002c6:	4618      	mov	r0, r3
 80002c8:	eba4 0408 	sub.w	r4, r4, r8
 80002cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d0:	e7bf      	b.n	8000252 <__udivmoddi4+0x96>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80b1 	beq.w	800043e <__udivmoddi4+0x282>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x1cc>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b8 	bhi.w	800046c <__udivmoddi4+0x2b0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	468c      	mov	ip, r1
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0a8      	beq.n	800025c <__udivmoddi4+0xa0>
 800030a:	e9c5 4c00 	strd	r4, ip, [r5]
 800030e:	e7a5      	b.n	800025c <__udivmoddi4+0xa0>
 8000310:	f1c2 0320 	rsb	r3, r2, #32
 8000314:	fa20 f603 	lsr.w	r6, r0, r3
 8000318:	4097      	lsls	r7, r2
 800031a:	fa01 f002 	lsl.w	r0, r1, r2
 800031e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000322:	40d9      	lsrs	r1, r3
 8000324:	4330      	orrs	r0, r6
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	fbb1 f6fe 	udiv	r6, r1, lr
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	fb0e 1116 	mls	r1, lr, r6, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb06 f108 	mul.w	r1, r6, r8
 800033c:	4299      	cmp	r1, r3
 800033e:	fa04 f402 	lsl.w	r4, r4, r2
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x19c>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f106 3cff 	add.w	ip, r6, #4294967295
 800034a:	f080 808d 	bcs.w	8000468 <__udivmoddi4+0x2ac>
 800034e:	4299      	cmp	r1, r3
 8000350:	f240 808a 	bls.w	8000468 <__udivmoddi4+0x2ac>
 8000354:	3e02      	subs	r6, #2
 8000356:	443b      	add	r3, r7
 8000358:	1a5b      	subs	r3, r3, r1
 800035a:	b281      	uxth	r1, r0
 800035c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000360:	fb0e 3310 	mls	r3, lr, r0, r3
 8000364:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000368:	fb00 f308 	mul.w	r3, r0, r8
 800036c:	428b      	cmp	r3, r1
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f100 3cff 	add.w	ip, r0, #4294967295
 8000376:	d273      	bcs.n	8000460 <__udivmoddi4+0x2a4>
 8000378:	428b      	cmp	r3, r1
 800037a:	d971      	bls.n	8000460 <__udivmoddi4+0x2a4>
 800037c:	3802      	subs	r0, #2
 800037e:	4439      	add	r1, r7
 8000380:	1acb      	subs	r3, r1, r3
 8000382:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000386:	e778      	b.n	800027a <__udivmoddi4+0xbe>
 8000388:	f1c6 0c20 	rsb	ip, r6, #32
 800038c:	fa03 f406 	lsl.w	r4, r3, r6
 8000390:	fa22 f30c 	lsr.w	r3, r2, ip
 8000394:	431c      	orrs	r4, r3
 8000396:	fa20 f70c 	lsr.w	r7, r0, ip
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003a2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003a6:	431f      	orrs	r7, r3
 80003a8:	0c3b      	lsrs	r3, r7, #16
 80003aa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ae:	fa1f f884 	uxth.w	r8, r4
 80003b2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003ba:	fb09 fa08 	mul.w	sl, r9, r8
 80003be:	458a      	cmp	sl, r1
 80003c0:	fa02 f206 	lsl.w	r2, r2, r6
 80003c4:	fa00 f306 	lsl.w	r3, r0, r6
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x220>
 80003ca:	1861      	adds	r1, r4, r1
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	d248      	bcs.n	8000464 <__udivmoddi4+0x2a8>
 80003d2:	458a      	cmp	sl, r1
 80003d4:	d946      	bls.n	8000464 <__udivmoddi4+0x2a8>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4421      	add	r1, r4
 80003dc:	eba1 010a 	sub.w	r1, r1, sl
 80003e0:	b2bf      	uxth	r7, r7
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80003ee:	fb00 f808 	mul.w	r8, r0, r8
 80003f2:	45b8      	cmp	r8, r7
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x24a>
 80003f6:	19e7      	adds	r7, r4, r7
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d22e      	bcs.n	800045c <__udivmoddi4+0x2a0>
 80003fe:	45b8      	cmp	r8, r7
 8000400:	d92c      	bls.n	800045c <__udivmoddi4+0x2a0>
 8000402:	3802      	subs	r0, #2
 8000404:	4427      	add	r7, r4
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	eba7 0708 	sub.w	r7, r7, r8
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	454f      	cmp	r7, r9
 8000414:	46c6      	mov	lr, r8
 8000416:	4649      	mov	r1, r9
 8000418:	d31a      	bcc.n	8000450 <__udivmoddi4+0x294>
 800041a:	d017      	beq.n	800044c <__udivmoddi4+0x290>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x27a>
 800041e:	ebb3 020e 	subs.w	r2, r3, lr
 8000422:	eb67 0701 	sbc.w	r7, r7, r1
 8000426:	fa07 fc0c 	lsl.w	ip, r7, ip
 800042a:	40f2      	lsrs	r2, r6
 800042c:	ea4c 0202 	orr.w	r2, ip, r2
 8000430:	40f7      	lsrs	r7, r6
 8000432:	e9c5 2700 	strd	r2, r7, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e70b      	b.n	800025c <__udivmoddi4+0xa0>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e9      	b.n	800021c <__udivmoddi4+0x60>
 8000448:	4618      	mov	r0, r3
 800044a:	e6fd      	b.n	8000248 <__udivmoddi4+0x8c>
 800044c:	4543      	cmp	r3, r8
 800044e:	d2e5      	bcs.n	800041c <__udivmoddi4+0x260>
 8000450:	ebb8 0e02 	subs.w	lr, r8, r2
 8000454:	eb69 0104 	sbc.w	r1, r9, r4
 8000458:	3801      	subs	r0, #1
 800045a:	e7df      	b.n	800041c <__udivmoddi4+0x260>
 800045c:	4608      	mov	r0, r1
 800045e:	e7d2      	b.n	8000406 <__udivmoddi4+0x24a>
 8000460:	4660      	mov	r0, ip
 8000462:	e78d      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000464:	4681      	mov	r9, r0
 8000466:	e7b9      	b.n	80003dc <__udivmoddi4+0x220>
 8000468:	4666      	mov	r6, ip
 800046a:	e775      	b.n	8000358 <__udivmoddi4+0x19c>
 800046c:	4630      	mov	r0, r6
 800046e:	e74a      	b.n	8000306 <__udivmoddi4+0x14a>
 8000470:	f1ac 0c02 	sub.w	ip, ip, #2
 8000474:	4439      	add	r1, r7
 8000476:	e713      	b.n	80002a0 <__udivmoddi4+0xe4>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	e724      	b.n	80002c8 <__udivmoddi4+0x10c>
 800047e:	bf00      	nop

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <LL_EXTI_EnableIT_32_63+0x24>)
 800048e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000492:	4905      	ldr	r1, [pc, #20]	; (80004a8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	58000800 	.word	0x58000800

080004ac <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d0:	68fb      	ldr	r3, [r7, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004de:	b480      	push	{r7}
 80004e0:	b085      	sub	sp, #20
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80004e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ea:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80004ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80004fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004fe:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000508:	68fb      	ldr	r3, [r7, #12]
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 800051a:	f002 f8b3 	bl	8002684 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800051e:	f002 f8b7 	bl	8002690 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000522:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000526:	f7ff ffad 	bl	8000484 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 800052a:	f000 f821 	bl	8000570 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800052e:	f000 f8c3 	bl	80006b8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000532:	bf00      	nop
}
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <APPD_EnableCPU2+0x34>)
 8000540:	1d3c      	adds	r4, r7, #4
 8000542:	461d      	mov	r5, r3
 8000544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054c:	c403      	stmia	r4!, {r0, r1}
 800054e:	8022      	strh	r2, [r4, #0]
 8000550:	3402      	adds	r4, #2
 8000552:	0c13      	lsrs	r3, r2, #16
 8000554:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000556:	f008 fce5 	bl	8008f24 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4618      	mov	r0, r3
 800055e:	f008 f844 	bl	80085ea <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000562:	bf00      	nop
}
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bdb0      	pop	{r4, r5, r7, pc}
 800056a:	bf00      	nop
 800056c:	0800bae4 	.word	0x0800bae4

08000570 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000590:	2300      	movs	r3, #0
 8000592:	77fb      	strb	r3, [r7, #31]
 8000594:	e038      	b.n	8000608 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000596:	7ffb      	ldrb	r3, [r7, #31]
 8000598:	4a44      	ldr	r2, [pc, #272]	; (80006ac <APPD_SetCPU2GpioConfig+0x13c>)
 800059a:	00db      	lsls	r3, r3, #3
 800059c:	4413      	add	r3, r2
 800059e:	799b      	ldrb	r3, [r3, #6]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d02b      	beq.n	80005fc <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80005a4:	7ffb      	ldrb	r3, [r7, #31]
 80005a6:	4a41      	ldr	r2, [pc, #260]	; (80006ac <APPD_SetCPU2GpioConfig+0x13c>)
 80005a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005ac:	4a40      	ldr	r2, [pc, #256]	; (80006b0 <APPD_SetCPU2GpioConfig+0x140>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d01b      	beq.n	80005ea <APPD_SetCPU2GpioConfig+0x7a>
 80005b2:	4a3f      	ldr	r2, [pc, #252]	; (80006b0 <APPD_SetCPU2GpioConfig+0x140>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d823      	bhi.n	8000600 <APPD_SetCPU2GpioConfig+0x90>
 80005b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005bc:	d003      	beq.n	80005c6 <APPD_SetCPU2GpioConfig+0x56>
 80005be:	4a3d      	ldr	r2, [pc, #244]	; (80006b4 <APPD_SetCPU2GpioConfig+0x144>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d009      	beq.n	80005d8 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80005c4:	e01c      	b.n	8000600 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80005c6:	7ffb      	ldrb	r3, [r7, #31]
 80005c8:	4a38      	ldr	r2, [pc, #224]	; (80006ac <APPD_SetCPU2GpioConfig+0x13c>)
 80005ca:	00db      	lsls	r3, r3, #3
 80005cc:	4413      	add	r3, r2
 80005ce:	889a      	ldrh	r2, [r3, #4]
 80005d0:	8bbb      	ldrh	r3, [r7, #28]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	83bb      	strh	r3, [r7, #28]
          break;
 80005d6:	e014      	b.n	8000602 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80005d8:	7ffb      	ldrb	r3, [r7, #31]
 80005da:	4a34      	ldr	r2, [pc, #208]	; (80006ac <APPD_SetCPU2GpioConfig+0x13c>)
 80005dc:	00db      	lsls	r3, r3, #3
 80005de:	4413      	add	r3, r2
 80005e0:	889a      	ldrh	r2, [r3, #4]
 80005e2:	8b7b      	ldrh	r3, [r7, #26]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	837b      	strh	r3, [r7, #26]
          break;
 80005e8:	e00b      	b.n	8000602 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80005ea:	7ffb      	ldrb	r3, [r7, #31]
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <APPD_SetCPU2GpioConfig+0x13c>)
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	4413      	add	r3, r2
 80005f2:	889a      	ldrh	r2, [r3, #4]
 80005f4:	8b3b      	ldrh	r3, [r7, #24]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	833b      	strh	r3, [r7, #24]
          break;
 80005fa:	e002      	b.n	8000602 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80005fc:	bf00      	nop
 80005fe:	e000      	b.n	8000602 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000600:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000602:	7ffb      	ldrb	r3, [r7, #31]
 8000604:	3301      	adds	r3, #1
 8000606:	77fb      	strb	r3, [r7, #31]
 8000608:	7ffb      	ldrb	r3, [r7, #31]
 800060a:	2b21      	cmp	r3, #33	; 0x21
 800060c:	d9c3      	bls.n	8000596 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800061a:	8bbb      	ldrh	r3, [r7, #28]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d014      	beq.n	800064a <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000620:	8bbb      	ldrh	r3, [r7, #28]
 8000622:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ff41 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ff57 	bl	80004de <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000638:	f003 fa7e 	bl	8003b38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800063c:	8bbb      	ldrh	r3, [r7, #28]
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f003 fbe7 	bl	8003e18 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800064a:	8b7b      	ldrh	r3, [r7, #26]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d012      	beq.n	8000676 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000650:	8b7b      	ldrh	r3, [r7, #26]
 8000652:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000654:	2002      	movs	r0, #2
 8000656:	f7ff ff29 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800065a:	2002      	movs	r0, #2
 800065c:	f7ff ff3f 	bl	80004de <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4813      	ldr	r0, [pc, #76]	; (80006b4 <APPD_SetCPU2GpioConfig+0x144>)
 8000666:	f003 fa67 	bl	8003b38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800066a:	8b7b      	ldrh	r3, [r7, #26]
 800066c:	2200      	movs	r2, #0
 800066e:	4619      	mov	r1, r3
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <APPD_SetCPU2GpioConfig+0x144>)
 8000672:	f003 fbd1 	bl	8003e18 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000676:	8b3b      	ldrh	r3, [r7, #24]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d013      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 800067c:	8b3b      	ldrh	r3, [r7, #24]
 800067e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	2004      	movs	r0, #4
 8000682:	f7ff ff13 	bl	80004ac <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000686:	2004      	movs	r0, #4
 8000688:	f7ff ff29 	bl	80004de <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <APPD_SetCPU2GpioConfig+0x140>)
 8000692:	f003 fa51 	bl	8003b38 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000696:	8b3b      	ldrh	r3, [r7, #24]
 8000698:	2200      	movs	r2, #0
 800069a:	4619      	mov	r1, r3
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <APPD_SetCPU2GpioConfig+0x140>)
 800069e:	f003 fbbb 	bl	8003e18 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
}
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	0800bb74 	.word	0x0800bb74
 80006b0:	48000800 	.word	0x48000800
 80006b4:	48000400 	.word	0x48000400

080006b8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80006bc:	bf00      	nop
}
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80006d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006d6:	f023 0207 	bic.w	r2, r3, #7
 80006da:	4905      	ldr	r1, [pc, #20]	; (80006f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	4313      	orrs	r3, r2
 80006e0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	58000400 	.word	0x58000400

080006f4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4313      	orrs	r3, r2
 800070e:	608b      	str	r3, [r1, #8]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <APPE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000720:	f000 f818 	bl	8000754 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000724:	4909      	ldr	r1, [pc, #36]	; (800074c <APPE_Init+0x30>)
 8000726:	2000      	movs	r0, #0
 8000728:	f000 fcf0 	bl	800110c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800072c:	f7ff fef3 	bl	8000516 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000730:	2101      	movs	r1, #1
 8000732:	2001      	movs	r0, #1
 8000734:	f00a ff0e 	bl	800b554 <UTIL_LPM_SetOffMode>
  HAL_GPIO_WritePin(LD_GREEN_GPIO_Port,LD_GREEN_Pin,GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2101      	movs	r1, #1
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <APPE_Init+0x34>)
 800073e:	f003 fb6b 	bl	8003e18 <HAL_GPIO_WritePin>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000742:	f000 f815 	bl	8000770 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000746:	bf00      	nop
}
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000558 	.word	0x20000558
 8000750:	48000400 	.word	0x48000400

08000754 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000758:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800075c:	f7ff ffca 	bl	80006f4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000760:	f00a fee6 	bl	800b530 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000764:	2004      	movs	r0, #4
 8000766:	f7ff ffaf 	bl	80006c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800076a:	bf00      	nop
}
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000776:	f008 fa1f 	bl	8008bb8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <appe_Tl_Init+0x50>)
 800077c:	2100      	movs	r1, #0
 800077e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000782:	f00b f831 	bl	800b7e8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <appe_Tl_Init+0x54>)
 8000788:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <appe_Tl_Init+0x58>)
 800078c:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800078e:	463b      	mov	r3, r7
 8000790:	4619      	mov	r1, r3
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <appe_Tl_Init+0x5c>)
 8000794:	f008 f8d6 	bl	8008944 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <appe_Tl_Init+0x60>)
 800079a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <appe_Tl_Init+0x64>)
 800079e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <appe_Tl_Init+0x68>)
 80007a2:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007a4:	f240 533c 	movw	r3, #1340	; 0x53c
 80007a8:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	4618      	mov	r0, r3
 80007b0:	f008 fb44 	bl	8008e3c <TL_MM_Init>

  TL_Enable();
 80007b4:	f008 f9fa 	bl	8008bac <TL_Enable>

  return;
 80007b8:	bf00      	nop
}
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	0800897d 	.word	0x0800897d
 80007c4:	20030724 	.word	0x20030724
 80007c8:	080007dd 	.word	0x080007dd
 80007cc:	080007f3 	.word	0x080007f3
 80007d0:	2003093c 	.word	0x2003093c
 80007d4:	20030830 	.word	0x20030830
 80007d8:	200301e8 	.word	0x200301e8

080007dc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80007e6:	bf00      	nop
}
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80007fa:	f7ff fe9d 	bl	8000538 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80007fe:	f008 fd27 	bl	8009250 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000802:	2100      	movs	r1, #0
 8000804:	2001      	movs	r0, #1
 8000806:	f00a fea5 	bl	800b554 <UTIL_LPM_SetOffMode>
  return;
 800080a:	bf00      	nop
}
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000816:	f00a fecd 	bl	800b5b4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 800081a:	bf00      	nop
}
 800081c:	bd80      	pop	{r7, pc}

0800081e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f00a fef8 	bl	800b620 <UTIL_SEQ_Run>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000840:	2100      	movs	r1, #0
 8000842:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000846:	f00a fff1 	bl	800b82c <UTIL_SEQ_SetTask>
  return;
 800084a:	bf00      	nop
}
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800085a:	2002      	movs	r0, #2
 800085c:	f00b f852 	bl	800b904 <UTIL_SEQ_SetEvt>
  return;
 8000860:	bf00      	nop
}
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000870:	2002      	movs	r0, #2
 8000872:	f00b f867 	bl	800b944 <UTIL_SEQ_WaitEvt>
  return;
 8000876:	bf00      	nop
}
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000888:	88fb      	ldrh	r3, [r7, #6]
 800088a:	2b10      	cmp	r3, #16
 800088c:	d006      	beq.n	800089c <HAL_GPIO_EXTI_Callback+0x1e>
 800088e:	2b10      	cmp	r3, #16
 8000890:	dc0d      	bgt.n	80008ae <HAL_GPIO_EXTI_Callback+0x30>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d005      	beq.n	80008a2 <HAL_GPIO_EXTI_Callback+0x24>
 8000896:	2b02      	cmp	r3, #2
 8000898:	d006      	beq.n	80008a8 <HAL_GPIO_EXTI_Callback+0x2a>
    case SW3_Pin:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 800089a:	e008      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 800089c:	f009 faf8 	bl	8009e90 <APP_BLE_Key_Button1_Action>
      break;
 80008a0:	e006      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80008a2:	f009 fafd 	bl	8009ea0 <APP_BLE_Key_Button2_Action>
      break;
 80008a6:	e003      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80008a8:	f009 fb01 	bl	8009eae <APP_BLE_Key_Button3_Action>
      break;
 80008ac:	e000      	b.n	80008b0 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80008ae:	bf00      	nop

  }
  return;
 80008b0:	bf00      	nop
}
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <LL_EXTI_EnableIT_0_31>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <LL_EXTI_EnableIT_0_31+0x24>)
 80008c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80008c6:	4905      	ldr	r1, [pc, #20]	; (80008dc <LL_EXTI_EnableIT_0_31+0x24>)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	58000800 	.word	0x58000800

080008e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4904      	ldr	r1, [pc, #16]	; (8000900 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	600b      	str	r3, [r1, #0]

}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	58000800 	.word	0x58000800

08000904 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ReadRtcSsrValue+0x3c>)
 800090c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090e:	b29b      	uxth	r3, r3
 8000910:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <ReadRtcSsrValue+0x3c>)
 8000914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000916:	b29b      	uxth	r3, r3
 8000918:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800091a:	e005      	b.n	8000928 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <ReadRtcSsrValue+0x3c>)
 8000922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000924:	b29b      	uxth	r3, r3
 8000926:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d1f5      	bne.n	800091c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000930:	683b      	ldr	r3, [r7, #0]
}
 8000932:	4618      	mov	r0, r3
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40002800 	.word	0x40002800

08000944 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	71fb      	strb	r3, [r7, #7]
 8000950:	4613      	mov	r3, r2
 8000952:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000954:	79ba      	ldrb	r2, [r7, #6]
 8000956:	491d      	ldr	r1, [pc, #116]	; (80009cc <LinkTimerAfter+0x88>)
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	440b      	add	r3, r1
 8000962:	3315      	adds	r3, #21
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b06      	cmp	r3, #6
 800096c:	d009      	beq.n	8000982 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	4916      	ldr	r1, [pc, #88]	; (80009cc <LinkTimerAfter+0x88>)
 8000972:	4613      	mov	r3, r2
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	4413      	add	r3, r2
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	440b      	add	r3, r1
 800097c:	3314      	adds	r3, #20
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000982:	79fa      	ldrb	r2, [r7, #7]
 8000984:	4911      	ldr	r1, [pc, #68]	; (80009cc <LinkTimerAfter+0x88>)
 8000986:	4613      	mov	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	440b      	add	r3, r1
 8000990:	3315      	adds	r3, #21
 8000992:	7bfa      	ldrb	r2, [r7, #15]
 8000994:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <LinkTimerAfter+0x88>)
 800099a:	4613      	mov	r3, r2
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	4413      	add	r3, r2
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	440b      	add	r3, r1
 80009a4:	3314      	adds	r3, #20
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	4907      	ldr	r1, [pc, #28]	; (80009cc <LinkTimerAfter+0x88>)
 80009ae:	4613      	mov	r3, r2
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	440b      	add	r3, r1
 80009b8:	3315      	adds	r3, #21
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	701a      	strb	r2, [r3, #0]

  return;
 80009be:	bf00      	nop
}
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000030 	.word	0x20000030

080009d0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	460a      	mov	r2, r1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <LinkTimerBefore+0xb8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d032      	beq.n	8000a52 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80009ec:	79ba      	ldrb	r2, [r7, #6]
 80009ee:	4927      	ldr	r1, [pc, #156]	; (8000a8c <LinkTimerBefore+0xbc>)
 80009f0:	4613      	mov	r3, r2
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	00db      	lsls	r3, r3, #3
 80009f8:	440b      	add	r3, r1
 80009fa:	3314      	adds	r3, #20
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a00:	7bfa      	ldrb	r2, [r7, #15]
 8000a02:	4922      	ldr	r1, [pc, #136]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	491d      	ldr	r1, [pc, #116]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	3315      	adds	r3, #21
 8000a24:	79ba      	ldrb	r2, [r7, #6]
 8000a26:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a28:	79fa      	ldrb	r2, [r7, #7]
 8000a2a:	4918      	ldr	r1, [pc, #96]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	440b      	add	r3, r1
 8000a36:	3314      	adds	r3, #20
 8000a38:	7bfa      	ldrb	r2, [r7, #15]
 8000a3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a3c:	79ba      	ldrb	r2, [r7, #6]
 8000a3e:	4913      	ldr	r1, [pc, #76]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3314      	adds	r3, #20
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a50:	e014      	b.n	8000a7c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	3315      	adds	r3, #21
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	4908      	ldr	r1, [pc, #32]	; (8000a8c <LinkTimerBefore+0xbc>)
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	440b      	add	r3, r1
 8000a74:	3314      	adds	r3, #20
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	701a      	strb	r2, [r3, #0]
  return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	20000030 	.word	0x20000030

08000a90 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a9a:	4b4e      	ldr	r3, [pc, #312]	; (8000bd4 <linkTimer+0x144>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d118      	bne.n	8000ad6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000aa4:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <linkTimer+0x144>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <linkTimer+0x148>)
 8000aac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000aae:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <linkTimer+0x144>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	4949      	ldr	r1, [pc, #292]	; (8000bdc <linkTimer+0x14c>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3315      	adds	r3, #21
 8000ac4:	2206      	movs	r2, #6
 8000ac6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ac8:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <linkTimer+0x150>)
 8000aca:	f04f 32ff 	mov.w	r2, #4294967295
 8000ace:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	81fb      	strh	r3, [r7, #14]
 8000ad4:	e078      	b.n	8000bc8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000ad6:	f000 f909 	bl	8000cec <ReturnTimeElapsed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	493e      	ldr	r1, [pc, #248]	; (8000bdc <linkTimer+0x14c>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	3308      	adds	r3, #8
 8000aee:	6819      	ldr	r1, [r3, #0]
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	4419      	add	r1, r3
 8000af6:	4839      	ldr	r0, [pc, #228]	; (8000bdc <linkTimer+0x14c>)
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	4403      	add	r3, r0
 8000b02:	3308      	adds	r3, #8
 8000b04:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	4934      	ldr	r1, [pc, #208]	; (8000bdc <linkTimer+0x14c>)
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	440b      	add	r3, r1
 8000b14:	3308      	adds	r3, #8
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <linkTimer+0x144>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4619      	mov	r1, r3
 8000b22:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <linkTimer+0x14c>)
 8000b24:	460b      	mov	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	440b      	add	r3, r1
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3308      	adds	r3, #8
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d337      	bcc.n	8000ba8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <linkTimer+0x144>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b3e:	7b7a      	ldrb	r2, [r7, #13]
 8000b40:	4926      	ldr	r1, [pc, #152]	; (8000bdc <linkTimer+0x14c>)
 8000b42:	4613      	mov	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	4413      	add	r3, r2
 8000b48:	00db      	lsls	r3, r3, #3
 8000b4a:	440b      	add	r3, r1
 8000b4c:	3315      	adds	r3, #21
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b52:	e013      	b.n	8000b7c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b54:	7b7a      	ldrb	r2, [r7, #13]
 8000b56:	4921      	ldr	r1, [pc, #132]	; (8000bdc <linkTimer+0x14c>)
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	440b      	add	r3, r1
 8000b62:	3315      	adds	r3, #21
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000b68:	7b7a      	ldrb	r2, [r7, #13]
 8000b6a:	491c      	ldr	r1, [pc, #112]	; (8000bdc <linkTimer+0x14c>)
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	440b      	add	r3, r1
 8000b76:	3315      	adds	r3, #21
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b7c:	7b3b      	ldrb	r3, [r7, #12]
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d00b      	beq.n	8000b9a <linkTimer+0x10a>
 8000b82:	7b3a      	ldrb	r2, [r7, #12]
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <linkTimer+0x14c>)
 8000b86:	4613      	mov	r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	3308      	adds	r3, #8
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d2dc      	bcs.n	8000b54 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000b9a:	7b7a      	ldrb	r2, [r7, #13]
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fecf 	bl	8000944 <LinkTimerAfter>
 8000ba6:	e00f      	b.n	8000bc8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <linkTimer+0x144>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff ff0c 	bl	80009d0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <linkTimer+0x144>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <linkTimer+0x148>)
 8000bc0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <linkTimer+0x144>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000c0 	.word	0x200000c0
 8000bd8:	200000c1 	.word	0x200000c1
 8000bdc:	20000030 	.word	0x20000030
 8000be0:	200000c4 	.word	0x200000c4

08000be4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <UnlinkTimer+0xf8>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d111      	bne.n	8000c24 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <UnlinkTimer+0xf8>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <UnlinkTimer+0xfc>)
 8000c08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4935      	ldr	r1, [pc, #212]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3315      	adds	r3, #21
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	4b2f      	ldr	r3, [pc, #188]	; (8000cdc <UnlinkTimer+0xf8>)
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e03e      	b.n	8000ca2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c24:	79fa      	ldrb	r2, [r7, #7]
 8000c26:	492f      	ldr	r1, [pc, #188]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	440b      	add	r3, r1
 8000c32:	3314      	adds	r3, #20
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	492a      	ldr	r1, [pc, #168]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	440b      	add	r3, r1
 8000c46:	3315      	adds	r3, #21
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c4c:	79f9      	ldrb	r1, [r7, #7]
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c52:	460b      	mov	r3, r1
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	440b      	add	r3, r1
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4403      	add	r3, r0
 8000c5c:	3315      	adds	r3, #21
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2d8      	uxtb	r0, r3
 8000c62:	4920      	ldr	r1, [pc, #128]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3315      	adds	r3, #21
 8000c70:	4602      	mov	r2, r0
 8000c72:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c74:	7bbb      	ldrb	r3, [r7, #14]
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d013      	beq.n	8000ca2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000c7a:	79f9      	ldrb	r1, [r7, #7]
 8000c7c:	7bba      	ldrb	r2, [r7, #14]
 8000c7e:	4819      	ldr	r0, [pc, #100]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c80:	460b      	mov	r3, r1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	440b      	add	r3, r1
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4403      	add	r3, r0
 8000c8a:	3314      	adds	r3, #20
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b2d8      	uxtb	r0, r3
 8000c90:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <UnlinkTimer+0x100>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	490f      	ldr	r1, [pc, #60]	; (8000ce4 <UnlinkTimer+0x100>)
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <UnlinkTimer+0xf8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b06      	cmp	r3, #6
 8000cbe:	d107      	bne.n	8000cd0 <UnlinkTimer+0xec>
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <UnlinkTimer+0x104>)
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  return;
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
}
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	200000c0 	.word	0x200000c0
 8000ce0:	200000c1 	.word	0x200000c1
 8000ce4:	20000030 	.word	0x20000030
 8000ce8:	200000c4 	.word	0x200000c4

08000cec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <ReturnTimeElapsed+0x70>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d026      	beq.n	8000d4a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000cfc:	f7ff fe02 	bl	8000904 <ReadRtcSsrValue>
 8000d00:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <ReturnTimeElapsed+0x70>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d805      	bhi.n	8000d18 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <ReturnTimeElapsed+0x70>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	e00a      	b.n	8000d2e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <ReturnTimeElapsed+0x74>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <ReturnTimeElapsed+0x70>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <ReturnTimeElapsed+0x78>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <ReturnTimeElapsed+0x7c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	40d3      	lsrs	r3, r2
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	e001      	b.n	8000d4e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	b29b      	uxth	r3, r3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000c4 	.word	0x200000c4
 8000d60:	20000282 	.word	0x20000282
 8000d64:	20000281 	.word	0x20000281
 8000d68:	20000280 	.word	0x20000280

08000d6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d108      	bne.n	8000d8e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000d7c:	f7ff fdc2 	bl	8000904 <ReadRtcSsrValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <RestartWakeupCounter+0xa8>)
 8000d84:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f002 fc9f 	bl	80036ca <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000d8c:	e03e      	b.n	8000e0c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d803      	bhi.n	8000d9c <RestartWakeupCounter+0x30>
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <RestartWakeupCounter+0xac>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d002      	beq.n	8000da2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000da2:	bf00      	nop
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <RestartWakeupCounter+0xb0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f7      	beq.n	8000da4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <RestartWakeupCounter+0xb0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <RestartWakeupCounter+0xb0>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dc8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <RestartWakeupCounter+0xb4>)
 8000dcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dd0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f002 fc87 	bl	80036e6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <RestartWakeupCounter+0xb8>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	0c1b      	lsrs	r3, r3, #16
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	88fa      	ldrh	r2, [r7, #6]
 8000de2:	4910      	ldr	r1, [pc, #64]	; (8000e24 <RestartWakeupCounter+0xb8>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000de8:	f7ff fd8c 	bl	8000904 <ReadRtcSsrValue>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <RestartWakeupCounter+0xa8>)
 8000df0:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <RestartWakeupCounter+0xb0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <RestartWakeupCounter+0xb0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e04:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e06:	f3af 8000 	nop.w
  return ;
 8000e0a:	bf00      	nop
}
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000c4 	.word	0x200000c4
 8000e18:	20000280 	.word	0x20000280
 8000e1c:	2000027c 	.word	0x2000027c
 8000e20:	58000800 	.word	0x58000800
 8000e24:	40002800 	.word	0x40002800

08000e28 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e2e:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <RescheduleTimerList+0x124>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3a:	d108      	bne.n	8000e4e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e3c:	bf00      	nop
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <RescheduleTimerList+0x128>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f7      	bne.n	8000e3e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <RescheduleTimerList+0x128>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <RescheduleTimerList+0x128>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e60:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e62:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <RescheduleTimerList+0x12c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	493b      	ldr	r1, [pc, #236]	; (8000f58 <RescheduleTimerList+0x130>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	440b      	add	r3, r1
 8000e76:	3308      	adds	r3, #8
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000e7c:	f7ff ff36 	bl	8000cec <ReturnTimeElapsed>
 8000e80:	4603      	mov	r3, r0
 8000e82:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d205      	bcs.n	8000e98 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000e90:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <RescheduleTimerList+0x134>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e04d      	b.n	8000f34 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a31      	ldr	r2, [pc, #196]	; (8000f60 <RescheduleTimerList+0x138>)
 8000e9c:	8812      	ldrh	r2, [r2, #0]
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d906      	bls.n	8000eb8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <RescheduleTimerList+0x138>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <RescheduleTimerList+0x134>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e03d      	b.n	8000f34 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <RescheduleTimerList+0x134>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec8:	e034      	b.n	8000f34 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	4922      	ldr	r1, [pc, #136]	; (8000f58 <RescheduleTimerList+0x130>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3308      	adds	r3, #8
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d20a      	bcs.n	8000ef8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	491c      	ldr	r1, [pc, #112]	; (8000f58 <RescheduleTimerList+0x130>)
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	e013      	b.n	8000f20 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	4917      	ldr	r1, [pc, #92]	; (8000f58 <RescheduleTimerList+0x130>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3308      	adds	r3, #8
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	1ac9      	subs	r1, r1, r3
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <RescheduleTimerList+0x130>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4403      	add	r3, r0
 8000f1c:	3308      	adds	r3, #8
 8000f1e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <RescheduleTimerList+0x130>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3315      	adds	r3, #21
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d1c7      	bne.n	8000eca <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f3a:	89bb      	ldrh	r3, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff15 	bl	8000d6c <RestartWakeupCounter>

  return ;
 8000f42:	bf00      	nop
}
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40002800 	.word	0x40002800
 8000f50:	2000027c 	.word	0x2000027c
 8000f54:	200000c0 	.word	0x200000c0
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	200000c8 	.word	0x200000c8
 8000f60:	20000284 	.word	0x20000284

08000f64 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8000f6e:	617b      	str	r3, [r7, #20]
  return(result);
 8000f70:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f78:	4b5f      	ldr	r3, [pc, #380]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	22ca      	movs	r2, #202	; 0xca
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2253      	movs	r2, #83	; 0x53
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000f8c:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f9e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fa0:	4b56      	ldr	r3, [pc, #344]	; (80010fc <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fa8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fac:	4954      	ldr	r1, [pc, #336]	; (8001100 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	330c      	adds	r3, #12
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d172      	bne.n	80010a8 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fc2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fc6:	494e      	ldr	r1, [pc, #312]	; (8001100 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000fc8:	4613      	mov	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	440b      	add	r3, r1
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000fd6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fda:	4949      	ldr	r1, [pc, #292]	; (8001100 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	3310      	adds	r3, #16
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000fec:	4b45      	ldr	r3, [pc, #276]	; (8001104 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d050      	beq.n	8001098 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ff6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ffa:	4941      	ldr	r1, [pc, #260]	; (8001100 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	330d      	adds	r3, #13
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d126      	bne.n	800105e <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001010:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001014:	2101      	movs	r1, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fde4 	bl	8000be4 <UnlinkTimer>
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f383 8810 	msr	PRIMASK, r3
}
 8001026:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001028:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102c:	4934      	ldr	r1, [pc, #208]	; (8001100 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3304      	adds	r3, #4
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f9d4 	bl	80013f0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	22ca      	movs	r2, #202	; 0xca
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2253      	movs	r2, #83	; 0x53
 800105a:	625a      	str	r2, [r3, #36]	; 0x24
 800105c:	e014      	b.n	8001088 <HW_TS_RTC_Wakeup_Handler+0x124>
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f383 8810 	msr	PRIMASK, r3
}
 8001068:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800106a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f932 	bl	80012d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	22ca      	movs	r2, #202	; 0xca
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2253      	movs	r2, #83	; 0x53
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	4619      	mov	r1, r3
 8001090:	69b8      	ldr	r0, [r7, #24]
 8001092:	f000 fa35 	bl	8001500 <HW_TS_RTC_Int_AppNot>
 8001096:	e025      	b.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001098:	f7ff fec6 	bl	8000e28 <RescheduleTimerList>
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f383 8810 	msr	PRIMASK, r3
}
 80010a6:	e01d      	b.n	80010e4 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80010a8:	bf00      	nop
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f7      	beq.n	80010aa <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80010d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f383 8810 	msr	PRIMASK, r3
}
 80010e2:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80010ee:	bf00      	nop
}
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000027c 	.word	0x2000027c
 80010fc:	200000c0 	.word	0x200000c0
 8001100:	20000030 	.word	0x20000030
 8001104:	200000c8 	.word	0x200000c8
 8001108:	58000800 	.word	0x58000800

0800110c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001118:	4a64      	ldr	r2, [pc, #400]	; (80012ac <HW_TS_Init+0x1a0>)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <HW_TS_Init+0x1a0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	22ca      	movs	r2, #202	; 0xca
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
 8001128:	4b60      	ldr	r3, [pc, #384]	; (80012ac <HW_TS_Init+0x1a0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2253      	movs	r2, #83	; 0x53
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <HW_TS_Init+0x1a4>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4a5e      	ldr	r2, [pc, #376]	; (80012b0 <HW_TS_Init+0x1a4>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800113e:	4b5c      	ldr	r3, [pc, #368]	; (80012b0 <HW_TS_Init+0x1a4>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 0307 	and.w	r3, r3, #7
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f1c3 0304 	rsb	r3, r3, #4
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <HW_TS_Init+0x1a8>)
 8001152:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001154:	4b56      	ldr	r3, [pc, #344]	; (80012b0 <HW_TS_Init+0x1a4>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800115c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001160:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	fa92 f2a2 	rbit	r2, r2
 8001168:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	2a00      	cmp	r2, #0
 8001172:	d101      	bne.n	8001178 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001174:	2220      	movs	r2, #32
 8001176:	e003      	b.n	8001180 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	40d3      	lsrs	r3, r2
 8001182:	b2db      	uxtb	r3, r3
 8001184:	3301      	adds	r3, #1
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <HW_TS_Init+0x1ac>)
 800118a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <HW_TS_Init+0x1a4>)
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001196:	b29b      	uxth	r3, r3
 8001198:	3301      	adds	r3, #1
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HW_TS_Init+0x1b0>)
 800119e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HW_TS_Init+0x1b0>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <HW_TS_Init+0x1ac>)
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011b2:	4a40      	ldr	r2, [pc, #256]	; (80012b4 <HW_TS_Init+0x1a8>)
 80011b4:	7812      	ldrb	r2, [r2, #0]
 80011b6:	40d3      	lsrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d904      	bls.n	80011ce <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <HW_TS_Init+0x1b4>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	801a      	strh	r2, [r3, #0]
 80011cc:	e003      	b.n	80011d6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HW_TS_Init+0x1b4>)
 80011d4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011da:	f7ff fb81 	bl	80008e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011e2:	f7ff fb69 	bl	80008b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d143      	bne.n	8001274 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HW_TS_Init+0x1b8>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HW_TS_Init+0x1bc>)
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	77fb      	strb	r3, [r7, #31]
 80011fe:	e00c      	b.n	800121a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001200:	7ffa      	ldrb	r2, [r7, #31]
 8001202:	4932      	ldr	r1, [pc, #200]	; (80012cc <HW_TS_Init+0x1c0>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	330c      	adds	r3, #12
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001214:	7ffb      	ldrb	r3, [r7, #31]
 8001216:	3301      	adds	r3, #1
 8001218:	77fb      	strb	r3, [r7, #31]
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	2b05      	cmp	r3, #5
 800121e:	d9ef      	bls.n	8001200 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HW_TS_Init+0x1c4>)
 8001222:	2206      	movs	r2, #6
 8001224:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HW_TS_Init+0x1a0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HW_TS_Init+0x1a0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001238:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HW_TS_Init+0x1a0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HW_TS_Init+0x1a0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800124e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HW_TS_Init+0x1c8>)
 8001252:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001256:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001258:	2003      	movs	r0, #3
 800125a:	f002 fa44 	bl	80036e6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HW_TS_Init+0x1a0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HW_TS_Init+0x1a0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	e00a      	b.n	800128a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001274:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HW_TS_Init+0x1a0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001284:	2003      	movs	r0, #3
 8001286:	f002 fa20 	bl	80036ca <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HW_TS_Init+0x1a0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	22ff      	movs	r2, #255	; 0xff
 8001292:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001294:	2200      	movs	r2, #0
 8001296:	2103      	movs	r1, #3
 8001298:	2003      	movs	r0, #3
 800129a:	f002 f9d4 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800129e:	2003      	movs	r0, #3
 80012a0:	f002 f9eb 	bl	800367a <HAL_NVIC_EnableIRQ>

  return;
 80012a4:	bf00      	nop
}
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000027c 	.word	0x2000027c
 80012b0:	40002800 	.word	0x40002800
 80012b4:	20000280 	.word	0x20000280
 80012b8:	20000281 	.word	0x20000281
 80012bc:	20000282 	.word	0x20000282
 80012c0:	20000284 	.word	0x20000284
 80012c4:	200000c8 	.word	0x200000c8
 80012c8:	200000c4 	.word	0x200000c4
 80012cc:	20000030 	.word	0x20000030
 80012d0:	200000c0 	.word	0x200000c0
 80012d4:	58000800 	.word	0x58000800

080012d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012e2:	f3ef 8310 	mrs	r3, PRIMASK
 80012e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80012e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012f0:	2003      	movs	r0, #3
 80012f2:	f002 f9d0 	bl	8003696 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <HW_TS_Stop+0x100>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	22ca      	movs	r2, #202	; 0xca
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001300:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HW_TS_Stop+0x100>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2253      	movs	r2, #83	; 0x53
 8001308:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4933      	ldr	r1, [pc, #204]	; (80013dc <HW_TS_Stop+0x104>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	330c      	adds	r3, #12
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d148      	bne.n	80013b4 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fc5c 	bl	8000be4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <HW_TS_Stop+0x108>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	2b06      	cmp	r3, #6
 8001336:	d135      	bne.n	80013a4 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <HW_TS_Stop+0x10c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d108      	bne.n	8001358 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001346:	bf00      	nop
 8001348:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HW_TS_Stop+0x100>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f7      	bne.n	8001348 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <HW_TS_Stop+0x100>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HW_TS_Stop+0x100>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800136c:	bf00      	nop
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HW_TS_Stop+0x100>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f7      	beq.n	800136e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HW_TS_Stop+0x100>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HW_TS_Stop+0x100>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001392:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HW_TS_Stop+0x110>)
 8001396:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800139a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800139c:	2003      	movs	r0, #3
 800139e:	f002 f9a2 	bl	80036e6 <HAL_NVIC_ClearPendingIRQ>
 80013a2:	e007      	b.n	80013b4 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HW_TS_Stop+0x114>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	7cfa      	ldrb	r2, [r7, #19]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80013b0:	f7ff fd3a 	bl	8000e28 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HW_TS_Stop+0x100>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	22ff      	movs	r2, #255	; 0xff
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013be:	2003      	movs	r0, #3
 80013c0:	f002 f95b 	bl	800367a <HAL_NVIC_EnableIRQ>
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	f383 8810 	msr	PRIMASK, r3
}
 80013ce:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013d0:	bf00      	nop
}
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000027c 	.word	0x2000027c
 80013dc:	20000030 	.word	0x20000030
 80013e0:	200000c0 	.word	0x200000c0
 80013e4:	40002800 	.word	0x40002800
 80013e8:	58000800 	.word	0x58000800
 80013ec:	200000c1 	.word	0x200000c1

080013f0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	493c      	ldr	r1, [pc, #240]	; (80014f0 <HW_TS_Start+0x100>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	330c      	adds	r3, #12
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d103      	bne.n	800141c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff5e 	bl	80012d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800141c:	f3ef 8310 	mrs	r3, PRIMASK
 8001420:	60fb      	str	r3, [r7, #12]
  return(result);
 8001422:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001424:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001426:	b672      	cpsid	i
}
 8001428:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800142a:	2003      	movs	r0, #3
 800142c:	f002 f933 	bl	8003696 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <HW_TS_Start+0x104>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	22ca      	movs	r2, #202	; 0xca
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <HW_TS_Start+0x104>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2253      	movs	r2, #83	; 0x53
 8001442:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	492a      	ldr	r1, [pc, #168]	; (80014f0 <HW_TS_Start+0x100>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	330c      	adds	r3, #12
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	4925      	ldr	r1, [pc, #148]	; (80014f0 <HW_TS_Start+0x100>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	3308      	adds	r3, #8
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4920      	ldr	r1, [pc, #128]	; (80014f0 <HW_TS_Start+0x100>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb04 	bl	8000a90 <linkTimer>
 8001488:	4603      	mov	r3, r0
 800148a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800148c:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HW_TS_Start+0x108>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <HW_TS_Start+0x10c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b2db      	uxtb	r3, r3
 8001498:	7c7a      	ldrb	r2, [r7, #17]
 800149a:	429a      	cmp	r2, r3
 800149c:	d002      	beq.n	80014a4 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800149e:	f7ff fcc3 	bl	8000e28 <RescheduleTimerList>
 80014a2:	e013      	b.n	80014cc <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014a4:	79fa      	ldrb	r2, [r7, #7]
 80014a6:	4912      	ldr	r1, [pc, #72]	; (80014f0 <HW_TS_Start+0x100>)
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	3308      	adds	r3, #8
 80014b4:	6819      	ldr	r1, [r3, #0]
 80014b6:	8a7b      	ldrh	r3, [r7, #18]
 80014b8:	79fa      	ldrb	r2, [r7, #7]
 80014ba:	1ac9      	subs	r1, r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <HW_TS_Start+0x100>)
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4403      	add	r3, r0
 80014c8:	3308      	adds	r3, #8
 80014ca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HW_TS_Start+0x104>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014d6:	2003      	movs	r0, #3
 80014d8:	f002 f8cf 	bl	800367a <HAL_NVIC_EnableIRQ>
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	f383 8810 	msr	PRIMASK, r3
}
 80014e6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014e8:	bf00      	nop
}
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000030 	.word	0x20000030
 80014f4:	2000027c 	.word	0x2000027c
 80014f8:	200000c0 	.word	0x200000c0
 80014fc:	200000c1 	.word	0x200000c1

08001500 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	460b      	mov	r3, r1
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4798      	blx	r3

  return;
 8001512:	bf00      	nop
}
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800152a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001536:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001542:	4313      	orrs	r3, r2
 8001544:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	cafecafe 	.word	0xcafecafe

08001558 <LL_RCC_LSE_SetDriveCapability>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001568:	f023 0218 	bic.w	r2, r3, #24
 800156c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015dc:	d101      	bne.n	80015e2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80015f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001602:	d101      	bne.n	8001608 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_AHB1_GRP1_EnableClock>:
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800161c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001620:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4313      	orrs	r3, r2
 800162a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001638:	68fb      	ldr	r3, [r7, #12]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <LL_AHB2_GRP1_EnableClock>:
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_AHB3_GRP1_EnableClock>:
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	605a      	str	r2, [r3, #4]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	615a      	str	r2, [r3, #20]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	615a      	str	r2, [r3, #20]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	22ca      	movs	r2, #202	; 0xca
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2253      	movs	r2, #83	; 0x53
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	609a      	str	r2, [r3, #8]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

	  /**
	   * The OPTVERR flag is wrongly set at power on
	   * It shall be cleared before using any HAL_FLASH_xxx() api
	   */
	  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <main+0x44>)
 80017d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017da:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017dc:	f000 feac 	bl	8002538 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80017e0:	f000 fa18 	bl	8001c14 <Reset_Device>
  Config_HSE();
 80017e4:	f000 fa57 	bl	8001c96 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e8:	f000 f816 	bl	8001818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ec:	f000 f9c0 	bl	8001b70 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f0:	f000 f9a4 	bl	8001b3c <MX_DMA_Init>
  MX_ADC1_Init();
 80017f4:	f000 f8b4 	bl	8001960 <MX_ADC1_Init>
  MX_RF_Init();
 80017f8:	f000 f918 	bl	8001a2c <MX_RF_Init>
  MX_RTC_Init();
 80017fc:	f000 f91e 	bl	8001a3c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001800:	f000 f950 	bl	8001aa4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001804:	f7fe ff8a 	bl	800071c <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f009 ff08 	bl	800b620 <UTIL_SEQ_Run>
 8001810:	e7fa      	b.n	8001808 <main+0x38>
 8001812:	bf00      	nop
 8001814:	58004000 	.word	0x58004000

08001818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0ae      	sub	sp, #184	; 0xb8
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001822:	2248      	movs	r2, #72	; 0x48
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f00a f948 	bl	800babc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2250      	movs	r2, #80	; 0x50
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f00a f938 	bl	800babc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800184c:	f002 fb38 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fe81 	bl	8001558 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <SystemClock_Config+0x144>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <SystemClock_Config+0x144>)
 8001860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <SystemClock_Config+0x144>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001872:	2307      	movs	r3, #7
 8001874:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001884:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188c:	2302      	movs	r3, #2
 800188e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001892:	2303      	movs	r3, #3
 8001894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001898:	2310      	movs	r3, #16
 800189a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLN = 8;
 800189e:	2308      	movs	r3, #8
 80018a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fe91 	bl	80045e8 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80018cc:	f000 f9f7 	bl	8001cbe <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80018d0:	236f      	movs	r3, #111	; 0x6f
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2303      	movs	r3, #3
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018f0:	2103      	movs	r1, #3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fa04 	bl	8004d00 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80018fe:	f000 f9de 	bl	8001cbe <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001902:	f643 4301 	movw	r3, #15361	; 0x3c01
 8001906:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 8001908:	2308      	movs	r3, #8
 800190a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001910:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001916:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001918:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800191c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 800191e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001922:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001928:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800192c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800192e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001938:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800193a:	2300      	movs	r3, #0
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800193e:	2300      	movs	r3, #0
 8001940:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fe1c 	bl	8005582 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 8001950:	f000 f9b5 	bl	8001cbe <Error_Handler>
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif
  /* USER CODE END Smps */
}
 8001954:	bf00      	nop
 8001956:	37b8      	adds	r7, #184	; 0xb8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	58000400 	.word	0x58000400

08001960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001966:	463b      	mov	r3, r7
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_ADC1_Init+0xbc>)
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <MX_ADC1_Init+0xc0>)
 800197a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <MX_ADC1_Init+0xbc>)
 800197e:	2200      	movs	r2, #0
 8001980:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_ADC1_Init+0xbc>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_ADC1_Init+0xbc>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <MX_ADC1_Init+0xbc>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_ADC1_Init+0xbc>)
 8001996:	2204      	movs	r2, #4
 8001998:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_ADC1_Init+0xbc>)
 800199c:	2200      	movs	r2, #0
 800199e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d6:	4811      	ldr	r0, [pc, #68]	; (8001a1c <MX_ADC1_Init+0xbc>)
 80019d8:	f000 ffec 	bl	80029b4 <HAL_ADC_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019e2:	f000 f96c 	bl	8001cbe <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_ADC1_Init+0xc4>)
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ea:	2306      	movs	r3, #6
 80019ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <MX_ADC1_Init+0xc8>)
 80019f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019f6:	2304      	movs	r3, #4
 80019f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_ADC1_Init+0xbc>)
 8001a04:	f001 f920 	bl	8002c48 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a0e:	f000 f956 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000408 	.word	0x20000408
 8001a20:	50040000 	.word	0x50040000
 8001a24:	04300002 	.word	0x04300002
 8001a28:	407f0000 	.word	0x407f0000

08001a2c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_RTC_Init+0x64>)
 8001a44:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a4e:	220f      	movs	r2, #15
 8001a50:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a58:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a72:	480a      	ldr	r0, [pc, #40]	; (8001a9c <MX_RTC_Init+0x60>)
 8001a74:	f004 f80c 	bl	8005a90 <HAL_RTC_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001a7e:	f000 f91e 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_RTC_Init+0x64>)
 8001a84:	f7ff fe80 	bl	8001788 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <MX_RTC_Init+0x64>)
 8001a8c:	f7ff fe8c 	bl	80017a8 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_RTC_Init+0x64>)
 8001a92:	f7ff fe6c 	bl	800176e <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000558 	.word	0x20000558
 8001aa0:	40002800 	.word	0x40002800

08001aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001aaa:	4a23      	ldr	r2, [pc, #140]	; (8001b38 <MX_USART1_UART_Init+0x94>)
 8001aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aae:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ace:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001aee:	f004 f913 	bl	8005d18 <HAL_UART_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af8:	f000 f8e1 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afc:	2100      	movs	r1, #0
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001b00:	f004 ff0a 	bl	8006918 <HAL_UARTEx_SetTxFifoThreshold>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b0a:	f000 f8d8 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4808      	ldr	r0, [pc, #32]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001b12:	f004 ff3f 	bl	8006994 <HAL_UARTEx_SetRxFifoThreshold>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b1c:	f000 f8cf 	bl	8001cbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_USART1_UART_Init+0x90>)
 8001b22:	f004 fec0 	bl	80068a6 <HAL_UARTEx_DisableFifoMode>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b2c:	f000 f8c7 	bl	8001cbe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200004cc 	.word	0x200004cc
 8001b38:	40013800 	.word	0x40013800

08001b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b40:	2004      	movs	r0, #4
 8001b42:	f7ff fd67 	bl	8001614 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b46:	2001      	movs	r0, #1
 8001b48:	f7ff fd64 	bl	8001614 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	200b      	movs	r0, #11
 8001b52:	f001 fd78 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b56:	200b      	movs	r0, #11
 8001b58:	f001 fd8f 	bl	800367a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	200c      	movs	r0, #12
 8001b62:	f001 fd70 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b66:	200c      	movs	r0, #12
 8001b68:	f001 fd87 	bl	800367a <HAL_NVIC_EnableIRQ>

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b84:	2004      	movs	r0, #4
 8001b86:	f7ff fd5e 	bl	8001646 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff fd5b 	bl	8001646 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fd58 	bl	8001646 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b96:	2008      	movs	r0, #8
 8001b98:	f7ff fd55 	bl	8001646 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_GREEN_Pin|LD_RED_Pin|LD_BLUE_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2123      	movs	r1, #35	; 0x23
 8001ba0:	4818      	ldr	r0, [pc, #96]	; (8001c04 <MX_GPIO_Init+0x94>)
 8001ba2:	f002 f939 	bl	8003e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_GPIO_Init+0x98>)
 8001bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4815      	ldr	r0, [pc, #84]	; (8001c0c <MX_GPIO_Init+0x9c>)
 8001bb8:	f001 ffbe 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_GREEN_Pin LD_RED_Pin LD_BLUE_Pin */
  GPIO_InitStruct.Pin = LD_GREEN_Pin|LD_RED_Pin|LD_BLUE_Pin;
 8001bbc:	2323      	movs	r3, #35	; 0x23
 8001bbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_GPIO_Init+0x94>)
 8001bd2:	f001 ffb1 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	480a      	ldr	r0, [pc, #40]	; (8001c10 <MX_GPIO_Init+0xa0>)
 8001be8:	f001 ffa6 	bl	8003b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f001 fd28 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bf6:	200a      	movs	r0, #10
 8001bf8:	f001 fd3f 	bl	800367a <HAL_NVIC_EnableIRQ>

}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	48000400 	.word	0x48000400
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	48000800 	.word	0x48000800
 8001c10:	48000c00 	.word	0x48000c00

08001c14 <Reset_Device>:

/* USER CODE BEGIN 4 */

static void Reset_Device( void )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001c18:	f000 f826 	bl	8001c68 <Reset_BackupDomain>

	Reset_IPCC();
 8001c1c:	f000 f802 	bl	8001c24 <Reset_IPCC>
#endif

	return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001c28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c2c:	f7ff fd24 	bl	8001678 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001c30:	213f      	movs	r1, #63	; 0x3f
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <Reset_IPCC+0x40>)
 8001c34:	f7ff fd7f 	bl	8001736 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001c38:	213f      	movs	r1, #63	; 0x3f
 8001c3a:	480a      	ldr	r0, [pc, #40]	; (8001c64 <Reset_IPCC+0x40>)
 8001c3c:	f7ff fd89 	bl	8001752 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001c40:	213f      	movs	r1, #63	; 0x3f
 8001c42:	4808      	ldr	r0, [pc, #32]	; (8001c64 <Reset_IPCC+0x40>)
 8001c44:	f7ff fd31 	bl	80016aa <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001c48:	213f      	movs	r1, #63	; 0x3f
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <Reset_IPCC+0x40>)
 8001c4c:	f7ff fd50 	bl	80016f0 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001c50:	213f      	movs	r1, #63	; 0x3f
 8001c52:	4804      	ldr	r0, [pc, #16]	; (8001c64 <Reset_IPCC+0x40>)
 8001c54:	f7ff fd3b 	bl	80016ce <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001c58:	213f      	movs	r1, #63	; 0x3f
 8001c5a:	4802      	ldr	r0, [pc, #8]	; (8001c64 <Reset_IPCC+0x40>)
 8001c5c:	f7ff fd5a 	bl	8001714 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001c60:	bf00      	nop
}
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	58000c00 	.word	0x58000c00

08001c68 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001c6c:	f7ff fcac 	bl	80015c8 <LL_RCC_IsActiveFlag_PINRST>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00d      	beq.n	8001c92 <Reset_BackupDomain+0x2a>
 8001c76:	f7ff fcba 	bl	80015ee <LL_RCC_IsActiveFlag_SFTRST>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d108      	bne.n	8001c92 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001c80:	f002 f91e 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001c84:	f002 f91c 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001c88:	f7ff fc7c 	bl	8001584 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001c8c:	f7ff fc8b 	bl	80015a6 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
}
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <Config_HSE>:

static void Config_HSE(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f007 f9cd 	bl	800903c <OTP_Read>
 8001ca2:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	799b      	ldrb	r3, [r3, #6]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fc34 	bl	800151c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
}
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc2:	b672      	cpsid	i
}
 8001cc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <Error_Handler+0x8>

08001cc8 <LL_PWR_SetPowerMode>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <LL_PWR_SetPowerMode+0x24>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 0207 	bic.w	r2, r3, #7
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <LL_PWR_SetPowerMode+0x24>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	58000400 	.word	0x58000400

08001cf0 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <LL_PWR_ClearFlag_WU+0x14>)
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	58000400 	.word	0x58000400

08001d08 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1a:	d101      	bne.n	8001d20 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	58000400 	.word	0x58000400

08001d30 <LL_RCC_HSE_Enable>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_RCC_HSE_IsReady>:
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d60:	d101      	bne.n	8001d66 <LL_RCC_HSE_IsReady+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_RCC_HSE_IsReady+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_HSI_Enable>:
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_HSI_IsReady>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d101      	bne.n	8001da8 <LL_RCC_HSI_IsReady+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_RCC_HSI_IsReady+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_SetSysClkSource>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_GetSysClkSource>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_RCC_SetSMPSClockSource>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f023 0203 	bic.w	r2, r3, #3
 8001e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <LL_LPM_EnableSleep+0x1c>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <LL_LPM_EnableSleep+0x1c>)
 8001e26:	f023 0304 	bic.w	r3, r3, #4
 8001e2a:	6113      	str	r3, [r2, #16]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6113      	str	r3, [r2, #16]
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	3220      	adds	r2, #32
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	4a05      	ldr	r2, [pc, #20]	; (8001e88 <LL_HSEM_1StepLock+0x2c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d001      	beq.n	8001e7a <LL_HSEM_1StepLock+0x1e>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <LL_HSEM_1StepLock+0x20>
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	80000400 	.word	0x80000400

08001e8c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0

	  /**
	   * The systick should be disabled for the same reason than when the device enters stop mode because
	   * at this time, the device may enter either OffMode or StopMode.
	   */
	  HAL_SuspendTick();
 8001eb6:	f000 fbc5 	bl	8002644 <HAL_SuspendTick>
	   * in critical section. If an interrupt occurs while in that critical section before that point,
	   * the flag is set and will be cleared here but the system will not enter Off Mode
	   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
	   * of this critical section
	   */
	  LL_PWR_ClearFlag_WU( );
 8001eba:	f7ff ff19 	bl	8001cf0 <LL_PWR_ClearFlag_WU>

	  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8001ebe:	2003      	movs	r0, #3
 8001ec0:	f7ff ff02 	bl	8001cc8 <LL_PWR_SetPowerMode>

	  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ec4:	f7ff ffba 	bl	8001e3c <LL_LPM_EnableDeepSleep>
	   */
	#if defined ( __CC_ARM)
	  __force_stores( );
	#endif

	  __WFI( );
 8001ec8:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */
	  HAL_ResumeTick();
 8001ed2:	f000 fbc7 	bl	8002664 <HAL_ResumeTick>
/* USER CODE END PWR_ExitOffMode */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	   *
	   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
	   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
	   * stop mode ( this will abort the Stop Mode entry ).
	   */
	  HAL_SuspendTick();
 8001ee0:	f000 fbb0 	bl	8002644 <HAL_SuspendTick>

	  /**
	   * This function is called from CRITICAL SECTION
	   */
	  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001ee4:	bf00      	nop
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4814      	ldr	r0, [pc, #80]	; (8001f3c <PWR_EnterStopMode+0x60>)
 8001eea:	f7ff ffb7 	bl	8001e5c <LL_HSEM_1StepLock>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f8      	bne.n	8001ee6 <PWR_EnterStopMode+0xa>

	  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4811      	ldr	r0, [pc, #68]	; (8001f3c <PWR_EnterStopMode+0x60>)
 8001ef8:	f7ff ffb0 	bl	8001e5c <LL_HSEM_1StepLock>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <PWR_EnterStopMode+0x40>
	  {
	    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8001f02:	f7ff ff01 	bl	8001d08 <LL_PWR_IsActiveFlag_C2DS>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <PWR_EnterStopMode+0x44>
	    {
	      /* Release ENTRY_STOP_MODE semaphore */
	      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2104      	movs	r1, #4
 8001f10:	480a      	ldr	r0, [pc, #40]	; (8001f3c <PWR_EnterStopMode+0x60>)
 8001f12:	f7ff ffbb 	bl	8001e8c <LL_HSEM_ReleaseLock>

	      /**
	       * The switch on HSI before entering Stop Mode is required
	       */
	      Switch_On_HSI( );
 8001f16:	f000 f852 	bl	8001fbe <Switch_On_HSI>
 8001f1a:	e001      	b.n	8001f20 <PWR_EnterStopMode+0x44>
	  else
	  {
	    /**
	     * The switch on HSI before entering Stop Mode is required
	     */
	    Switch_On_HSI( );
 8001f1c:	f000 f84f 	bl	8001fbe <Switch_On_HSI>
	  }

	  /* Release RCC semaphore */
	  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001f20:	2200      	movs	r2, #0
 8001f22:	2103      	movs	r1, #3
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <PWR_EnterStopMode+0x60>)
 8001f26:	f7ff ffb1 	bl	8001e8c <LL_HSEM_ReleaseLock>

	  /************************************************************************************
	   * ENTER STOP MODE
	   ***********************************************************************************/
	  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f7ff fecc 	bl	8001cc8 <LL_PWR_SetPowerMode>

	  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001f30:	f7ff ff84 	bl	8001e3c <LL_LPM_EnableDeepSleep>
	   */
	#if defined ( __CC_ARM)
	  __force_stores( );
	#endif

	  __WFI();
 8001f34:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	58001400 	.word	0x58001400

08001f40 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	  /**
	   * This function is called from CRITICAL SECTION
	   */

	  /* Release ENTRY_STOP_MODE semaphore */
	  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001f44:	2200      	movs	r2, #0
 8001f46:	2104      	movs	r1, #4
 8001f48:	4814      	ldr	r0, [pc, #80]	; (8001f9c <PWR_ExitStopMode+0x5c>)
 8001f4a:	f7ff ff9f 	bl	8001e8c <LL_HSEM_ReleaseLock>

	  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001f4e:	bf00      	nop
 8001f50:	2103      	movs	r1, #3
 8001f52:	4812      	ldr	r0, [pc, #72]	; (8001f9c <PWR_ExitStopMode+0x5c>)
 8001f54:	f7ff ff82 	bl	8001e5c <LL_HSEM_1StepLock>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f8      	bne.n	8001f50 <PWR_ExitStopMode+0x10>

	  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f5e:	f7ff ff3d 	bl	8001ddc <LL_RCC_GetSysClkSource>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d110      	bne.n	8001f8a <PWR_ExitStopMode+0x4a>
	  {
	    LL_RCC_HSE_Enable( );
 8001f68:	f7ff fee2 	bl	8001d30 <LL_RCC_HSE_Enable>
	    while(!LL_RCC_HSE_IsReady( ));
 8001f6c:	bf00      	nop
 8001f6e:	f7ff feee 	bl	8001d4e <LL_RCC_HSE_IsReady>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0fa      	beq.n	8001f6e <PWR_ExitStopMode+0x2e>
	    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001f78:	2002      	movs	r0, #2
 8001f7a:	f7ff ff1b 	bl	8001db4 <LL_RCC_SetSysClkSource>
	    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001f7e:	bf00      	nop
 8001f80:	f7ff ff2c 	bl	8001ddc <LL_RCC_GetSysClkSource>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d1fa      	bne.n	8001f80 <PWR_ExitStopMode+0x40>
	     * there is nothing to do here
	     */
	  }

	  /* Release RCC semaphore */
	  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	4803      	ldr	r0, [pc, #12]	; (8001f9c <PWR_ExitStopMode+0x5c>)
 8001f90:	f7ff ff7c 	bl	8001e8c <LL_HSEM_ReleaseLock>

	  HAL_ResumeTick();
 8001f94:	f000 fb66 	bl	8002664 <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	58001400 	.word	0x58001400

08001fa0 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

	  HAL_SuspendTick();
 8001fa4:	f000 fb4e 	bl	8002644 <HAL_SuspendTick>

	  /************************************************************************************
	   * ENTER SLEEP MODE
	   ***********************************************************************************/
	  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001fa8:	f7ff ff38 	bl	8001e1c <LL_LPM_EnableSleep>
	   */
	#if defined ( __CC_ARM)
	  __force_stores();
	#endif

	  __WFI( );
 8001fac:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */
	  HAL_ResumeTick();
 8001fb6:	f000 fb55 	bl	8002664 <HAL_ResumeTick>
/* USER CODE END PWR_ExitSleepMode */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8001fc2:	f7ff fed6 	bl	8001d72 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8001fc6:	bf00      	nop
 8001fc8:	f7ff fee2 	bl	8001d90 <LL_RCC_HSI_IsReady>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0fa      	beq.n	8001fc8 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7ff feee 	bl	8001db4 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ff0b 	bl	8001df4 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001fde:	bf00      	nop
 8001fe0:	f7ff fefc 	bl	8001ddc <LL_RCC_GetSysClkSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d1fa      	bne.n	8001fe0 <Switch_On_HSI+0x22>
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <LL_RCC_SetRTCClockSource>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_RCC_EnableRTC>:
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_AHB2_GRP1_EnableClock>:
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800204c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4313      	orrs	r3, r2
 8002054:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_AHB3_GRP1_EnableClock>:
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4313      	orrs	r3, r2
 8002086:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4013      	ands	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_APB1_GRP1_EnableClock>:
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_APB2_GRP1_EnableClock>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f8:	68fb      	ldr	r3, [r7, #12]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800210a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800210e:	f7ff ffaf 	bl	8002070 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	202e      	movs	r0, #46	; 0x2e
 8002118:	f001 fa95 	bl	8003646 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800211c:	202e      	movs	r0, #46	; 0x2e
 800211e:	f001 faac 	bl	800367a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_ADC_MspInit+0x70>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d122      	bne.n	8002190 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800214a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800214e:	f7ff ff76 	bl	800203e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	2004      	movs	r0, #4
 8002154:	f7ff ff73 	bl	800203e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002158:	2001      	movs	r0, #1
 800215a:	f7ff ff70 	bl	800203e <LL_AHB2_GRP1_EnableClock>
    PC3     ------> ADC1_IN4
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = VAP_Pin|VAN_Pin|IAP_Pin|IAN_Pin;
 800215e:	230f      	movs	r3, #15
 8002160:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002162:	2303      	movs	r3, #3
 8002164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	f107 030c 	add.w	r3, r7, #12
 800216e:	4619      	mov	r1, r3
 8002170:	480a      	ldr	r0, [pc, #40]	; (800219c <HAL_ADC_MspInit+0x74>)
 8002172:	f001 fce1 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IGP_Pin|IGN_Pin|Temp_Pin;
 8002176:	2307      	movs	r3, #7
 8002178:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217a:	2303      	movs	r3, #3
 800217c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	4619      	mov	r1, r3
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	f001 fcd4 	bl	8003b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	50040000 	.word	0x50040000
 800219c:	48000800 	.word	0x48000800

080021a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_RTC_MspInit+0x3c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d110      	bne.n	80021d4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
	  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021b2:	f001 fe85 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

	  /**
	  *  Write twice the value to flush the APB-AHB bridge
	  *  This bit shall be written in the register before writing the next one
	  */
	  HAL_PWR_EnableBkUpAccess();
 80021b6:	f001 fe83 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

	  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80021ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021be:	f7ff ff17 	bl	8001ff0 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021c2:	f7ff ff2b 	bl	800201c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ca:	f7ff ff6a 	bl	80020a2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
    HAL_RTCEx_EnableBypassShadow(hrtc);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f003 fd4c 	bl	8005c6c <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40002800 	.word	0x40002800

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3b      	ldr	r2, [pc, #236]	; (80022ec <HAL_UART_MspInit+0x10c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d170      	bne.n	80022e4 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002202:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002206:	f7ff ff65 	bl	80020d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2002      	movs	r0, #2
 800220c:	f7ff ff17 	bl	800203e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002210:	23c0      	movs	r3, #192	; 0xc0
 8002212:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002220:	2307      	movs	r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	4619      	mov	r1, r3
 800222a:	4831      	ldr	r0, [pc, #196]	; (80022f0 <HAL_UART_MspInit+0x110>)
 800222c:	f001 fc84 	bl	8003b38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002230:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002232:	4a31      	ldr	r2, [pc, #196]	; (80022f8 <HAL_UART_MspInit+0x118>)
 8002234:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002236:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002238:	220e      	movs	r2, #14
 800223a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_UART_MspInit+0x114>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_UART_MspInit+0x114>)
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002256:	2200      	movs	r2, #0
 8002258:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_UART_MspInit+0x114>)
 800225c:	2200      	movs	r2, #0
 800225e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002266:	4823      	ldr	r0, [pc, #140]	; (80022f4 <HAL_UART_MspInit+0x114>)
 8002268:	f001 fa4c 	bl	8003704 <HAL_DMA_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002272:	f7ff fd24 	bl	8001cbe <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1e      	ldr	r2, [pc, #120]	; (80022f4 <HAL_UART_MspInit+0x114>)
 800227a:	679a      	str	r2, [r3, #120]	; 0x78
 800227c:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <HAL_UART_MspInit+0x114>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_UART_MspInit+0x11c>)
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_UART_MspInit+0x120>)
 8002286:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002288:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_UART_MspInit+0x11c>)
 800228a:	220f      	movs	r2, #15
 800228c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_UART_MspInit+0x11c>)
 8002290:	2210      	movs	r2, #16
 8002292:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_UART_MspInit+0x11c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_UART_MspInit+0x11c>)
 800229c:	2280      	movs	r2, #128	; 0x80
 800229e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022b2:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022b8:	4810      	ldr	r0, [pc, #64]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022ba:	f001 fa23 	bl	8003704 <HAL_DMA_Init>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80022c4:	f7ff fcfb 	bl	8001cbe <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022cc:	675a      	str	r2, [r3, #116]	; 0x74
 80022ce:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_UART_MspInit+0x11c>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2024      	movs	r0, #36	; 0x24
 80022da:	f001 f9b4 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022de:	2024      	movs	r0, #36	; 0x24
 80022e0:	f001 f9cb 	bl	800367a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40013800 	.word	0x40013800
 80022f0:	48000400 	.word	0x48000400
 80022f4:	2000046c 	.word	0x2000046c
 80022f8:	40020008 	.word	0x40020008
 80022fc:	200003a8 	.word	0x200003a8
 8002300:	4002001c 	.word	0x4002001c

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f948 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002364:	2010      	movs	r0, #16
 8002366:	f001 fd6f 	bl	8003e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA1_Channel1_IRQHandler+0x10>)
 8002376:	f001 facc 	bl	8003912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000046c 	.word	0x2000046c

08002384 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel2_IRQHandler+0x10>)
 800238a:	f001 fac2 	bl	8003912 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003a8 	.word	0x200003a8

08002398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <USART1_IRQHandler+0x10>)
 800239e:	f003 fd0b 	bl	8005db8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200004cc 	.word	0x200004cc

080023ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80023b0:	f001 fd62 	bl	8003e78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <RTC_WKUP_IRQHandler>:
{

}

void RTC_WKUP_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80023bc:	f7fe fdd2 	bl	8000f64 <HW_TS_RTC_Wakeup_Handler>
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 80023c8:	f008 ff96 	bl	800b2f8 <HW_IPCC_Tx_Handler>

  return;
 80023cc:	bf00      	nop
}
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 80023d4:	f008 ff58 	bl	800b288 <HW_IPCC_Rx_Handler>
  return;
 80023d8:	bf00      	nop
}
 80023da:	bd80      	pop	{r7, pc}

080023dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <SystemInit+0xa0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <SystemInit+0xa0>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <SystemInit+0xa0>)
 80023ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800240e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241a:	4b19      	ldr	r3, [pc, #100]	; (8002480 <SystemInit+0xa4>)
 800241c:	4013      	ands	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242c:	f023 0305 	bic.w	r3, r3, #5
 8002430:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <SystemInit+0xa8>)
 800244e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <SystemInit+0xa8>)
 8002456:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246c:	2200      	movs	r2, #0
 800246e:	619a      	str	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	e000ed00 	.word	0xe000ed00
 8002480:	faf6fefb 	.word	0xfaf6fefb
 8002484:	22041000 	.word	0x22041000

08002488 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002488:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248c:	3304      	adds	r3, #4

0800248e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002490:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002492:	d3f9      	bcc.n	8002488 <CopyDataInit>
  bx lr
 8002494:	4770      	bx	lr

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002496:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002498:	3004      	adds	r0, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800249a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>
  bx lr
 800249e:	4770      	bx	lr

080024a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024a0:	480c      	ldr	r0, [pc, #48]	; (80024d4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80024a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024a4:	f7ff ff9a 	bl	80023dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80024a8:	480b      	ldr	r0, [pc, #44]	; (80024d8 <LoopForever+0x8>)
 80024aa:	490c      	ldr	r1, [pc, #48]	; (80024dc <LoopForever+0xc>)
 80024ac:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <LoopForever+0x10>)
 80024ae:	2300      	movs	r3, #0
 80024b0:	f7ff ffed 	bl	800248e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80024b4:	480b      	ldr	r0, [pc, #44]	; (80024e4 <LoopForever+0x14>)
 80024b6:	490c      	ldr	r1, [pc, #48]	; (80024e8 <LoopForever+0x18>)
 80024b8:	2300      	movs	r3, #0
 80024ba:	f7ff ffee 	bl	800249a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <LoopForever+0x1c>)
 80024c0:	490b      	ldr	r1, [pc, #44]	; (80024f0 <LoopForever+0x20>)
 80024c2:	2300      	movs	r3, #0
 80024c4:	f7ff ffe9 	bl	800249a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024c8:	f009 fac6 	bl	800ba58 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80024cc:	f7ff f980 	bl	80017d0 <main>

080024d0 <LoopForever>:

LoopForever:
  b LoopForever
 80024d0:	e7fe      	b.n	80024d0 <LoopForever>
 80024d2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80024d4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80024d8:	20000004 	.word	0x20000004
 80024dc:	20000030 	.word	0x20000030
 80024e0:	0800bd9c 	.word	0x0800bd9c
  INIT_BSS _sbss, _ebss
 80024e4:	20000260 	.word	0x20000260
 80024e8:	200005bc 	.word	0x200005bc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80024ec:	200301e0 	.word	0x200301e0
 80024f0:	20030a57 	.word	0x20030a57

080024f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC1_IRQHandler>
	...

080024f8 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6053      	str	r3, [r2, #4]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e0042000 	.word	0xe0042000

08002518 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	6053      	str	r3, [r2, #4]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e0042000 	.word	0xe0042000

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_Init+0x3c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a0b      	ldr	r2, [pc, #44]	; (8002574 <HAL_Init+0x3c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254e:	2003      	movs	r0, #3
 8002550:	f001 f86e 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002554:	2000      	movs	r0, #0
 8002556:	f000 f80f 	bl	8002578 <HAL_InitTick>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	71fb      	strb	r3, [r7, #7]
 8002564:	e001      	b.n	800256a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002566:	f7ff fdce 	bl	8002106 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800256a:	79fb      	ldrb	r3, [r7, #7]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58004000 	.word	0x58004000

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_InitTick+0x6c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d024      	beq.n	80025d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800258c:	f002 fd64 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <HAL_InitTick+0x6c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259c:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 f884 	bl	80036b2 <HAL_SYSTICK_Config>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10f      	bne.n	80025d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	d809      	bhi.n	80025ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b6:	2200      	movs	r2, #0
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	f04f 30ff 	mov.w	r0, #4294967295
 80025be:	f001 f842 	bl	8003646 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_InitTick+0x70>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e007      	b.n	80025da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e004      	b.n	80025da <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	20000008 	.word	0x20000008

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c
 8002610:	2000057c 	.word	0x2000057c

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000057c 	.word	0x2000057c

0800262c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_GetTickPrio+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_SuspendTick+0x1c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_SuspendTick+0x1c>)
 800264e:	f023 0302 	bic.w	r3, r3, #2
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e010 	.word	0xe000e010

08002664 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_ResumeTick+0x1c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a04      	ldr	r2, [pc, #16]	; (8002680 <HAL_ResumeTick+0x1c>)
 800266e:	f043 0302 	orr.w	r3, r3, #2
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e010 	.word	0xe000e010

08002684 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002688:	f7ff ff36 	bl	80024f8 <LL_DBGMCU_EnableDBGSleepMode>
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002694:	f7ff ff40 	bl	8002518 <LL_DBGMCU_EnableDBGStopMode>
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}

0800269c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
#endif
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3360      	adds	r3, #96	; 0x60
 8002716:	461a      	mov	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <LL_ADC_SetOffset+0x44>)
 8002726:	4013      	ands	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	4313      	orrs	r3, r2
 8002734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	03fff000 	.word	0x03fff000

0800274c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3360      	adds	r3, #96	; 0x60
 800275a:	461a      	mov	r2, r3
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	3360      	adds	r3, #96	; 0x60
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	431a      	orrs	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3330      	adds	r3, #48	; 0x30
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	4413      	add	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	211f      	movs	r1, #31
 80027da:	fa01 f303 	lsl.w	r3, r1, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	401a      	ands	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	0e9b      	lsrs	r3, r3, #26
 80027e6:	f003 011f 	and.w	r1, r3, #31
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f003 031f 	and.w	r3, r3, #31
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	431a      	orrs	r2, r3
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002806:	b480      	push	{r7}
 8002808:	b087      	sub	sp, #28
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3314      	adds	r3, #20
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	0e5b      	lsrs	r3, r3, #25
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	4413      	add	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0d1b      	lsrs	r3, r3, #20
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2107      	movs	r1, #7
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	401a      	ands	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	0d1b      	lsrs	r3, r3, #20
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	431a      	orrs	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002874:	43db      	mvns	r3, r3
 8002876:	401a      	ands	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0318 	and.w	r3, r3, #24
 800287e:	4908      	ldr	r1, [pc, #32]	; (80028a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002880:	40d9      	lsrs	r1, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	400b      	ands	r3, r1
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	0007ffff 	.word	0x0007ffff

080028a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80028b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6093      	str	r3, [r2, #8]
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028dc:	d101      	bne.n	80028e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800292c:	d101      	bne.n	8002932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <LL_ADC_IsEnabled+0x18>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <LL_ADC_IsEnabled+0x1a>
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d101      	bne.n	800297e <LL_ADC_REG_IsConversionOngoing+0x18>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d101      	bne.n	80029a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029bc:	2300      	movs	r3, #0
 80029be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e12c      	b.n	8002c2c <HAL_ADC_Init+0x278>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff fba1 	bl	8002128 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff65 	bl	80028c8 <LL_ADC_IsDeepPowerDownEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff4b 	bl	80028a4 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff80 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff64 	bl	80028f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a28:	4b82      	ldr	r3, [pc, #520]	; (8002c34 <HAL_ADC_Init+0x280>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	099b      	lsrs	r3, r3, #6
 8002a2e:	4a82      	ldr	r2, [pc, #520]	; (8002c38 <HAL_ADC_Init+0x284>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ff64 	bl	8002918 <LL_ADC_IsInternalRegulatorEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff75 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002a7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f040 80c7 	bne.w	8002c1a <HAL_ADC_Init+0x266>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80c3 	bne.w	8002c1a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a9c:	f043 0202 	orr.w	r2, r3, #2
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff49 	bl	8002940 <LL_ADC_IsEnabled>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab4:	4861      	ldr	r0, [pc, #388]	; (8002c3c <HAL_ADC_Init+0x288>)
 8002ab6:	f7ff ff43 	bl	8002940 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	485e      	ldr	r0, [pc, #376]	; (8002c40 <HAL_ADC_Init+0x28c>)
 8002ac8:	f7ff fde8 	bl	800269c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e5b      	ldrb	r3, [r3, #25]
 8002ad0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ad6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002adc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002ae2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aea:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002aec:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_Init+0x158>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	3b01      	subs	r3, #1
 8002b04:	045b      	lsls	r3, r3, #17
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d009      	beq.n	8002b28 <HAL_ADC_Init+0x174>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4b45      	ldr	r3, [pc, #276]	; (8002c44 <HAL_ADC_Init+0x290>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff10 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002b46:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff1d 	bl	800298c <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d13d      	bne.n	8002bd6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13a      	bne.n	8002bd6 <HAL_ADC_Init+0x222>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b64:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b6c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	69b9      	ldr	r1, [r7, #24]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d118      	bne.n	8002bc6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f023 010f 	bic.w	r1, r3, #15
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf6:	e007      	b.n	8002c08 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 020f 	bic.w	r2, r2, #15
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f023 0303 	bic.w	r3, r3, #3
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
 8002c18:	e007      	b.n	8002c2a <HAL_ADC_Init+0x276>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000004 	.word	0x20000004
 8002c38:	053e2d63 	.word	0x053e2d63
 8002c3c:	50040000 	.word	0x50040000
 8002c40:	50040300 	.word	0x50040300
 8002c44:	fff0c007 	.word	0xfff0c007

08002c48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0b6      	sub	sp, #216	; 0xd8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x22>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e39e      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x760>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe75 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8383 	bne.w	800338a <HAL_ADC_ConfigChannel+0x742>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f7ff fd8c 	bl	80027ae <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fe63 	bl	8002966 <LL_ADC_REG_IsConversionOngoing>
 8002ca0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fe6f 	bl	800298c <LL_ADC_INJ_IsConversionOngoing>
 8002cae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 81a6 	bne.w	8003008 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 81a1 	bne.w	8003008 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7ff fd97 	bl	8002806 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	08db      	lsrs	r3, r3, #3
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d00a      	beq.n	8002d10 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d0a:	f7ff fcfb 	bl	8002704 <LL_ADC_SetOffset>
 8002d0e:	e17b      	b.n	8003008 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd18 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0xf4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fd0d 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	e01e      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x132>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fd02 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002d5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002d62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e004      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8002d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x14a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0e9b      	lsrs	r3, r3, #26
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	e018      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x17c>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002da6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002db6:	2320      	movs	r3, #32
 8002db8:	e004      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d106      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff fcd1 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fcb5 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x1ba>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fcaa 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	e01e      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1f8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fc9f 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e18:	fa93 f3a3 	rbit	r3, r3
 8002e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002e20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002e28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e004      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x210>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	e018      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x242>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e004      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d106      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fc6e 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fc52 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x280>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc47 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	f003 021f 	and.w	r2, r3, #31
 8002ec6:	e01e      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x2be>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fc3c 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e004      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x2d6>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	f003 031f 	and.w	r3, r3, #31
 8002f1c:	e016      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x304>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e004      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d106      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	2102      	movs	r1, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fc0d 	bl	8002778 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2103      	movs	r1, #3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fbf1 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x342>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2103      	movs	r1, #3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fbe6 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	e017      	b.n	8002fba <HAL_ADC_ConfigChannel+0x372>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2103      	movs	r1, #3
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fbdb 	bl	800274c <LL_ADC_GetOffsetChannel>
 8002f96:	4603      	mov	r3, r0
 8002f98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002fa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e003      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x38a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	0e9b      	lsrs	r3, r3, #26
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	e011      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x3ae>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e003      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2200      	movs	r2, #0
 8003000:	2103      	movs	r1, #3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fbb8 	bl	8002778 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fc97 	bl	8002940 <LL_ADC_IsEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 81c1 	bne.w	800339c <HAL_ADC_ConfigChannel+0x754>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	461a      	mov	r2, r3
 8003028:	f7ff fc18 	bl	800285c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a8e      	ldr	r2, [pc, #568]	; (800326c <HAL_ADC_ConfigChannel+0x624>)
 8003032:	4293      	cmp	r3, r2
 8003034:	f040 8130 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x418>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	3301      	adds	r3, #1
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b09      	cmp	r3, #9
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e019      	b.n	8003094 <HAL_ADC_ConfigChannel+0x44c>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003072:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 800307c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2b09      	cmp	r3, #9
 800308c:	bf94      	ite	ls
 800308e:	2301      	movls	r3, #1
 8003090:	2300      	movhi	r3, #0
 8003092:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003094:	2b00      	cmp	r3, #0
 8003096:	d079      	beq.n	800318c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d107      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x46c>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	069b      	lsls	r3, r3, #26
 80030ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	e015      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x498>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80030cc:	2320      	movs	r3, #32
 80030ce:	e003      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80030d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d109      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x4b8>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	3301      	adds	r3, #1
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	e017      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4e8>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800310e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003110:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e003      	b.n	8003124 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800311c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311e:	fab3 f383 	clz	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3301      	adds	r3, #1
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2101      	movs	r1, #1
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	ea42 0103 	orr.w	r1, r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x50e>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	051b      	lsls	r3, r3, #20
 8003154:	e018      	b.n	8003188 <HAL_ADC_ConfigChannel+0x540>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003188:	430b      	orrs	r3, r1
 800318a:	e080      	b.n	800328e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x560>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	3301      	adds	r3, #1
 80031a0:	069b      	lsls	r3, r3, #26
 80031a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a6:	e015      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x58c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e003      	b.n	80031cc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x5ac>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	e017      	b.n	8003224 <HAL_ADC_ConfigChannel+0x5dc>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	61fb      	str	r3, [r7, #28]
  return result;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800320c:	2320      	movs	r3, #32
 800320e:	e003      	b.n	8003218 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	fab3 f383 	clz	r3, r3
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2101      	movs	r1, #1
 8003220:	fa01 f303 	lsl.w	r3, r1, r3
 8003224:	ea42 0103 	orr.w	r1, r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x608>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	3301      	adds	r3, #1
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	3b1e      	subs	r3, #30
 8003248:	051b      	lsls	r3, r3, #20
 800324a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800324e:	e01d      	b.n	800328c <HAL_ADC_ConfigChannel+0x644>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	613b      	str	r3, [r7, #16]
  return result;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d103      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e005      	b.n	8003278 <HAL_ADC_ConfigChannel+0x630>
 800326c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	3b1e      	subs	r3, #30
 8003286:	051b      	lsls	r3, r3, #20
 8003288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800328c:	430b      	orrs	r3, r1
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	6892      	ldr	r2, [r2, #8]
 8003292:	4619      	mov	r1, r3
 8003294:	f7ff fab7 	bl	8002806 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_ADC_ConfigChannel+0x768>)
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d07b      	beq.n	800339c <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032a4:	4843      	ldr	r0, [pc, #268]	; (80033b4 <HAL_ADC_ConfigChannel+0x76c>)
 80032a6:	f7ff fa1f 	bl	80026e8 <LL_ADC_GetCommonPathInternalCh>
 80032aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032ae:	4842      	ldr	r0, [pc, #264]	; (80033b8 <HAL_ADC_ConfigChannel+0x770>)
 80032b0:	f7ff fb46 	bl	8002940 <LL_ADC_IsEnabled>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d15d      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x72e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3f      	ldr	r2, [pc, #252]	; (80033bc <HAL_ADC_ConfigChannel+0x774>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d126      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x6ca>
 80032c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d120      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x6ca>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a38      	ldr	r2, [pc, #224]	; (80033b8 <HAL_ADC_ConfigChannel+0x770>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d160      	bne.n	800339c <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80032da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e2:	4619      	mov	r1, r3
 80032e4:	4833      	ldr	r0, [pc, #204]	; (80033b4 <HAL_ADC_ConfigChannel+0x76c>)
 80032e6:	f7ff f9ec 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032ea:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_ADC_ConfigChannel+0x778>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	4a34      	ldr	r2, [pc, #208]	; (80033c4 <HAL_ADC_ConfigChannel+0x77c>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	099a      	lsrs	r2, r3, #6
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003302:	e002      	b.n	800330a <HAL_ADC_ConfigChannel+0x6c2>
              {
                wait_loop_index--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3b01      	subs	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x6bc>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003310:	e044      	b.n	800339c <HAL_ADC_ConfigChannel+0x754>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <HAL_ADC_ConfigChannel+0x780>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d113      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x6fc>
 800331c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10d      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x6fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_ADC_ConfigChannel+0x770>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d134      	bne.n	800339c <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	4619      	mov	r1, r3
 800333c:	481d      	ldr	r0, [pc, #116]	; (80033b4 <HAL_ADC_ConfigChannel+0x76c>)
 800333e:	f7ff f9c0 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003342:	e02b      	b.n	800339c <HAL_ADC_ConfigChannel+0x754>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <HAL_ADC_ConfigChannel+0x784>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d126      	bne.n	800339c <HAL_ADC_ConfigChannel+0x754>
 800334e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d120      	bne.n	800339c <HAL_ADC_ConfigChannel+0x754>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <HAL_ADC_ConfigChannel+0x770>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d11b      	bne.n	800339c <HAL_ADC_ConfigChannel+0x754>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800336c:	4619      	mov	r1, r3
 800336e:	4811      	ldr	r0, [pc, #68]	; (80033b4 <HAL_ADC_ConfigChannel+0x76c>)
 8003370:	f7ff f9a7 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
 8003374:	e012      	b.n	800339c <HAL_ADC_ConfigChannel+0x754>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003388:	e008      	b.n	800339c <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80033a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	37d8      	adds	r7, #216	; 0xd8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	80080000 	.word	0x80080000
 80033b4:	50040300 	.word	0x50040300
 80033b8:	50040000 	.word	0x50040000
 80033bc:	c7520000 	.word	0xc7520000
 80033c0:	20000004 	.word	0x20000004
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	cb840000 	.word	0xcb840000
 80033cc:	80000001 	.word	0x80000001

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <__NVIC_EnableIRQ+0x38>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	2b00      	cmp	r3, #0
 8003480:	db12      	blt.n	80034a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	490a      	ldr	r1, [pc, #40]	; (80034b4 <__NVIC_DisableIRQ+0x44>)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2001      	movs	r0, #1
 8003492:	fa00 f202 	lsl.w	r2, r0, r2
 8003496:	3320      	adds	r3, #32
 8003498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800349c:	f3bf 8f4f 	dsb	sy
}
 80034a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034a2:	f3bf 8f6f 	isb	sy
}
 80034a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	db0c      	blt.n	80034e4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4907      	ldr	r1, [pc, #28]	; (80034f0 <__NVIC_SetPendingIRQ+0x38>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2001      	movs	r0, #1
 80034da:	fa00 f202 	lsl.w	r2, r0, r2
 80034de:	3340      	adds	r3, #64	; 0x40
 80034e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100

080034f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	2b00      	cmp	r3, #0
 8003504:	db0c      	blt.n	8003520 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4907      	ldr	r1, [pc, #28]	; (800352c <__NVIC_ClearPendingIRQ+0x38>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2001      	movs	r0, #1
 8003516:	fa00 f202 	lsl.w	r2, r0, r2
 800351a:	3360      	adds	r3, #96	; 0x60
 800351c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	4603      	mov	r3, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	2b00      	cmp	r3, #0
 8003542:	db0a      	blt.n	800355a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2da      	uxtb	r2, r3
 8003548:	490c      	ldr	r1, [pc, #48]	; (800357c <__NVIC_SetPriority+0x4c>)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	0112      	lsls	r2, r2, #4
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	440b      	add	r3, r1
 8003554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003558:	e00a      	b.n	8003570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4908      	ldr	r1, [pc, #32]	; (8003580 <__NVIC_SetPriority+0x50>)
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	3b04      	subs	r3, #4
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	440b      	add	r3, r1
 800356e:	761a      	strb	r2, [r3, #24]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f1c3 0307 	rsb	r3, r3, #7
 800359e:	2b04      	cmp	r3, #4
 80035a0:	bf28      	it	cs
 80035a2:	2304      	movcs	r3, #4
 80035a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2b06      	cmp	r3, #6
 80035ac:	d902      	bls.n	80035b4 <NVIC_EncodePriority+0x30>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3b03      	subs	r3, #3
 80035b2:	e000      	b.n	80035b6 <NVIC_EncodePriority+0x32>
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b8:	f04f 32ff 	mov.w	r2, #4294967295
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	401a      	ands	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035cc:	f04f 31ff 	mov.w	r1, #4294967295
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43d9      	mvns	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	4313      	orrs	r3, r2
         );
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3724      	adds	r7, #36	; 0x24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff8e 	bl	8003530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fec9 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003654:	f7ff fee0 	bl	8003418 <__NVIC_GetPriorityGrouping>
 8003658:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	6978      	ldr	r0, [r7, #20]
 8003660:	f7ff ff90 	bl	8003584 <NVIC_EncodePriority>
 8003664:	4602      	mov	r2, r0
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff5f 	bl	8003530 <__NVIC_SetPriority>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fed3 	bl	8003434 <__NVIC_EnableIRQ>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fee3 	bl	8003470 <__NVIC_DisableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ff96 	bl	80035ec <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff feed 	bl	80034b8 <__NVIC_SetPendingIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fefd 	bl	80034f4 <__NVIC_ClearPendingIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
	...

08003704 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e08e      	b.n	8003834 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_DMA_Init+0x138>)
 800371e:	429a      	cmp	r2, r3
 8003720:	d80f      	bhi.n	8003742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_DMA_Init+0x13c>)
 800372a:	4413      	add	r3, r2
 800372c:	4a45      	ldr	r2, [pc, #276]	; (8003844 <HAL_DMA_Init+0x140>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	009a      	lsls	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a42      	ldr	r2, [pc, #264]	; (8003848 <HAL_DMA_Init+0x144>)
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
 8003740:	e00e      	b.n	8003760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	4b40      	ldr	r3, [pc, #256]	; (800384c <HAL_DMA_Init+0x148>)
 800374a:	4413      	add	r3, r2
 800374c:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <HAL_DMA_Init+0x140>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	009a      	lsls	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_DMA_Init+0x14c>)
 800375e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f95c 	bl	8003a70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c0:	d102      	bne.n	80037c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80037d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d010      	beq.n	800380a <HAL_DMA_Init+0x106>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d80c      	bhi.n	800380a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f97b 	bl	8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	e008      	b.n	800381c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40020407 	.word	0x40020407
 8003840:	bffdfff8 	.word	0xbffdfff8
 8003844:	cccccccd 	.word	0xcccccccd
 8003848:	40020000 	.word	0x40020000
 800384c:	bffdfbf8 	.word	0xbffdfbf8
 8003850:	40020400 	.word	0x40020400

08003854 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d005      	beq.n	8003878 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	73fb      	strb	r3, [r7, #15]
 8003876:	e047      	b.n	8003908 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 020e 	bic.w	r2, r2, #14
 8003886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0201 	bic.w	r2, r2, #1
 8003896:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f003 021c 	and.w	r2, r3, #28
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
    }
  }
  return status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 031c 	and.w	r3, r3, #28
 8003932:	2204      	movs	r2, #4
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d026      	beq.n	800398c <HAL_DMA_IRQHandler+0x7a>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0204 	bic.w	r2, r2, #4
 8003964:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 021c 	and.w	r2, r3, #28
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2104      	movs	r1, #4
 8003974:	fa01 f202 	lsl.w	r2, r1, r2
 8003978:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2b00      	cmp	r3, #0
 8003980:	d071      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800398a:	e06c      	b.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	f003 031c 	and.w	r3, r3, #28
 8003994:	2202      	movs	r2, #2
 8003996:	409a      	lsls	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d02e      	beq.n	80039fe <HAL_DMA_IRQHandler+0xec>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d029      	beq.n	80039fe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 020a 	bic.w	r2, r2, #10
 80039c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f003 021c 	and.w	r2, r3, #28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	2102      	movs	r1, #2
 80039de:	fa01 f202 	lsl.w	r2, r1, r2
 80039e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d038      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039fc:	e033      	b.n	8003a66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f003 031c 	and.w	r3, r3, #28
 8003a06:	2208      	movs	r2, #8
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d02a      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d025      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 020e 	bic.w	r2, r2, #14
 8003a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f003 021c 	and.w	r2, r3, #28
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
}
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d80a      	bhi.n	8003a9a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6493      	str	r3, [r2, #72]	; 0x48
 8003a98:	e007      	b.n	8003aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	009a      	lsls	r2, r3, #2
 8003aa2:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3b08      	subs	r3, #8
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ac0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40020407 	.word	0x40020407
 8003ae0:	4002081c 	.word	0x4002081c
 8003ae4:	cccccccd 	.word	0xcccccccd
 8003ae8:	40020880 	.word	0x40020880

08003aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003afc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	1000823f 	.word	0x1000823f
 8003b34:	40020940 	.word	0x40020940

08003b38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b46:	e14c      	b.n	8003de2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	fa01 f303 	lsl.w	r3, r1, r3
 8003b54:	4013      	ands	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 813e 	beq.w	8003ddc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d00b      	beq.n	8003b80 <HAL_GPIO_Init+0x48>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b74:	2b11      	cmp	r3, #17
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b12      	cmp	r3, #18
 8003b7e:	d130      	bne.n	8003be2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 0201 	and.w	r2, r3, #1
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	2203      	movs	r2, #3
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d003      	beq.n	8003c22 <HAL_GPIO_Init+0xea>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b12      	cmp	r3, #18
 8003c20:	d123      	bne.n	8003c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	08da      	lsrs	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3208      	adds	r2, #8
 8003c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	691a      	ldr	r2, [r3, #16]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	08da      	lsrs	r2, r3, #3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3208      	adds	r2, #8
 8003c64:	6939      	ldr	r1, [r7, #16]
 8003c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	2203      	movs	r2, #3
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0203 	and.w	r2, r3, #3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8098 	beq.w	8003ddc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cac:	4a54      	ldr	r2, [pc, #336]	; (8003e00 <HAL_GPIO_Init+0x2c8>)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cd6:	d019      	beq.n	8003d0c <HAL_GPIO_Init+0x1d4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a4a      	ldr	r2, [pc, #296]	; (8003e04 <HAL_GPIO_Init+0x2cc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_GPIO_Init+0x1d0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a49      	ldr	r2, [pc, #292]	; (8003e08 <HAL_GPIO_Init+0x2d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00d      	beq.n	8003d04 <HAL_GPIO_Init+0x1cc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a48      	ldr	r2, [pc, #288]	; (8003e0c <HAL_GPIO_Init+0x2d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d007      	beq.n	8003d00 <HAL_GPIO_Init+0x1c8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a47      	ldr	r2, [pc, #284]	; (8003e10 <HAL_GPIO_Init+0x2d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_GPIO_Init+0x1c4>
 8003cf8:	2304      	movs	r3, #4
 8003cfa:	e008      	b.n	8003d0e <HAL_GPIO_Init+0x1d6>
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	e006      	b.n	8003d0e <HAL_GPIO_Init+0x1d6>
 8003d00:	2303      	movs	r3, #3
 8003d02:	e004      	b.n	8003d0e <HAL_GPIO_Init+0x1d6>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e002      	b.n	8003d0e <HAL_GPIO_Init+0x1d6>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <HAL_GPIO_Init+0x1d6>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	f002 0203 	and.w	r2, r2, #3
 8003d14:	0092      	lsls	r2, r2, #2
 8003d16:	4093      	lsls	r3, r2
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d1e:	4938      	ldr	r1, [pc, #224]	; (8003e00 <HAL_GPIO_Init+0x2c8>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	089b      	lsrs	r3, r3, #2
 8003d24:	3302      	adds	r3, #2
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d2c:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d80:	4a24      	ldr	r2, [pc, #144]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd6:	4a0f      	ldr	r2, [pc, #60]	; (8003e14 <HAL_GPIO_Init+0x2dc>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3301      	adds	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f aeab 	bne.w	8003b48 <HAL_GPIO_Init+0x10>
  }
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000
 8003e04:	48000400 	.word	0x48000400
 8003e08:	48000800 	.word	0x48000800
 8003e0c:	48000c00 	.word	0x48000c00
 8003e10:	48001000 	.word	0x48001000
 8003e14:	58000800 	.word	0x58000800

08003e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	807b      	strh	r3, [r7, #2]
 8003e24:	4613      	mov	r3, r2
 8003e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e28:	787b      	ldrb	r3, [r7, #1]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e36:	887a      	ldrh	r2, [r7, #2]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e5e:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fc fd09 	bl	800087e <HAL_GPIO_EXTI_Callback>
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	58000800 	.word	0x58000800

08003e78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ea8 <HAL_HSEM_IRQHandler+0x30>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_HSEM_IRQHandler+0x30>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <HAL_HSEM_IRQHandler+0x30>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_HSEM_IRQHandler+0x30>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f807 	bl	8003eac <HAL_HSEM_FreeCallback>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	58001500 	.word	0x58001500

08003eac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	58000400 	.word	0x58000400

08003ee0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	58000400 	.word	0x58000400

08003efc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0e:	d101      	bne.n	8003f14 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_RCC_HSE_Enable>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_HSE_Disable>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_HSE_IsReady>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6e:	d101      	bne.n	8003f74 <LL_RCC_HSE_IsReady+0x18>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <LL_RCC_HSE_IsReady+0x1a>
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_HSI_Enable>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f92:	6013      	str	r3, [r2, #0]
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_RCC_HSI_Disable>:
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_HSI_IsReady>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d101      	bne.n	8003fd4 <LL_RCC_HSI_IsReady+0x18>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <LL_RCC_HSI_IsReady+0x1a>
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_RCC_HSI48_Enable>:
{
 800400a:	b480      	push	{r7}
 800400c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_RCC_HSI48_Disable>:
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004034:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_RCC_HSI48_IsReady>:
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d101      	bne.n	8004066 <LL_RCC_HSI48_IsReady+0x18>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <LL_RCC_HSI48_IsReady+0x1a>
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_LSE_Enable>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_LSE_Disable>:
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_LSE_EnableBypass>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_LSE_DisableBypass>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e8:	f023 0304 	bic.w	r3, r3, #4
 80040ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040f0:	bf00      	nop
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_LSE_IsReady>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d101      	bne.n	8004112 <LL_RCC_LSE_IsReady+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_RCC_LSE_IsReady+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <LL_RCC_LSI1_Enable>:
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004136:	bf00      	nop
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_RCC_LSI1_Disable>:
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_LSI1_IsReady>:
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d101      	bne.n	800417a <LL_RCC_LSI1_IsReady+0x18>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <LL_RCC_LSI1_IsReady+0x1a>
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_LSI2_Enable>:
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004196:	f043 0304 	orr.w	r3, r3, #4
 800419a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_RCC_LSI2_Disable>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80041c0:	bf00      	nop
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_LSI2_IsReady>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d101      	bne.n	80041e2 <LL_RCC_LSI2_IsReady+0x18>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <LL_RCC_LSI2_IsReady+0x1a>
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_RCC_LSI2_SetTrimming>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <LL_RCC_MSI_Enable>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_MSI_Disable>:
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_MSI_IsReady>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d101      	bne.n	800426e <LL_RCC_MSI_IsReady+0x16>
 800426a:	2301      	movs	r3, #1
 800426c:	e000      	b.n	8004270 <LL_RCC_MSI_IsReady+0x18>
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <LL_RCC_MSI_SetRange>:
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <LL_RCC_MSI_GetRange>:
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2bb0      	cmp	r3, #176	; 0xb0
 80042b8:	d901      	bls.n	80042be <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80042ba:	23b0      	movs	r3, #176	; 0xb0
 80042bc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80042be:	687b      	ldr	r3, [r7, #4]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_MSI_SetCalibTrimming>:
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_SetSysClkSource>:
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_GetSysClkSource>:
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <LL_RCC_SetAHBPrescaler>:
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_C2_RCC_SetAHBPrescaler>:
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800436e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <LL_RCC_SetAHB4Prescaler>:
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004396:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800439a:	f023 020f 	bic.w	r2, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_SetAPB1Prescaler>:
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80043c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	608b      	str	r3, [r1, #8]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_RCC_SetAPB2Prescaler>:
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_GetAHBPrescaler>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004416:	4618      	mov	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_RCC_GetAHB4Prescaler>:
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004428:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004432:	4618      	mov	r0, r3
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_RCC_GetAPB1Prescaler>:
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_GetAPB2Prescaler>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004462:	4618      	mov	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_RCC_PLL_Enable>:
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]
}
 8004480:	bf00      	nop
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_RCC_PLL_Disable>:
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_RCC_PLL_IsReady>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ba:	d101      	bne.n	80044c0 <LL_RCC_PLL_IsReady+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_RCC_PLL_IsReady+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_RCC_PLL_GetN>:
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	0a1b      	lsrs	r3, r3, #8
 80044d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_RCC_PLL_GetR>:
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80044ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_PLL_GetDivider>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <LL_RCC_PLL_GetMainSource>:
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_IsActiveFlag_HPRE>:
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004540:	d101      	bne.n	8004546 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004566:	d101      	bne.n	800456c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d101      	bne.n	8004592 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045b0:	d101      	bne.n	80045b6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045d4:	d101      	bne.n	80045da <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08d      	sub	sp, #52	; 0x34
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e37e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8092 	beq.w	800472c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004608:	f7ff fe89 	bl	800431e <LL_RCC_GetSysClkSource>
 800460c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800460e:	f7ff ff82 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004612:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x3e>
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	2b0c      	cmp	r3, #12
 800461e:	d14c      	bne.n	80046ba <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b01      	cmp	r3, #1
 8004624:	d149      	bne.n	80046ba <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004626:	f7ff fe17 	bl	8004258 <LL_RCC_MSI_IsReady>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_RCC_OscConfig+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e35d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004640:	f7ff fe2f 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8004644:	4603      	mov	r3, r0
 8004646:	429c      	cmp	r4, r3
 8004648:	d914      	bls.n	8004674 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fd42 	bl	80050d8 <RCC_SetFlashLatencyFromMSIRange>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e34c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fe09 	bl	800427a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fe2d 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>
 8004672:	e013      	b.n	800469c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fdfe 	bl	800427a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fe22 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	4618      	mov	r0, r3
 800468e:	f000 fd23 	bl	80050d8 <RCC_SetFlashLatencyFromMSIRange>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e32d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800469c:	f000 fcdc 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4ab3      	ldr	r2, [pc, #716]	; (8004970 <HAL_RCC_OscConfig+0x388>)
 80046a4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046a6:	4bb3      	ldr	r3, [pc, #716]	; (8004974 <HAL_RCC_OscConfig+0x38c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fd ff64 	bl	8002578 <HAL_InitTick>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d039      	beq.n	800472a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e31e      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d01e      	beq.n	8004700 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046c2:	f7ff fdab 	bl	800421c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046c6:	f7fd ffa5 	bl	8002614 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ce:	f7fd ffa1 	bl	8002614 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e30b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 80046e0:	f7ff fdba 	bl	8004258 <LL_RCC_MSI_IsReady>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f1      	beq.n	80046ce <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fdc3 	bl	800427a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fde7 	bl	80042cc <LL_RCC_MSI_SetCalibTrimming>
 80046fe:	e015      	b.n	800472c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004700:	f7ff fd9b 	bl	800423a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004704:	f7fd ff86 	bl	8002614 <HAL_GetTick>
 8004708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd ff82 	bl	8002614 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e2ec      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800471e:	f7ff fd9b 	bl	8004258 <LL_RCC_MSI_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x124>
 8004728:	e000      	b.n	800472c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800472a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d04e      	beq.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004738:	f7ff fdf1 	bl	800431e <LL_RCC_GetSysClkSource>
 800473c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800473e:	f7ff feea 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004742:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	2b08      	cmp	r3, #8
 8004748:	d005      	beq.n	8004756 <HAL_RCC_OscConfig+0x16e>
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	2b0c      	cmp	r3, #12
 800474e:	d10d      	bne.n	800476c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d10a      	bne.n	800476c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004756:	f7ff fc01 	bl	8003f5c <LL_RCC_HSE_IsReady>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d039      	beq.n	80047d4 <HAL_RCC_OscConfig+0x1ec>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d135      	bne.n	80047d4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e2c5      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004774:	d102      	bne.n	800477c <HAL_RCC_OscConfig+0x194>
 8004776:	f7ff fbd3 	bl	8003f20 <LL_RCC_HSE_Enable>
 800477a:	e001      	b.n	8004780 <HAL_RCC_OscConfig+0x198>
 800477c:	f7ff fbdf 	bl	8003f3e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd ff44 	bl	8002614 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fd ff40 	bl	8002614 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e2aa      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047a2:	f7ff fbdb 	bl	8003f5c <LL_RCC_HSE_IsReady>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f1      	beq.n	8004790 <HAL_RCC_OscConfig+0x1a8>
 80047ac:	e013      	b.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fd ff31 	bl	8002614 <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b6:	f7fd ff2d 	bl	8002614 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b64      	cmp	r3, #100	; 0x64
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e297      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 80047c8:	f7ff fbc8 	bl	8003f5c <LL_RCC_HSE_IsReady>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f1      	bne.n	80047b6 <HAL_RCC_OscConfig+0x1ce>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d051      	beq.n	8004886 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e2:	f7ff fd9c 	bl	800431e <LL_RCC_GetSysClkSource>
 80047e6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e8:	f7ff fe95 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 80047ec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_OscConfig+0x218>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d113      	bne.n	8004822 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d110      	bne.n	8004822 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004800:	f7ff fbdc 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x22e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e270      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fbe0 	bl	8003fe0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004820:	e031      	b.n	8004886 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d019      	beq.n	800485e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800482a:	f7ff fba9 	bl	8003f80 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482e:	f7fd fef1 	bl	8002614 <HAL_GetTick>
 8004832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004836:	f7fd feed 	bl	8002614 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e257      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004848:	f7ff fbb8 	bl	8003fbc <LL_RCC_HSI_IsReady>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f1      	beq.n	8004836 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fbc2 	bl	8003fe0 <LL_RCC_HSI_SetCalibTrimming>
 800485c:	e013      	b.n	8004886 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485e:	f7ff fb9e 	bl	8003f9e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004862:	f7fd fed7 	bl	8002614 <HAL_GetTick>
 8004866:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004868:	e008      	b.n	800487c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486a:	f7fd fed3 	bl	8002614 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e23d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800487c:	f7ff fb9e 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f1      	bne.n	800486a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80a3 	beq.w	80049e6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d076      	beq.n	8004996 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d046      	beq.n	8004942 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048b4:	f7ff fc55 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d113      	bne.n	80048e6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048be:	f7ff fc2e 	bl	800411e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048c2:	f7fd fea7 	bl	8002614 <HAL_GetTick>
 80048c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ca:	f7fd fea3 	bl	8002614 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e20d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048dc:	f7ff fc41 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f1      	beq.n	80048ca <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80048e6:	f7ff fc4e 	bl	8004186 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fd fe93 	bl	8002614 <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048f2:	f7fd fe8f 	bl	8002614 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e1f9      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004904:	f7ff fc61 	bl	80041ca <LL_RCC_LSI2_IsReady>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f1      	beq.n	80048f2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fc6b 	bl	80041ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004918:	f7ff fc12 	bl	8004140 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fd fe7a 	bl	8002614 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004924:	f7fd fe76 	bl	8002614 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1e0      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004936:	f7ff fc14 	bl	8004162 <LL_RCC_LSI1_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <HAL_RCC_OscConfig+0x33c>
 8004940:	e051      	b.n	80049e6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004942:	f7ff fbec 	bl	800411e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd fe65 	bl	8002614 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800494e:	f7fd fe61 	bl	8002614 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1cb      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004960:	f7ff fbff 	bl	8004162 <LL_RCC_LSI1_IsReady>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f1      	beq.n	800494e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800496a:	f7ff fc1d 	bl	80041a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800496e:	e00c      	b.n	800498a <HAL_RCC_OscConfig+0x3a2>
 8004970:	20000004 	.word	0x20000004
 8004974:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004978:	f7fd fe4c 	bl	8002614 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b03      	cmp	r3, #3
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e1b6      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800498a:	f7ff fc1e 	bl	80041ca <LL_RCC_LSI2_IsReady>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f1      	bne.n	8004978 <HAL_RCC_OscConfig+0x390>
 8004994:	e027      	b.n	80049e6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004996:	f7ff fc07 	bl	80041a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499a:	f7fd fe3b 	bl	8002614 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049a2:	f7fd fe37 	bl	8002614 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e1a1      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049b4:	f7ff fc09 	bl	80041ca <LL_RCC_LSI2_IsReady>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f1      	bne.n	80049a2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049be:	f7ff fbbf 	bl	8004140 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c2:	f7fd fe27 	bl	8002614 <HAL_GetTick>
 80049c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049c8:	e008      	b.n	80049dc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049ca:	f7fd fe23 	bl	8002614 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e18d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049dc:	f7ff fbc1 	bl	8004162 <LL_RCC_LSI1_IsReady>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f1      	bne.n	80049ca <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0304 	and.w	r3, r3, #4
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05b      	beq.n	8004aaa <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f2:	4bb5      	ldr	r3, [pc, #724]	; (8004cc8 <HAL_RCC_OscConfig+0x6e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d114      	bne.n	8004a28 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80049fe:	f7ff fa5f 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a02:	f7fd fe07 	bl	8002614 <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0a:	f7fd fe03 	bl	8002614 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e16d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1c:	4baa      	ldr	r3, [pc, #680]	; (8004cc8 <HAL_RCC_OscConfig+0x6e0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d102      	bne.n	8004a36 <HAL_RCC_OscConfig+0x44e>
 8004a30:	f7ff fb1f 	bl	8004072 <LL_RCC_LSE_Enable>
 8004a34:	e00c      	b.n	8004a50 <HAL_RCC_OscConfig+0x468>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b05      	cmp	r3, #5
 8004a3c:	d104      	bne.n	8004a48 <HAL_RCC_OscConfig+0x460>
 8004a3e:	f7ff fb3a 	bl	80040b6 <LL_RCC_LSE_EnableBypass>
 8004a42:	f7ff fb16 	bl	8004072 <LL_RCC_LSE_Enable>
 8004a46:	e003      	b.n	8004a50 <HAL_RCC_OscConfig+0x468>
 8004a48:	f7ff fb24 	bl	8004094 <LL_RCC_LSE_Disable>
 8004a4c:	f7ff fb44 	bl	80040d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d014      	beq.n	8004a82 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fddc 	bl	8002614 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd fdd8 	bl	8002614 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e140      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a76:	f7ff fb40 	bl	80040fa <LL_RCC_LSE_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ef      	beq.n	8004a60 <HAL_RCC_OscConfig+0x478>
 8004a80:	e013      	b.n	8004aaa <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd fdc7 	bl	8002614 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd fdc3 	bl	8002614 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e12b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004aa0:	f7ff fb2b 	bl	80040fa <LL_RCC_LSE_IsReady>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1ef      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02c      	beq.n	8004b10 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d014      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004abe:	f7ff faa4 	bl	800400a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac2:	f7fd fda7 	bl	8002614 <HAL_GetTick>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aca:	f7fd fda3 	bl	8002614 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e10d      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004adc:	f7ff fab7 	bl	800404e <LL_RCC_HSI48_IsReady>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f1      	beq.n	8004aca <HAL_RCC_OscConfig+0x4e2>
 8004ae6:	e013      	b.n	8004b10 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ae8:	f7ff faa0 	bl	800402c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aec:	f7fd fd92 	bl	8002614 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004af4:	f7fd fd8e 	bl	8002614 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0f8      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004b06:	f7ff faa2 	bl	800404e <LL_RCC_HSI48_IsReady>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80ee 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	f7ff fc00 	bl	800431e <LL_RCC_GetSysClkSource>
 8004b1e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f040 80af 	bne.w	8004c90 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f003 0203 	and.w	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d123      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d05d      	beq.n	8004c44 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d058      	beq.n	8004c40 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e0ab      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ba0:	f7ff fc73 	bl	800448a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba4:	f7fd fd36 	bl	8002614 <HAL_GetTick>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fd fd32 	bl	8002614 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e09c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1ef      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_OscConfig+0x6e4>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bde:	4311      	orrs	r1, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004be4:	0212      	lsls	r2, r2, #8
 8004be6:	4311      	orrs	r1, r2
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bec:	4311      	orrs	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bf2:	4311      	orrs	r1, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c02:	f7ff fc33 	bl	800446c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c16:	f7fd fcfd 	bl	8002614 <HAL_GetTick>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1e:	f7fd fcf9 	bl	8002614 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e063      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ef      	beq.n	8004c1e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c3e:	e05a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e059      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d151      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c52:	f7ff fc0b 	bl	800446c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c64:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c66:	f7fd fcd5 	bl	8002614 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fd fcd1 	bl	8002614 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e03b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0ef      	beq.n	8004c6e <HAL_RCC_OscConfig+0x686>
 8004c8e:	e032      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d02d      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	f7ff fbf8 	bl	800448a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8004caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cbc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fd fca9 	bl	8002614 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cc4:	e00d      	b.n	8004ce2 <HAL_RCC_OscConfig+0x6fa>
 8004cc6:	bf00      	nop
 8004cc8:	58000400 	.word	0x58000400
 8004ccc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd fca0 	bl	8002614 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ef      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x6e8>
 8004cf0:	e001      	b.n	8004cf6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3734      	adds	r7, #52	; 0x34
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd90      	pop	{r4, r7, pc}

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e12d      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b98      	ldr	r3, [pc, #608]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d91b      	bls.n	8004d5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b95      	ldr	r3, [pc, #596]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 0207 	bic.w	r2, r3, #7
 8004d2a:	4993      	ldr	r1, [pc, #588]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fd fc6f 	bl	8002614 <HAL_GetTick>
 8004d36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d3a:	f7fd fc6b 	bl	8002614 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e111      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4c:	4b8a      	ldr	r3, [pc, #552]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d1ef      	bne.n	8004d3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d016      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7ff fae3 	bl	8004336 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d70:	f7fd fc50 	bl	8002614 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d78:	f7fd fc4c 	bl	8002614 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0f2      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d8a:	f7ff fbd0 	bl	800452e <LL_RCC_IsActiveFlag_HPRE>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f1      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fada 	bl	800435e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004daa:	f7fd fc33 	bl	8002614 <HAL_GetTick>
 8004dae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004db2:	f7fd fc2f 	bl	8002614 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0d5      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004dc4:	f7ff fbc5 	bl	8004552 <LL_RCC_IsActiveFlag_C2HPRE>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0f1      	beq.n	8004db2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fad3 	bl	800438a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004de4:	f7fd fc16 	bl	8002614 <HAL_GetTick>
 8004de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dec:	f7fd fc12 	bl	8002614 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0b8      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004dfe:	f7ff fbbb 	bl	8004578 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d0f1      	beq.n	8004dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d016      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff facd 	bl	80043b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e1e:	f7fd fbf9 	bl	8002614 <HAL_GetTick>
 8004e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e26:	f7fd fbf5 	bl	8002614 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e09b      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004e38:	f7ff fbb1 	bl	800459e <LL_RCC_IsActiveFlag_PPRE1>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f1      	beq.n	8004e26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d017      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fac3 	bl	80043e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e5a:	f7fd fbdb 	bl	8002614 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e62:	f7fd fbd7 	bl	8002614 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e07d      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e74:	f7ff fba5 	bl	80045c2 <LL_RCC_IsActiveFlag_PPRE2>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f1      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d043      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e92:	f7ff f863 	bl	8003f5c <LL_RCC_HSE_IsReady>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d11e      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e067      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004ea8:	f7ff fafe 	bl	80044a8 <LL_RCC_PLL_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d113      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e05c      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004ebe:	f7ff f9cb 	bl	8004258 <LL_RCC_MSI_IsReady>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d108      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e051      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004ecc:	f7ff f876 	bl	8003fbc <LL_RCC_HSI_IsReady>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e04a      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fa09 	bl	80042f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee4:	f7fd fb96 	bl	8002614 <HAL_GetTick>
 8004ee8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eea:	e00a      	b.n	8004f02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eec:	f7fd fb92 	bl	8002614 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e036      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f02:	f7ff fa0c 	bl	800431e <LL_RCC_GetSysClkSource>
 8004f06:	4602      	mov	r2, r0
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d1ec      	bne.n	8004eec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f12:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d21b      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f20:	4b15      	ldr	r3, [pc, #84]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 0207 	bic.w	r2, r3, #7
 8004f28:	4913      	ldr	r1, [pc, #76]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f30:	f7fd fb70 	bl	8002614 <HAL_GetTick>
 8004f34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f38:	f7fd fb6c 	bl	8002614 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e012      	b.n	8004f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x278>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d1ef      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f58:	f000 f87e 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <HAL_RCC_ClockConfig+0x27c>)
 8004f60:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004f62:	f7fd fb63 	bl	800262c <HAL_GetTickPrio>
 8004f66:	4603      	mov	r3, r0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd fb05 	bl	8002578 <HAL_InitTick>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	58004000 	.word	0x58004000
 8004f7c:	20000004 	.word	0x20000004

08004f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f86:	f7ff f9ca 	bl	800431e <LL_RCC_GetSysClkSource>
 8004f8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f92:	f7ff f986 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8004f96:	4603      	mov	r3, r0
 8004f98:	091b      	lsrs	r3, r3, #4
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	e04b      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d102      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fae:	4b28      	ldr	r3, [pc, #160]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e045      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fba:	f7fe ff9f 	bl	8003efc <LL_RCC_HSE_IsEnabledDiv2>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d102      	bne.n	8004fca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004fc4:	4b22      	ldr	r3, [pc, #136]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e03a      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004fca:	4b22      	ldr	r3, [pc, #136]	; (8005054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e037      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004fd0:	f7ff faa1 	bl	8004516 <LL_RCC_PLL_GetMainSource>
 8004fd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d003      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x64>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d003      	beq.n	8004fea <HAL_RCC_GetSysClockFreq+0x6a>
 8004fe2:	e00d      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004fe6:	60bb      	str	r3, [r7, #8]
        break;
 8004fe8:	e015      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fea:	f7fe ff87 	bl	8003efc <LL_RCC_HSE_IsEnabledDiv2>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004ff4:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ff6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ff8:	e00d      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ffa:	4b16      	ldr	r3, [pc, #88]	; (8005054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ffc:	60bb      	str	r3, [r7, #8]
        break;
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005000:	f7ff f94f 	bl	80042a2 <LL_RCC_MSI_GetRange>
 8005004:	4603      	mov	r3, r0
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <HAL_RCC_GetSysClockFreq+0xcc>)
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	60bb      	str	r3, [r7, #8]
        break;
 8005014:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005016:	f7ff fa59 	bl	80044cc <LL_RCC_PLL_GetN>
 800501a:	4602      	mov	r2, r0
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	fb03 f402 	mul.w	r4, r3, r2
 8005022:	f7ff fa6c 	bl	80044fe <LL_RCC_PLL_GetDivider>
 8005026:	4603      	mov	r3, r0
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	3301      	adds	r3, #1
 800502c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005030:	f7ff fa59 	bl	80044e6 <LL_RCC_PLL_GetR>
 8005034:	4603      	mov	r3, r0
 8005036:	0f5b      	lsrs	r3, r3, #29
 8005038:	3301      	adds	r3, #1
 800503a:	fbb4 f3f3 	udiv	r3, r4, r3
 800503e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}
 800504a:	bf00      	nop
 800504c:	0800bcfc 	.word	0x0800bcfc
 8005050:	00f42400 	.word	0x00f42400
 8005054:	01e84800 	.word	0x01e84800

08005058 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005058:	b598      	push	{r3, r4, r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800505c:	f7ff ff90 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8005060:	4604      	mov	r4, r0
 8005062:	f7ff f9d1 	bl	8004408 <LL_RCC_GetAHBPrescaler>
 8005066:	4603      	mov	r3, r0
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	4a03      	ldr	r2, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x24>)
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005078:	4618      	mov	r0, r3
 800507a:	bd98      	pop	{r3, r4, r7, pc}
 800507c:	0800bc9c 	.word	0x0800bc9c

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b598      	push	{r3, r4, r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005084:	f7ff ffe8 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 8005088:	4604      	mov	r4, r0
 800508a:	f7ff f9d7 	bl	800443c <LL_RCC_GetAPB1Prescaler>
 800508e:	4603      	mov	r3, r0
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	4a04      	ldr	r2, [pc, #16]	; (80050a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd98      	pop	{r3, r4, r7, pc}
 80050a8:	0800bcdc 	.word	0x0800bcdc

080050ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ac:	b598      	push	{r3, r4, r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80050b0:	f7ff ffd2 	bl	8005058 <HAL_RCC_GetHCLKFreq>
 80050b4:	4604      	mov	r4, r0
 80050b6:	f7ff f9cd 	bl	8004454 <LL_RCC_GetAPB2Prescaler>
 80050ba:	4603      	mov	r3, r0
 80050bc:	0adb      	lsrs	r3, r3, #11
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd98      	pop	{r3, r4, r7, pc}
 80050d4:	0800bcdc 	.word	0x0800bcdc

080050d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2bb0      	cmp	r3, #176	; 0xb0
 80050e4:	d903      	bls.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80050e6:	4b15      	ldr	r3, [pc, #84]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e007      	b.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	4a11      	ldr	r2, [pc, #68]	; (800513c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80050f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80050fe:	f7ff f98f 	bl	8004420 <LL_RCC_GetAHB4Prescaler>
 8005102:	4603      	mov	r3, r0
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	fbb2 f3f3 	udiv	r3, r2, r3
 8005116:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	0c9c      	lsrs	r4, r3, #18
 8005122:	f7fe fedd 	bl	8003ee0 <HAL_PWREx_GetVoltageRange>
 8005126:	4603      	mov	r3, r0
 8005128:	4619      	mov	r1, r3
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f80c 	bl	8005148 <RCC_SetFlashLatency>
 8005130:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	bf00      	nop
 800513c:	0800bcfc 	.word	0x0800bcfc
 8005140:	0800bc9c 	.word	0x0800bc9c
 8005144:	431bde83 	.word	0x431bde83

08005148 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b093      	sub	sp, #76	; 0x4c
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005152:	4b39      	ldr	r3, [pc, #228]	; (8005238 <RCC_SetFlashLatency+0xf0>)
 8005154:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800515a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800515e:	4a37      	ldr	r2, [pc, #220]	; (800523c <RCC_SetFlashLatency+0xf4>)
 8005160:	f107 031c 	add.w	r3, r7, #28
 8005164:	ca07      	ldmia	r2, {r0, r1, r2}
 8005166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800516a:	4b35      	ldr	r3, [pc, #212]	; (8005240 <RCC_SetFlashLatency+0xf8>)
 800516c:	f107 040c 	add.w	r4, r7, #12
 8005170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005176:	2300      	movs	r3, #0
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005180:	d11c      	bne.n	80051bc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005182:	2300      	movs	r3, #0
 8005184:	643b      	str	r3, [r7, #64]	; 0x40
 8005186:	e015      	b.n	80051b4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005190:	4413      	add	r3, r2
 8005192:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d808      	bhi.n	80051ae <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051a4:	4413      	add	r3, r2
 80051a6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051aa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051ac:	e022      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	3301      	adds	r3, #1
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
 80051b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d9e6      	bls.n	8005188 <RCC_SetFlashLatency+0x40>
 80051ba:	e01b      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051bc:	2300      	movs	r3, #0
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c0:	e015      	b.n	80051ee <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80051c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051ca:	4413      	add	r3, r2
 80051cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d808      	bhi.n	80051e8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80051d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80051de:	4413      	add	r3, r2
 80051e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80051e4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80051e6:	e005      	b.n	80051f4 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	3301      	adds	r3, #1
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d9e6      	bls.n	80051c2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80051f4:	4b13      	ldr	r3, [pc, #76]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f023 0207 	bic.w	r2, r3, #7
 80051fc:	4911      	ldr	r1, [pc, #68]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 80051fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005200:	4313      	orrs	r3, r2
 8005202:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005204:	f7fd fa06 	bl	8002614 <HAL_GetTick>
 8005208:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800520a:	e008      	b.n	800521e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800520c:	f7fd fa02 	bl	8002614 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e007      	b.n	800522e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800521e:	4b09      	ldr	r3, [pc, #36]	; (8005244 <RCC_SetFlashLatency+0xfc>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	429a      	cmp	r2, r3
 800522a:	d1ef      	bne.n	800520c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	374c      	adds	r7, #76	; 0x4c
 8005232:	46bd      	mov	sp, r7
 8005234:	bd90      	pop	{r4, r7, pc}
 8005236:	bf00      	nop
 8005238:	0800bb00 	.word	0x0800bb00
 800523c:	0800bb10 	.word	0x0800bb10
 8005240:	0800bb1c 	.word	0x0800bb1c
 8005244:	58004000 	.word	0x58004000

08005248 <LL_RCC_LSE_IsEnabled>:
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <LL_RCC_LSE_IsEnabled+0x18>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <LL_RCC_LSE_IsEnabled+0x1a>
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_RCC_LSE_IsReady>:
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d101      	bne.n	8005284 <LL_RCC_LSE_IsReady+0x18>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <LL_RCC_LSE_IsReady+0x1a>
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <LL_RCC_SetRFWKPClockSource>:
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_RCC_SetSMPSClockSource>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80052c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_SetSMPSPrescaler>:
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_RCC_SetUSARTClockSource>:
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 0203 	bic.w	r2, r3, #3
 8005320:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <LL_RCC_SetLPUARTClockSource>:
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <LL_RCC_SetI2CClockSource>:
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800537c:	43db      	mvns	r3, r3
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_RCC_SetLPTIMClockSource>:
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LL_RCC_SetSAIClockSource>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80053da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_SetRNGClockSource>:
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_RCC_SetCLK48ClockSource>:
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800543e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_RCC_SetUSBClockSource>:
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ffe3 	bl	800542a <LL_RCC_SetCLK48ClockSource>
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <LL_RCC_SetADCClockSource>:
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <LL_RCC_SetRTCClockSource>:
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <LL_RCC_GetRTCClockSource>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_RCC_ForceBackupDomainReset>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_RCC_PLLSAI1_Enable>:
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005534:	6013      	str	r3, [r2, #0]
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_RCC_PLLSAI1_Disable>:
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800554e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005552:	6013      	str	r3, [r2, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <LL_RCC_PLLSAI1_IsReady>:
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005570:	d101      	bne.n	8005576 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800558a:	2300      	movs	r3, #0
 800558c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800558e:	2300      	movs	r3, #0
 8005590:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d034      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055a6:	d021      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80055a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055ac:	d81b      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b2:	d01d      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055b8:	d815      	bhi.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d110      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80055c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80055d4:	e00d      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3304      	adds	r3, #4
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f947 	bl	800586e <RCCEx_PLLSAI1_ConfigNP>
 80055e0:	4603      	mov	r3, r0
 80055e2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055e4:	e005      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	77fb      	strb	r3, [r7, #31]
        break;
 80055ea:	e002      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80055f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f2:	7ffb      	ldrb	r3, [r7, #31]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fee8 	bl	80053d2 <LL_RCC_SetSAIClockSource>
 8005602:	e001      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	7ffb      	ldrb	r3, [r7, #31]
 8005606:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005610:	2b00      	cmp	r3, #0
 8005612:	d046      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005614:	f7ff ff56 	bl	80054c4 <LL_RCC_GetRTCClockSource>
 8005618:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	69ba      	ldr	r2, [r7, #24]
 8005620:	429a      	cmp	r2, r3
 8005622:	d03c      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005624:	f7fe fc4c 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff ff30 	bl	8005498 <LL_RCC_SetRTCClockSource>
 8005638:	e02e      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005644:	f7ff ff4b 	bl	80054de <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005648:	f7ff ff5a 	bl	8005500 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005664:	f7ff fdf0 	bl	8005248 <LL_RCC_LSE_IsEnabled>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d114      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800566e:	f7fc ffd1 	bl	8002614 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005674:	e00b      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005676:	f7fc ffcd 	bl	8002614 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	f241 3288 	movw	r2, #5000	; 0x1388
 8005684:	4293      	cmp	r3, r2
 8005686:	d902      	bls.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	77fb      	strb	r3, [r7, #31]
              break;
 800568c:	e004      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800568e:	f7ff fded 	bl	800526c <LL_RCC_LSE_IsReady>
 8005692:	4603      	mov	r3, r0
 8005694:	2b01      	cmp	r3, #1
 8005696:	d1ee      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005698:	7ffb      	ldrb	r3, [r7, #31]
 800569a:	77bb      	strb	r3, [r7, #30]
 800569c:	e001      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fe2a 	bl	800530c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fe35 	bl	8005338 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fe5d 	bl	800539e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fe52 	bl	800539e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fe2a 	bl	8005364 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe1f 	bl	8005364 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d022      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fe8d 	bl	8005456 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005744:	d107      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005754:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800575e:	d10b      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f8dd 	bl	8005924 <RCCEx_PLLSAI1_ConfigNQ>
 800576a:	4603      	mov	r3, r0
 800576c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800576e:	7ffb      	ldrb	r3, [r7, #31]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005774:	7ffb      	ldrb	r3, [r7, #31]
 8005776:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02b      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005796:	d003      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff fe2a 	bl	80053fe <LL_RCC_SetRNGClockSource>
 80057aa:	e00a      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff fe21 	bl	80053fe <LL_RCC_SetRNGClockSource>
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fe34 	bl	800542a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80057ca:	d107      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80057cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fe3d 	bl	800546c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fa:	d107      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005814:	d10b      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3304      	adds	r3, #4
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8dd 	bl	80059da <RCCEx_PLLSAI1_ConfigNR>
 8005820:	4603      	mov	r3, r0
 8005822:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005824:	7ffb      	ldrb	r3, [r7, #31]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800582a:	7ffb      	ldrb	r3, [r7, #31]
 800582c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fd26 	bl	8005290 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fd45 	bl	80052e4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fd2c 	bl	80052bc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005864:	7fbb      	ldrb	r3, [r7, #30]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800587a:	f7ff fe61 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800587e:	f7fc fec9 	bl	8002614 <HAL_GetTick>
 8005882:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005884:	e009      	b.n	800589a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005886:	f7fc fec5 	bl	8002614 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d902      	bls.n	800589a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e004      	b.n	80058a4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800589a:	f7ff fe60 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1f0      	bne.n	8005886 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d137      	bne.n	800591a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058be:	4313      	orrs	r3, r2
 80058c0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d4:	4313      	orrs	r3, r2
 80058d6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058d8:	f7ff fe23 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058dc:	f7fc fe9a 	bl	8002614 <HAL_GetTick>
 80058e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058e2:	e009      	b.n	80058f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e4:	f7fc fe96 	bl	8002614 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d902      	bls.n	80058f8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	73fb      	strb	r3, [r7, #15]
        break;
 80058f6:	e004      	b.n	8005902 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058f8:	f7ff fe31 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d1f0      	bne.n	80058e4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005916:	4313      	orrs	r3, r2
 8005918:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005930:	f7ff fe06 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005934:	f7fc fe6e 	bl	8002614 <HAL_GetTick>
 8005938:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800593a:	e009      	b.n	8005950 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593c:	f7fc fe6a 	bl	8002614 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d902      	bls.n	8005950 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	73fb      	strb	r3, [r7, #15]
      break;
 800594e:	e004      	b.n	800595a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005950:	f7ff fe05 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f0      	bne.n	800593c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d137      	bne.n	80059d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005974:	4313      	orrs	r3, r2
 8005976:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598a:	4313      	orrs	r3, r2
 800598c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800598e:	f7ff fdc8 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005992:	f7fc fe3f 	bl	8002614 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005998:	e009      	b.n	80059ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800599a:	f7fc fe3b 	bl	8002614 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d902      	bls.n	80059ae <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	73fb      	strb	r3, [r7, #15]
        break;
 80059ac:	e004      	b.n	80059b8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059ae:	f7ff fdd6 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d1f0      	bne.n	800599a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059cc:	4313      	orrs	r3, r2
 80059ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80059e6:	f7ff fdab 	bl	8005540 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059ea:	f7fc fe13 	bl	8002614 <HAL_GetTick>
 80059ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80059f0:	e009      	b.n	8005a06 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059f2:	f7fc fe0f 	bl	8002614 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d902      	bls.n	8005a06 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e004      	b.n	8005a10 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005a06:	f7ff fdaa 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f0      	bne.n	80059f2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d137      	bne.n	8005a86 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a40:	4313      	orrs	r3, r2
 8005a42:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005a44:	f7ff fd6d 	bl	8005522 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a48:	f7fc fde4 	bl	8002614 <HAL_GetTick>
 8005a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a4e:	e009      	b.n	8005a64 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a50:	f7fc fde0 	bl	8002614 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
        break;
 8005a62:	e004      	b.n	8005a6e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005a64:	f7ff fd7b 	bl	800555e <LL_RCC_PLLSAI1_IsReady>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d1f0      	bne.n	8005a50 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a78:	691a      	ldr	r2, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a82:	4313      	orrs	r3, r2
 8005a84:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e090      	b.n	8005bc4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fc fb72 	bl	80021a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	22ca      	movs	r2, #202	; 0xca
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2253      	movs	r2, #83	; 0x53
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f89f 	bl	8005c18 <RTC_EnterInitMode>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	22ff      	movs	r2, #255	; 0xff
 8005ae6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2204      	movs	r2, #4
 8005aec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e067      	b.n	8005bc4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6919      	ldr	r1, [r3, #16]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	041a      	lsls	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b52:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0203 	bic.w	r2, r2, #3
 8005b62:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d113      	bne.n	8005bb2 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f81e 	bl	8005bcc <HAL_RTC_WaitForSynchro>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00d      	beq.n	8005bb2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	22ff      	movs	r2, #255	; 0xff
 8005b9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e008      	b.n	8005bc4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	22ff      	movs	r2, #255	; 0xff
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005be2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005be4:	f7fc fd16 	bl	8002614 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bea:	e009      	b.n	8005c00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bec:	f7fc fd12 	bl	8002614 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bfa:	d901      	bls.n	8005c00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e007      	b.n	8005c10 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ee      	beq.n	8005bec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d119      	bne.n	8005c62 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c38:	f7fc fcec 	bl	8002614 <HAL_GetTick>
 8005c3c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c3e:	e009      	b.n	8005c54 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c40:	f7fc fce8 	bl	8002614 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c4e:	d901      	bls.n	8005c54 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e007      	b.n	8005c64 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d0ee      	beq.n	8005c40 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e024      	b.n	8005ccc <HAL_RTCEx_EnableBypassShadow+0x60>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	22ca      	movs	r2, #202	; 0xca
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2253      	movs	r2, #83	; 0x53
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	22ff      	movs	r2, #255	; 0xff
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <LL_RCC_GetUSARTClockSource>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4013      	ands	r3, r2
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <LL_RCC_GetLPUARTClockSource>:
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e042      	b.n	8005db0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7fc fa4f 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2224      	movs	r2, #36	; 0x24
 8005d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f9be 	bl	80060dc <UART_SetConfig>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e022      	b.n	8005db0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fbbc 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc43 	bl	8006634 <UART_CheckIdleState>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	f640 030f 	movw	r3, #2063	; 0x80f
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d118      	bne.n	8005e1a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d013      	beq.n	8005e1a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8144 	beq.w	8006098 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
      }
      return;
 8005e18:	e13e      	b.n	8006098 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80e8 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4ba0      	ldr	r3, [pc, #640]	; (80060a8 <HAL_UART_IRQHandler+0x2f0>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4b9f      	ldr	r3, [pc, #636]	; (80060ac <HAL_UART_IRQHandler+0x2f4>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80dd 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d010      	beq.n	8005e64 <HAL_UART_IRQHandler+0xac>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00b      	beq.n	8005e64 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2201      	movs	r2, #1
 8005e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d010      	beq.n	8005e90 <HAL_UART_IRQHandler+0xd8>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	f043 0204 	orr.w	r2, r3, #4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d010      	beq.n	8005ebc <HAL_UART_IRQHandler+0x104>
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d015      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <HAL_UART_IRQHandler+0x2f0>)
 8005ed4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00b      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f043 0208 	orr.w	r2, r3, #8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <HAL_UART_IRQHandler+0x168>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80b8 	beq.w	800609c <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d011      	beq.n	8005f5a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b40      	cmp	r3, #64	; 0x40
 8005f6e:	d004      	beq.n	8005f7a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d031      	beq.n	8005fde <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc22 	bl	80067c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	d123      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005faa:	4a41      	ldr	r2, [pc, #260]	; (80060b0 <HAL_UART_IRQHandler+0x2f8>)
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fd fc4e 	bl	8003854 <HAL_DMA_Abort_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00f      	b.n	8005fee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f87a 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00b      	b.n	8005fee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f876 	bl	80060c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e007      	b.n	8005fee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f872 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005fec:	e056      	b.n	800609c <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fee:	bf00      	nop
    return;
 8005ff0:	e054      	b.n	800609c <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <HAL_UART_IRQHandler+0x260>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800600e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fc2a 	bl	800686a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006016:	e044      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d012      	beq.n	8006048 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b00      	cmp	r3, #0
 800602a:	d104      	bne.n	8006036 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d008      	beq.n	8006048 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	2b00      	cmp	r3, #0
 800603c:	d030      	beq.n	80060a0 <HAL_UART_IRQHandler+0x2e8>
    {
      huart->TxISR(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
    }
    return;
 8006046:	e02b      	b.n	80060a0 <HAL_UART_IRQHandler+0x2e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d008      	beq.n	8006064 <HAL_UART_IRQHandler+0x2ac>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fbea 	bl	8006836 <UART_EndTransmit_IT>
    return;
 8006062:	e01e      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <HAL_UART_IRQHandler+0x2c8>
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fc0a 	bl	8006892 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800607e:	e010      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	2b00      	cmp	r3, #0
 800608e:	da08      	bge.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fbf4 	bl	800687e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006096:	e004      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
      return;
 8006098:	bf00      	nop
 800609a:	e002      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
    return;
 800609c:	bf00      	nop
 800609e:	e000      	b.n	80060a2 <HAL_UART_IRQHandler+0x2ea>
    return;
 80060a0:	bf00      	nop
  }
}
 80060a2:	3720      	adds	r7, #32
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	10000001 	.word	0x10000001
 80060ac:	04000120 	.word	0x04000120
 80060b0:	0800680b 	.word	0x0800680b

080060b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060dc:	b5b0      	push	{r4, r5, r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	4313      	orrs	r3, r2
 8006108:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4ba2      	ldr	r3, [pc, #648]	; (800639c <UART_SetConfig+0x2c0>)
 8006112:	4013      	ands	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	430b      	orrs	r3, r1
 800611c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a98      	ldr	r2, [pc, #608]	; (80063a0 <UART_SetConfig+0x2c4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	4313      	orrs	r3, r2
 800614c:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006158:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	430b      	orrs	r3, r1
 8006164:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f023 010f 	bic.w	r1, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a88      	ldr	r2, [pc, #544]	; (80063a4 <UART_SetConfig+0x2c8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d11f      	bne.n	80061c6 <UART_SetConfig+0xea>
 8006186:	2003      	movs	r0, #3
 8006188:	f7ff fda6 	bl	8005cd8 <LL_RCC_GetUSARTClockSource>
 800618c:	4603      	mov	r3, r0
 800618e:	2b03      	cmp	r3, #3
 8006190:	d816      	bhi.n	80061c0 <UART_SetConfig+0xe4>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <UART_SetConfig+0xbc>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061b5 	.word	0x080061b5
 80061a0:	080061af 	.word	0x080061af
 80061a4:	080061bb 	.word	0x080061bb
 80061a8:	2301      	movs	r3, #1
 80061aa:	76fb      	strb	r3, [r7, #27]
 80061ac:	e038      	b.n	8006220 <UART_SetConfig+0x144>
 80061ae:	2302      	movs	r3, #2
 80061b0:	76fb      	strb	r3, [r7, #27]
 80061b2:	e035      	b.n	8006220 <UART_SetConfig+0x144>
 80061b4:	2304      	movs	r3, #4
 80061b6:	76fb      	strb	r3, [r7, #27]
 80061b8:	e032      	b.n	8006220 <UART_SetConfig+0x144>
 80061ba:	2308      	movs	r3, #8
 80061bc:	76fb      	strb	r3, [r7, #27]
 80061be:	e02f      	b.n	8006220 <UART_SetConfig+0x144>
 80061c0:	2310      	movs	r3, #16
 80061c2:	76fb      	strb	r3, [r7, #27]
 80061c4:	e02c      	b.n	8006220 <UART_SetConfig+0x144>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a75      	ldr	r2, [pc, #468]	; (80063a0 <UART_SetConfig+0x2c4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d125      	bne.n	800621c <UART_SetConfig+0x140>
 80061d0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80061d4:	f7ff fd90 	bl	8005cf8 <LL_RCC_GetLPUARTClockSource>
 80061d8:	4603      	mov	r3, r0
 80061da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061de:	d017      	beq.n	8006210 <UART_SetConfig+0x134>
 80061e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e4:	d817      	bhi.n	8006216 <UART_SetConfig+0x13a>
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ea:	d00b      	beq.n	8006204 <UART_SetConfig+0x128>
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	d811      	bhi.n	8006216 <UART_SetConfig+0x13a>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <UART_SetConfig+0x122>
 80061f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fa:	d006      	beq.n	800620a <UART_SetConfig+0x12e>
 80061fc:	e00b      	b.n	8006216 <UART_SetConfig+0x13a>
 80061fe:	2300      	movs	r3, #0
 8006200:	76fb      	strb	r3, [r7, #27]
 8006202:	e00d      	b.n	8006220 <UART_SetConfig+0x144>
 8006204:	2302      	movs	r3, #2
 8006206:	76fb      	strb	r3, [r7, #27]
 8006208:	e00a      	b.n	8006220 <UART_SetConfig+0x144>
 800620a:	2304      	movs	r3, #4
 800620c:	76fb      	strb	r3, [r7, #27]
 800620e:	e007      	b.n	8006220 <UART_SetConfig+0x144>
 8006210:	2308      	movs	r3, #8
 8006212:	76fb      	strb	r3, [r7, #27]
 8006214:	e004      	b.n	8006220 <UART_SetConfig+0x144>
 8006216:	2310      	movs	r3, #16
 8006218:	76fb      	strb	r3, [r7, #27]
 800621a:	e001      	b.n	8006220 <UART_SetConfig+0x144>
 800621c:	2310      	movs	r3, #16
 800621e:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a5e      	ldr	r2, [pc, #376]	; (80063a0 <UART_SetConfig+0x2c4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f040 808b 	bne.w	8006342 <UART_SetConfig+0x266>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800622c:	7efb      	ldrb	r3, [r7, #27]
 800622e:	2b08      	cmp	r3, #8
 8006230:	d823      	bhi.n	800627a <UART_SetConfig+0x19e>
 8006232:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <UART_SetConfig+0x15c>)
 8006234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006238:	0800625d 	.word	0x0800625d
 800623c:	0800627b 	.word	0x0800627b
 8006240:	08006265 	.word	0x08006265
 8006244:	0800627b 	.word	0x0800627b
 8006248:	0800626b 	.word	0x0800626b
 800624c:	0800627b 	.word	0x0800627b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800627b 	.word	0x0800627b
 8006258:	08006273 	.word	0x08006273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625c:	f7fe ff10 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8006260:	6178      	str	r0, [r7, #20]
        break;
 8006262:	e00f      	b.n	8006284 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006264:	4b50      	ldr	r3, [pc, #320]	; (80063a8 <UART_SetConfig+0x2cc>)
 8006266:	617b      	str	r3, [r7, #20]
        break;
 8006268:	e00c      	b.n	8006284 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800626a:	f7fe fe89 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 800626e:	6178      	str	r0, [r7, #20]
        break;
 8006270:	e008      	b.n	8006284 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006276:	617b      	str	r3, [r7, #20]
        break;
 8006278:	e004      	b.n	8006284 <UART_SetConfig+0x1a8>
      default:
        pclk = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	76bb      	strb	r3, [r7, #26]
        break;
 8006282:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 811a 	beq.w	80064c0 <UART_SetConfig+0x3e4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	4a46      	ldr	r2, [pc, #280]	; (80063ac <UART_SetConfig+0x2d0>)
 8006292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006296:	461a      	mov	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fbb3 f3f2 	udiv	r3, r3, r2
 800629e:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	4613      	mov	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	4413      	add	r3, r2
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d305      	bcc.n	80062bc <UART_SetConfig+0x1e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d902      	bls.n	80062c2 <UART_SetConfig+0x1e6>
      {
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	76bb      	strb	r3, [r7, #26]
 80062c0:	e0fe      	b.n	80064c0 <UART_SetConfig+0x3e4>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f04f 0100 	mov.w	r1, #0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4a37      	ldr	r2, [pc, #220]	; (80063ac <UART_SetConfig+0x2d0>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	f7f9 ff57 	bl	800018c <__aeabi_uldivmod>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4610      	mov	r0, r2
 80062e4:	4619      	mov	r1, r3
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	020b      	lsls	r3, r1, #8
 80062f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062f4:	0202      	lsls	r2, r0, #8
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	6849      	ldr	r1, [r1, #4]
 80062fa:	0849      	lsrs	r1, r1, #1
 80062fc:	4608      	mov	r0, r1
 80062fe:	f04f 0100 	mov.w	r1, #0
 8006302:	1814      	adds	r4, r2, r0
 8006304:	eb43 0501 	adc.w	r5, r3, r1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	461a      	mov	r2, r3
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7f9 ff39 	bl	800018c <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4613      	mov	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d308      	bcc.n	800633c <UART_SetConfig+0x260>
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006330:	d204      	bcs.n	800633c <UART_SetConfig+0x260>
        {
          huart->Instance->BRR = usartdiv;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e0c1      	b.n	80064c0 <UART_SetConfig+0x3e4>
        }
        else
        {
          ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	76bb      	strb	r3, [r7, #26]
 8006340:	e0be      	b.n	80064c0 <UART_SetConfig+0x3e4>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634a:	d16a      	bne.n	8006422 <UART_SetConfig+0x346>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800634c:	7efb      	ldrb	r3, [r7, #27]
 800634e:	3b01      	subs	r3, #1
 8006350:	2b07      	cmp	r3, #7
 8006352:	d82d      	bhi.n	80063b0 <UART_SetConfig+0x2d4>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0x280>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	0800637d 	.word	0x0800637d
 8006360:	08006385 	.word	0x08006385
 8006364:	080063b1 	.word	0x080063b1
 8006368:	0800638b 	.word	0x0800638b
 800636c:	080063b1 	.word	0x080063b1
 8006370:	080063b1 	.word	0x080063b1
 8006374:	080063b1 	.word	0x080063b1
 8006378:	08006393 	.word	0x08006393
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fe fe96 	bl	80050ac <HAL_RCC_GetPCLK2Freq>
 8006380:	6178      	str	r0, [r7, #20]
        break;
 8006382:	e01a      	b.n	80063ba <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <UART_SetConfig+0x2cc>)
 8006386:	617b      	str	r3, [r7, #20]
        break;
 8006388:	e017      	b.n	80063ba <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800638a:	f7fe fdf9 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 800638e:	6178      	str	r0, [r7, #20]
        break;
 8006390:	e013      	b.n	80063ba <UART_SetConfig+0x2de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006396:	617b      	str	r3, [r7, #20]
        break;
 8006398:	e00f      	b.n	80063ba <UART_SetConfig+0x2de>
 800639a:	bf00      	nop
 800639c:	cfff69f3 	.word	0xcfff69f3
 80063a0:	40008000 	.word	0x40008000
 80063a4:	40013800 	.word	0x40013800
 80063a8:	00f42400 	.word	0x00f42400
 80063ac:	0800bd3c 	.word	0x0800bd3c
      default:
        pclk = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	76bb      	strb	r3, [r7, #26]
        break;
 80063b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d07f      	beq.n	80064c0 <UART_SetConfig+0x3e4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	4a48      	ldr	r2, [pc, #288]	; (80064e8 <UART_SetConfig+0x40c>)
 80063c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ca:	461a      	mov	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80063d2:	005a      	lsls	r2, r3, #1
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	085b      	lsrs	r3, r3, #1
 80063da:	441a      	add	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b0f      	cmp	r3, #15
 80063ec:	d916      	bls.n	800641c <UART_SetConfig+0x340>
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063f4:	d212      	bcs.n	800641c <UART_SetConfig+0x340>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f023 030f 	bic.w	r3, r3, #15
 80063fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	b29b      	uxth	r3, r3
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	b29a      	uxth	r2, r3
 800640c:	89fb      	ldrh	r3, [r7, #14]
 800640e:	4313      	orrs	r3, r2
 8006410:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	89fa      	ldrh	r2, [r7, #14]
 8006418:	60da      	str	r2, [r3, #12]
 800641a:	e051      	b.n	80064c0 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	76bb      	strb	r3, [r7, #26]
 8006420:	e04e      	b.n	80064c0 <UART_SetConfig+0x3e4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006422:	7efb      	ldrb	r3, [r7, #27]
 8006424:	3b01      	subs	r3, #1
 8006426:	2b07      	cmp	r3, #7
 8006428:	d821      	bhi.n	800646e <UART_SetConfig+0x392>
 800642a:	a201      	add	r2, pc, #4	; (adr r2, 8006430 <UART_SetConfig+0x354>)
 800642c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006430:	08006451 	.word	0x08006451
 8006434:	08006459 	.word	0x08006459
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800645f 	.word	0x0800645f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	0800646f 	.word	0x0800646f
 8006448:	0800646f 	.word	0x0800646f
 800644c:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe fe2c 	bl	80050ac <HAL_RCC_GetPCLK2Freq>
 8006454:	6178      	str	r0, [r7, #20]
        break;
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b24      	ldr	r3, [pc, #144]	; (80064ec <UART_SetConfig+0x410>)
 800645a:	617b      	str	r3, [r7, #20]
        break;
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fd8f 	bl	8004f80 <HAL_RCC_GetSysClockFreq>
 8006462:	6178      	str	r0, [r7, #20]
        break;
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x39c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	617b      	str	r3, [r7, #20]
        break;
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x39c>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	76bb      	strb	r3, [r7, #26]
        break;
 8006476:	bf00      	nop
    }

    if (pclk != 0U)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d020      	beq.n	80064c0 <UART_SetConfig+0x3e4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	4a19      	ldr	r2, [pc, #100]	; (80064e8 <UART_SetConfig+0x40c>)
 8006484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	441a      	add	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d908      	bls.n	80064bc <UART_SetConfig+0x3e0>
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b0:	d204      	bcs.n	80064bc <UART_SetConfig+0x3e0>
      {
        huart->Instance->BRR = usartdiv;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
 80064ba:	e001      	b.n	80064c0 <UART_SetConfig+0x3e4>
      }
      else
      {
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80064dc:	7ebb      	ldrb	r3, [r7, #26]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3720      	adds	r7, #32
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bdb0      	pop	{r4, r5, r7, pc}
 80064e6:	bf00      	nop
 80064e8:	0800bd3c 	.word	0x0800bd3c
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	f003 0308 	and.w	r3, r3, #8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006644:	f7fb ffe6 	bl	8002614 <HAL_GetTick>
 8006648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d10e      	bne.n	8006676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f82c 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e022      	b.n	80066bc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d10e      	bne.n	80066a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f816 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e00c      	b.n	80066bc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e062      	b.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d05e      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fb ff99 	bl	8002614 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d11d      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006702:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0201 	bic.w	r2, r2, #1
 8006712:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e045      	b.n	80067bc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0304 	and.w	r3, r3, #4
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02e      	beq.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800674c:	d126      	bne.n	800679c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006756:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006766:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0201 	bic.w	r2, r2, #1
 8006776:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2220      	movs	r2, #32
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e00f      	b.n	80067bc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69da      	ldr	r2, [r3, #28]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d08d      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fc4d 	bl	80060c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff fc29 	bl	80060b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_UARTEx_DisableFifoMode+0x16>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e027      	b.n	800690c <HAL_UARTEx_DisableFifoMode+0x66>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	; 0x24
 80068c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3714      	adds	r7, #20
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800692c:	2302      	movs	r3, #2
 800692e:	e02d      	b.n	800698c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2224      	movs	r2, #36	; 0x24
 800693c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0201 	bic.w	r2, r2, #1
 8006956:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f84f 	bl	8006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e02d      	b.n	8006a08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2224      	movs	r2, #36	; 0x24
 80069b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f811 	bl	8006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b089      	sub	sp, #36	; 0x24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a18:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a1a:	f107 0314 	add.w	r3, r7, #20
 8006a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a26:	4a2d      	ldr	r2, [pc, #180]	; (8006adc <UARTEx_SetNbDataToProcess+0xcc>)
 8006a28:	f107 030c 	add.w	r3, r7, #12
 8006a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d108      	bne.n	8006a4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a4c:	e03d      	b.n	8006aca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a4e:	2308      	movs	r3, #8
 8006a50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a52:	2308      	movs	r3, #8
 8006a54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	0e5b      	lsrs	r3, r3, #25
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	0f5b      	lsrs	r3, r3, #29
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006a76:	7fbb      	ldrb	r3, [r7, #30]
 8006a78:	7f3a      	ldrb	r2, [r7, #28]
 8006a7a:	f107 0120 	add.w	r1, r7, #32
 8006a7e:	440a      	add	r2, r1
 8006a80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	7f3a      	ldrb	r2, [r7, #28]
 8006a8a:	f107 0120 	add.w	r1, r7, #32
 8006a8e:	440a      	add	r2, r1
 8006a90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	7f7a      	ldrb	r2, [r7, #29]
 8006aa4:	f107 0120 	add.w	r1, r7, #32
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	7f7a      	ldrb	r2, [r7, #29]
 8006ab4:	f107 0120 	add.w	r1, r7, #32
 8006ab8:	440a      	add	r2, r1
 8006aba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006abe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006aca:	bf00      	nop
 8006acc:	3724      	adds	r7, #36	; 0x24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	0800bb2c 	.word	0x0800bb2c
 8006adc:	0800bb34 	.word	0x0800bb34

08006ae0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006ae0:	b5b0      	push	{r4, r5, r7, lr}
 8006ae2:	b0ce      	sub	sp, #312	; 0x138
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	460c      	mov	r4, r1
 8006aea:	4610      	mov	r0, r2
 8006aec:	4619      	mov	r1, r3
 8006aee:	1dfb      	adds	r3, r7, #7
 8006af0:	462a      	mov	r2, r5
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	1d3b      	adds	r3, r7, #4
 8006af6:	4622      	mov	r2, r4
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	1cbb      	adds	r3, r7, #2
 8006afc:	4602      	mov	r2, r0
 8006afe:	801a      	strh	r2, [r3, #0]
 8006b00:	1dbb      	adds	r3, r7, #6
 8006b02:	460a      	mov	r2, r1
 8006b04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006b06:	f107 0310 	add.w	r3, r7, #16
 8006b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006b0e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006b12:	3308      	adds	r3, #8
 8006b14:	f107 0210 	add.w	r2, r7, #16
 8006b18:	4413      	add	r3, r2
 8006b1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006b1e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b22:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006b26:	4413      	add	r3, r2
 8006b28:	3309      	adds	r3, #9
 8006b2a:	f107 0210 	add.w	r2, r7, #16
 8006b2e:	4413      	add	r3, r2
 8006b30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b34:	f107 030f 	add.w	r3, r7, #15
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b46:	1dfa      	adds	r2, r7, #7
 8006b48:	7812      	ldrb	r2, [r2, #0]
 8006b4a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b50:	3301      	adds	r3, #1
 8006b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b5a:	1d3a      	adds	r2, r7, #4
 8006b5c:	8812      	ldrh	r2, [r2, #0]
 8006b5e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b66:	3302      	adds	r3, #2
 8006b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b70:	1cba      	adds	r2, r7, #2
 8006b72:	8812      	ldrh	r2, [r2, #0]
 8006b74:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b86:	1dba      	adds	r2, r7, #6
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b90:	3301      	adds	r3, #1
 8006b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b9a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006b9e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bae:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006bb2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb8:	3301      	adds	r3, #1
 8006bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006bc8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f99b 	bl	8007f08 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006bd2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006bd6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006bda:	4413      	add	r3, r2
 8006bdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006be0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006be4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006be8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006bf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006bfe:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 f980 	bl	8007f08 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006c08:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006c0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006c10:	4413      	add	r3, r2
 8006c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c1a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006c1e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c24:	3302      	adds	r3, #2
 8006c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006c32:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c38:	3302      	adds	r3, #2
 8006c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c42:	2218      	movs	r2, #24
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f96e 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c4c:	233f      	movs	r3, #63	; 0x3f
 8006c4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006c52:	2383      	movs	r3, #131	; 0x83
 8006c54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c58:	f107 0310 	add.w	r3, r7, #16
 8006c5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c68:	f107 030f 	add.w	r3, r7, #15
 8006c6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c70:	2301      	movs	r3, #1
 8006c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fd35 	bl	80086ec <hci_send_req>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da01      	bge.n	8006c8c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8006c88:	23ff      	movs	r3, #255	; 0xff
 8006c8a:	e002      	b.n	8006c92 <aci_gap_set_discoverable+0x1b2>
  return status;
 8006c8c:	f107 030f 	add.w	r3, r7, #15
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bdb0      	pop	{r4, r5, r7, pc}

08006c9c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b0cc      	sub	sp, #304	; 0x130
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	1dfb      	adds	r3, r7, #7
 8006ca6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006ca8:	f107 0310 	add.w	r3, r7, #16
 8006cac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006cb0:	f107 030f 	add.w	r3, r7, #15
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cc2:	1dfa      	adds	r2, r7, #7
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ccc:	3301      	adds	r3, #1
 8006cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cd6:	2218      	movs	r2, #24
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f924 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ce0:	233f      	movs	r3, #63	; 0x3f
 8006ce2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006ce6:	2385      	movs	r3, #133	; 0x85
 8006ce8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006cec:	f107 0310 	add.w	r3, r7, #16
 8006cf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cf8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006cfc:	f107 030f 	add.w	r3, r7, #15
 8006d00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fceb 	bl	80086ec <hci_send_req>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da01      	bge.n	8006d20 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8006d1c:	23ff      	movs	r3, #255	; 0xff
 8006d1e:	e002      	b.n	8006d26 <aci_gap_set_io_capability+0x8a>
  return status;
 8006d20:	f107 030f 	add.w	r3, r7, #15
 8006d24:	781b      	ldrb	r3, [r3, #0]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006d30:	b5b0      	push	{r4, r5, r7, lr}
 8006d32:	b0cc      	sub	sp, #304	; 0x130
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	4605      	mov	r5, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	1dfb      	adds	r3, r7, #7
 8006d40:	462a      	mov	r2, r5
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	1dbb      	adds	r3, r7, #6
 8006d46:	4622      	mov	r2, r4
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	1d7b      	adds	r3, r7, #5
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	1d3b      	adds	r3, r7, #4
 8006d52:	460a      	mov	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006d56:	f107 0310 	add.w	r3, r7, #16
 8006d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006d5e:	f107 030f 	add.w	r3, r7, #15
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d70:	1dfa      	adds	r2, r7, #7
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d84:	1dba      	adds	r2, r7, #6
 8006d86:	7812      	ldrb	r2, [r2, #0]
 8006d88:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006d8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d8e:	3301      	adds	r3, #1
 8006d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d98:	1d7a      	adds	r2, r7, #5
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006da2:	3301      	adds	r3, #1
 8006da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dac:	1d3a      	adds	r2, r7, #4
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006db6:	3301      	adds	r3, #1
 8006db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006dc4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006dd8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dde:	3301      	adds	r3, #1
 8006de0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006dec:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006df2:	3301      	adds	r3, #1
 8006df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006e00:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006e04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e08:	3304      	adds	r3, #4
 8006e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006e16:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e26:	2218      	movs	r2, #24
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f87c 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e30:	233f      	movs	r3, #63	; 0x3f
 8006e32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006e36:	2386      	movs	r3, #134	; 0x86
 8006e38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e3c:	f107 0310 	add.w	r3, r7, #16
 8006e40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e4c:	f107 030f 	add.w	r3, r7, #15
 8006e50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e54:	2301      	movs	r3, #1
 8006e56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fc43 	bl	80086ec <hci_send_req>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da01      	bge.n	8006e70 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8006e6c:	23ff      	movs	r3, #255	; 0xff
 8006e6e:	e002      	b.n	8006e76 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8006e70:	f107 030f 	add.w	r3, r7, #15
 8006e74:	781b      	ldrb	r3, [r3, #0]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bdb0      	pop	{r4, r5, r7, pc}

08006e80 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b0cd      	sub	sp, #308	; 0x134
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	6013      	str	r3, [r2, #0]
 8006e90:	1dfb      	adds	r3, r7, #7
 8006e92:	4622      	mov	r2, r4
 8006e94:	701a      	strb	r2, [r3, #0]
 8006e96:	1dbb      	adds	r3, r7, #6
 8006e98:	4602      	mov	r2, r0
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	1d7b      	adds	r3, r7, #5
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006ea2:	f107 0310 	add.w	r3, r7, #16
 8006ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	2207      	movs	r2, #7
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f838 	bl	8007f28 <Osal_MemSet>
  int index_input = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec2:	1dfa      	adds	r2, r7, #7
 8006ec4:	7812      	ldrb	r2, [r2, #0]
 8006ec6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ed6:	1dba      	adds	r2, r7, #6
 8006ed8:	7812      	ldrb	r2, [r2, #0]
 8006eda:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eea:	1d7a      	adds	r2, r7, #5
 8006eec:	7812      	ldrb	r2, [r2, #0]
 8006eee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006efe:	2218      	movs	r2, #24
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f810 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f08:	233f      	movs	r3, #63	; 0x3f
 8006f0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006f0e:	238a      	movs	r3, #138	; 0x8a
 8006f10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006f24:	f107 0308 	add.w	r3, r7, #8
 8006f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fbd7 	bl	80086ec <hci_send_req>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	da01      	bge.n	8006f48 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8006f44:	23ff      	movs	r3, #255	; 0xff
 8006f46:	e021      	b.n	8006f8c <aci_gap_init+0x10c>
  if ( resp.Status )
 8006f48:	f107 0308 	add.w	r3, r7, #8
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <aci_gap_init+0xda>
    return resp.Status;
 8006f52:	f107 0308 	add.w	r3, r7, #8
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	e018      	b.n	8006f8c <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	463b      	mov	r3, r7
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006f78:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006f88:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}

08006f96 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b0cc      	sub	sp, #304	; 0x130
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	463b      	mov	r3, r7
 8006fa0:	6019      	str	r1, [r3, #0]
 8006fa2:	1dfb      	adds	r3, r7, #7
 8006fa4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006fa6:	f107 0310 	add.w	r3, r7, #16
 8006faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006fae:	f107 030f 	add.w	r3, r7, #15
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc0:	1dfa      	adds	r2, r7, #7
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fca:	3301      	adds	r3, #1
 8006fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd4:	1c58      	adds	r0, r3, #1
 8006fd6:	1dfb      	adds	r3, r7, #7
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	463b      	mov	r3, r7
 8006fdc:	6819      	ldr	r1, [r3, #0]
 8006fde:	f000 ff93 	bl	8007f08 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006fea:	4413      	add	r3, r2
 8006fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ff0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ff4:	2218      	movs	r2, #24
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 ff95 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ffe:	233f      	movs	r3, #63	; 0x3f
 8007000:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007004:	238e      	movs	r3, #142	; 0x8e
 8007006:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800700a:	f107 0310 	add.w	r3, r7, #16
 800700e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007016:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800701a:	f107 030f 	add.w	r3, r7, #15
 800701e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007022:	2301      	movs	r3, #1
 8007024:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f001 fb5c 	bl	80086ec <hci_send_req>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	da01      	bge.n	800703e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800703a:	23ff      	movs	r3, #255	; 0xff
 800703c:	e002      	b.n	8007044 <aci_gap_update_adv_data+0xae>
  return status;
 800703e:	f107 030f 	add.w	r3, r7, #15
 8007042:	781b      	ldrb	r3, [r3, #0]
}
 8007044:	4618      	mov	r0, r3
 8007046:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b088      	sub	sp, #32
 8007052:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	2218      	movs	r2, #24
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f000 ff61 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007066:	233f      	movs	r3, #63	; 0x3f
 8007068:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800706a:	2392      	movs	r3, #146	; 0x92
 800706c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007072:	2301      	movs	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007076:	f107 0308 	add.w	r3, r7, #8
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fb35 	bl	80086ec <hci_send_req>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	da01      	bge.n	800708c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007088:	23ff      	movs	r3, #255	; 0xff
 800708a:	e000      	b.n	800708e <aci_gap_configure_whitelist+0x40>
  return status;
 800708c:	79fb      	ldrb	r3, [r7, #7]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3720      	adds	r7, #32
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 8007096:	b5b0      	push	{r4, r5, r7, lr}
 8007098:	b0cc      	sub	sp, #304	; 0x130
 800709a:	af00      	add	r7, sp, #0
 800709c:	4605      	mov	r5, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	4610      	mov	r0, r2
 80070a2:	4619      	mov	r1, r3
 80070a4:	1dbb      	adds	r3, r7, #6
 80070a6:	462a      	mov	r2, r5
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	4622      	mov	r2, r4
 80070ae:	801a      	strh	r2, [r3, #0]
 80070b0:	1cfb      	adds	r3, r7, #3
 80070b2:	4602      	mov	r2, r0
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	1cbb      	adds	r3, r7, #2
 80070b8:	460a      	mov	r2, r1
 80070ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 80070bc:	f107 0310 	add.w	r3, r7, #16
 80070c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070c4:	f107 030f 	add.w	r3, r7, #15
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 80070d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d6:	1dba      	adds	r2, r7, #6
 80070d8:	8812      	ldrh	r2, [r2, #0]
 80070da:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070e0:	3302      	adds	r3, #2
 80070e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 80070e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ea:	1d3a      	adds	r2, r7, #4
 80070ec:	8812      	ldrh	r2, [r2, #0]
 80070ee:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80070f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f4:	3302      	adds	r3, #2
 80070f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80070fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fe:	1cfa      	adds	r2, r7, #3
 8007100:	7812      	ldrb	r2, [r2, #0]
 8007102:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007108:	3301      	adds	r3, #1
 800710a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 800710e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007112:	1cba      	adds	r2, r7, #2
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800711c:	3301      	adds	r3, #1
 800711e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007126:	2218      	movs	r2, #24
 8007128:	2100      	movs	r1, #0
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fefc 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007130:	233f      	movs	r3, #63	; 0x3f
 8007132:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 8007136:	2397      	movs	r3, #151	; 0x97
 8007138:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800713c:	230f      	movs	r3, #15
 800713e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8007142:	f107 0310 	add.w	r3, r7, #16
 8007146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800714a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007152:	f107 030f 	add.w	r3, r7, #15
 8007156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f001 fac0 	bl	80086ec <hci_send_req>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	da01      	bge.n	8007176 <aci_gap_start_general_discovery_proc+0xe0>
    return BLE_STATUS_TIMEOUT;
 8007172:	23ff      	movs	r3, #255	; 0xff
 8007174:	e002      	b.n	800717c <aci_gap_start_general_discovery_proc+0xe6>
  return status;
 8007176:	f107 030f 	add.w	r3, r7, #15
 800717a:	781b      	ldrb	r3, [r3, #0]
}
 800717c:	4618      	mov	r0, r3
 800717e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007182:	46bd      	mov	sp, r7
 8007184:	bdb0      	pop	{r4, r5, r7, pc}

08007186 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8007186:	b590      	push	{r4, r7, lr}
 8007188:	b0cf      	sub	sp, #316	; 0x13c
 800718a:	af00      	add	r7, sp, #0
 800718c:	4604      	mov	r4, r0
 800718e:	4608      	mov	r0, r1
 8007190:	4611      	mov	r1, r2
 8007192:	1d3a      	adds	r2, r7, #4
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f107 030e 	add.w	r3, r7, #14
 800719a:	4622      	mov	r2, r4
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	4602      	mov	r2, r0
 80071a4:	801a      	strh	r2, [r3, #0]
 80071a6:	f107 030b 	add.w	r3, r7, #11
 80071aa:	460a      	mov	r2, r1
 80071ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 80071ae:	f107 0318 	add.w	r3, r7, #24
 80071b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80071b6:	f107 0317 	add.w	r3, r7, #23
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 80071c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071c8:	f107 020e 	add.w	r2, r7, #14
 80071cc:	8812      	ldrh	r2, [r2, #0]
 80071ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80071d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071d4:	3302      	adds	r3, #2
 80071d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 80071da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071de:	f107 020c 	add.w	r2, r7, #12
 80071e2:	8812      	ldrh	r2, [r2, #0]
 80071e4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80071e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071ea:	3302      	adds	r3, #2
 80071ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 80071f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071f4:	f107 020b 	add.w	r2, r7, #11
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80071fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007200:	3301      	adds	r3, #1
 8007202:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8007206:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800720a:	1d58      	adds	r0, r3, #5
 800720c:	1d3b      	adds	r3, r7, #4
 800720e:	2206      	movs	r2, #6
 8007210:	6819      	ldr	r1, [r3, #0]
 8007212:	f000 fe79 	bl	8007f08 <Osal_MemCpy>
  index_input += 6;
 8007216:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800721a:	3306      	adds	r3, #6
 800721c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8007220:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007224:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007228:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800722a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007234:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007238:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800723c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800723e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007242:	3302      	adds	r3, #2
 8007244:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007248:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800724c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 8007250:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 8007252:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007256:	3302      	adds	r3, #2
 8007258:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 800725c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007260:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 8007264:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 8007266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800726a:	3302      	adds	r3, #2
 800726c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 8007270:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007274:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 8007278:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800727a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800727e:	3302      	adds	r3, #2
 8007280:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8007284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007288:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800728c:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800728e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007292:	3302      	adds	r3, #2
 8007294:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8007298:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800729c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80072a0:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80072a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072a6:	3302      	adds	r3, #2
 80072a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80072ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072b0:	2218      	movs	r2, #24
 80072b2:	2100      	movs	r1, #0
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fe37 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80072ba:	233f      	movs	r3, #63	; 0x3f
 80072bc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 80072c0:	239c      	movs	r3, #156	; 0x9c
 80072c2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 80072c6:	230f      	movs	r3, #15
 80072c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 80072cc:	f107 0318 	add.w	r3, r7, #24
 80072d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80072d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 80072dc:	f107 0317 	add.w	r3, r7, #23
 80072e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 f9fb 	bl	80086ec <hci_send_req>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da01      	bge.n	8007300 <aci_gap_create_connection+0x17a>
    return BLE_STATUS_TIMEOUT;
 80072fc:	23ff      	movs	r3, #255	; 0xff
 80072fe:	e002      	b.n	8007306 <aci_gap_create_connection+0x180>
  return status;
 8007300:	f107 0317 	add.w	r3, r7, #23
 8007304:	781b      	ldrb	r3, [r3, #0]
}
 8007306:	4618      	mov	r0, r3
 8007308:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800730c:	46bd      	mov	sp, r7
 800730e:	bd90      	pop	{r4, r7, pc}

08007310 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800731a:	f107 0308 	add.w	r3, r7, #8
 800731e:	2218      	movs	r2, #24
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fe00 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007328:	233f      	movs	r3, #63	; 0x3f
 800732a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800732c:	f240 1301 	movw	r3, #257	; 0x101
 8007330:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007332:	1dfb      	adds	r3, r7, #7
 8007334:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007336:	2301      	movs	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	2100      	movs	r1, #0
 8007340:	4618      	mov	r0, r3
 8007342:	f001 f9d3 	bl	80086ec <hci_send_req>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	da01      	bge.n	8007350 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800734c:	23ff      	movs	r3, #255	; 0xff
 800734e:	e000      	b.n	8007352 <aci_gatt_init+0x42>
  return status;
 8007350:	79fb      	ldrb	r3, [r7, #7]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800735a:	b590      	push	{r4, r7, lr}
 800735c:	b0cf      	sub	sp, #316	; 0x13c
 800735e:	af00      	add	r7, sp, #0
 8007360:	4604      	mov	r4, r0
 8007362:	4638      	mov	r0, r7
 8007364:	6001      	str	r1, [r0, #0]
 8007366:	4610      	mov	r0, r2
 8007368:	4619      	mov	r1, r3
 800736a:	1dfb      	adds	r3, r7, #7
 800736c:	4622      	mov	r2, r4
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	1dbb      	adds	r3, r7, #6
 8007372:	4602      	mov	r2, r0
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	1d7b      	adds	r3, r7, #5
 8007378:	460a      	mov	r2, r1
 800737a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800737c:	f107 0310 	add.w	r3, r7, #16
 8007380:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007384:	1dfb      	adds	r3, r7, #7
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d007      	beq.n	800739c <aci_gatt_add_service+0x42>
 800738c:	1dfb      	adds	r3, r7, #7
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d101      	bne.n	8007398 <aci_gatt_add_service+0x3e>
 8007394:	2311      	movs	r3, #17
 8007396:	e002      	b.n	800739e <aci_gatt_add_service+0x44>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <aci_gatt_add_service+0x44>
 800739c:	2303      	movs	r3, #3
 800739e:	f107 0210 	add.w	r2, r7, #16
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	2203      	movs	r2, #3
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 fdb9 	bl	8007f28 <Osal_MemSet>
  int index_input = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80073bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073c0:	1dfa      	adds	r2, r7, #7
 80073c2:	7812      	ldrb	r2, [r2, #0]
 80073c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ca:	3301      	adds	r3, #1
 80073cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80073d0:	1dfb      	adds	r3, r7, #7
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d002      	beq.n	80073de <aci_gatt_add_service+0x84>
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d004      	beq.n	80073e6 <aci_gatt_add_service+0x8c>
 80073dc:	e007      	b.n	80073ee <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80073de:	2302      	movs	r3, #2
 80073e0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80073e4:	e005      	b.n	80073f2 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80073e6:	2310      	movs	r3, #16
 80073e8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80073ec:	e001      	b.n	80073f2 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80073ee:	2347      	movs	r3, #71	; 0x47
 80073f0:	e05d      	b.n	80074ae <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80073f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073f6:	1c58      	adds	r0, r3, #1
 80073f8:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80073fc:	463b      	mov	r3, r7
 80073fe:	6819      	ldr	r1, [r3, #0]
 8007400:	f000 fd82 	bl	8007f08 <Osal_MemCpy>
    index_input += size;
 8007404:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007408:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800740c:	4413      	add	r3, r2
 800740e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007416:	1dba      	adds	r2, r7, #6
 8007418:	7812      	ldrb	r2, [r2, #0]
 800741a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800741c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007426:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800742a:	1d7a      	adds	r2, r7, #5
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800743a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800743e:	2218      	movs	r2, #24
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fd70 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007448:	233f      	movs	r3, #63	; 0x3f
 800744a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800744e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007452:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800745e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007462:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007466:	f107 030c 	add.w	r3, r7, #12
 800746a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800746e:	2303      	movs	r3, #3
 8007470:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007474:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f001 f936 	bl	80086ec <hci_send_req>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	da01      	bge.n	800748a <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	e011      	b.n	80074ae <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800748a:	f107 030c 	add.w	r3, r7, #12
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <aci_gatt_add_service+0x142>
    return resp.Status;
 8007494:	f107 030c 	add.w	r3, r7, #12
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	e008      	b.n	80074ae <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80074aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd90      	pop	{r4, r7, pc}

080074b8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80074b8:	b590      	push	{r4, r7, lr}
 80074ba:	b0d1      	sub	sp, #324	; 0x144
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4604      	mov	r4, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	f107 0108 	add.w	r1, r7, #8
 80074c6:	600a      	str	r2, [r1, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	f107 030e 	add.w	r3, r7, #14
 80074ce:	4622      	mov	r2, r4
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	f107 030d 	add.w	r3, r7, #13
 80074d6:	4602      	mov	r2, r0
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	1dbb      	adds	r3, r7, #6
 80074dc:	460a      	mov	r2, r1
 80074de:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80074e0:	f107 0318 	add.w	r3, r7, #24
 80074e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80074e8:	f107 030d 	add.w	r3, r7, #13
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d008      	beq.n	8007504 <aci_gatt_add_char+0x4c>
 80074f2:	f107 030d 	add.w	r3, r7, #13
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d101      	bne.n	8007500 <aci_gatt_add_char+0x48>
 80074fc:	2313      	movs	r3, #19
 80074fe:	e002      	b.n	8007506 <aci_gatt_add_char+0x4e>
 8007500:	2303      	movs	r3, #3
 8007502:	e000      	b.n	8007506 <aci_gatt_add_char+0x4e>
 8007504:	2305      	movs	r3, #5
 8007506:	f107 0218 	add.w	r2, r7, #24
 800750a:	4413      	add	r3, r2
 800750c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	2203      	movs	r2, #3
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fd05 	bl	8007f28 <Osal_MemSet>
  int index_input = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007524:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007528:	f107 020e 	add.w	r2, r7, #14
 800752c:	8812      	ldrh	r2, [r2, #0]
 800752e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007530:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007534:	3302      	adds	r3, #2
 8007536:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800753a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800753e:	f107 020d 	add.w	r2, r7, #13
 8007542:	7812      	ldrb	r2, [r2, #0]
 8007544:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007546:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800754a:	3301      	adds	r3, #1
 800754c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007550:	f107 030d 	add.w	r3, r7, #13
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d002      	beq.n	8007560 <aci_gatt_add_char+0xa8>
 800755a:	2b02      	cmp	r3, #2
 800755c:	d004      	beq.n	8007568 <aci_gatt_add_char+0xb0>
 800755e:	e007      	b.n	8007570 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007560:	2302      	movs	r3, #2
 8007562:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007566:	e005      	b.n	8007574 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007568:	2310      	movs	r3, #16
 800756a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800756e:	e001      	b.n	8007574 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8007570:	2347      	movs	r3, #71	; 0x47
 8007572:	e086      	b.n	8007682 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007574:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007578:	1cd8      	adds	r0, r3, #3
 800757a:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	6819      	ldr	r1, [r3, #0]
 8007584:	f000 fcc0 	bl	8007f08 <Osal_MemCpy>
    index_input += size;
 8007588:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800758c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007590:	4413      	add	r3, r2
 8007592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800759a:	1dba      	adds	r2, r7, #6
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80075a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075a4:	3302      	adds	r3, #2
 80075a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80075aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ae:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80075b2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80075b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075b8:	3301      	adds	r3, #1
 80075ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80075be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075c2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80075c6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80075c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075cc:	3301      	adds	r3, #1
 80075ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80075d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075d6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80075da:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80075dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075e0:	3301      	adds	r3, #1
 80075e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80075e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075ea:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80075ee:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80075f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075f4:	3301      	adds	r3, #1
 80075f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80075fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80075fe:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007602:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007604:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007608:	3301      	adds	r3, #1
 800760a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800760e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007612:	2218      	movs	r2, #24
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fc86 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800761c:	233f      	movs	r3, #63	; 0x3f
 800761e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007622:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007626:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007632:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007642:	2303      	movs	r3, #3
 8007644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007648:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f001 f84c 	bl	80086ec <hci_send_req>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	da01      	bge.n	800765e <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800765a:	23ff      	movs	r3, #255	; 0xff
 800765c:	e011      	b.n	8007682 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800765e:	f107 0314 	add.w	r3, r7, #20
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007668:	f107 0314 	add.w	r3, r7, #20
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	e008      	b.n	8007682 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007678:	b29a      	uxth	r2, r3
 800767a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800767e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007688:	46bd      	mov	sp, r7
 800768a:	bd90      	pop	{r4, r7, pc}

0800768c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800768c:	b5b0      	push	{r4, r5, r7, lr}
 800768e:	b0cc      	sub	sp, #304	; 0x130
 8007690:	af00      	add	r7, sp, #0
 8007692:	4605      	mov	r5, r0
 8007694:	460c      	mov	r4, r1
 8007696:	4610      	mov	r0, r2
 8007698:	4619      	mov	r1, r3
 800769a:	1dbb      	adds	r3, r7, #6
 800769c:	462a      	mov	r2, r5
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	4622      	mov	r2, r4
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	1cfb      	adds	r3, r7, #3
 80076a8:	4602      	mov	r2, r0
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	1cbb      	adds	r3, r7, #2
 80076ae:	460a      	mov	r2, r1
 80076b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80076b2:	f107 0310 	add.w	r3, r7, #16
 80076b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076ba:	f107 030f 	add.w	r3, r7, #15
 80076be:	2200      	movs	r2, #0
 80076c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80076c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076cc:	1dba      	adds	r2, r7, #6
 80076ce:	8812      	ldrh	r2, [r2, #0]
 80076d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d6:	3302      	adds	r3, #2
 80076d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80076dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e0:	1d3a      	adds	r2, r7, #4
 80076e2:	8812      	ldrh	r2, [r2, #0]
 80076e4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80076e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ea:	3302      	adds	r3, #2
 80076ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80076f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f4:	1cfa      	adds	r2, r7, #3
 80076f6:	7812      	ldrb	r2, [r2, #0]
 80076f8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80076fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076fe:	3301      	adds	r3, #1
 8007700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	1cba      	adds	r2, r7, #2
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800770e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007712:	3301      	adds	r3, #1
 8007714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771c:	1d98      	adds	r0, r3, #6
 800771e:	1cbb      	adds	r3, r7, #2
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007728:	f000 fbee 	bl	8007f08 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800772c:	1cbb      	adds	r3, r7, #2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007734:	4413      	add	r3, r2
 8007736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800773a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800773e:	2218      	movs	r2, #24
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fbf0 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007748:	233f      	movs	r3, #63	; 0x3f
 800774a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800774e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007752:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007756:	f107 0310 	add.w	r3, r7, #16
 800775a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800775e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007762:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007766:	f107 030f 	add.w	r3, r7, #15
 800776a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f000 ffb6 	bl	80086ec <hci_send_req>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	da01      	bge.n	800778a <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007786:	23ff      	movs	r3, #255	; 0xff
 8007788:	e002      	b.n	8007790 <aci_gatt_update_char_value+0x104>
  return status;
 800778a:	f107 030f 	add.w	r3, r7, #15
 800778e:	781b      	ldrb	r3, [r3, #0]
}
 8007790:	4618      	mov	r0, r3
 8007792:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007796:	46bd      	mov	sp, r7
 8007798:	bdb0      	pop	{r4, r5, r7, pc}

0800779a <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b0cc      	sub	sp, #304	; 0x130
 800779e:	af00      	add	r7, sp, #0
 80077a0:	4602      	mov	r2, r0
 80077a2:	1dbb      	adds	r3, r7, #6
 80077a4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 80077a6:	f107 0310 	add.w	r3, r7, #16
 80077aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80077ae:	f107 030f 	add.w	r3, r7, #15
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80077bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c0:	1dba      	adds	r2, r7, #6
 80077c2:	8812      	ldrh	r2, [r2, #0]
 80077c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80077c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ca:	3302      	adds	r3, #2
 80077cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077d4:	2218      	movs	r2, #24
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fba5 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077de:	233f      	movs	r3, #63	; 0x3f
 80077e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 80077e4:	f44f 7389 	mov.w	r3, #274	; 0x112
 80077e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80077ec:	230f      	movs	r3, #15
 80077ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80077f2:	f107 0310 	add.w	r3, r7, #16
 80077f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007802:	f107 030f 	add.w	r3, r7, #15
 8007806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007814:	2100      	movs	r1, #0
 8007816:	4618      	mov	r0, r3
 8007818:	f000 ff68 	bl	80086ec <hci_send_req>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	da01      	bge.n	8007826 <aci_gatt_disc_all_primary_services+0x8c>
    return BLE_STATUS_TIMEOUT;
 8007822:	23ff      	movs	r3, #255	; 0xff
 8007824:	e002      	b.n	800782c <aci_gatt_disc_all_primary_services+0x92>
  return status;
 8007826:	f107 030f 	add.w	r3, r7, #15
 800782a:	781b      	ldrb	r3, [r3, #0]
}
 800782c:	4618      	mov	r0, r3
 800782e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 8007836:	b590      	push	{r4, r7, lr}
 8007838:	b0cd      	sub	sp, #308	; 0x134
 800783a:	af00      	add	r7, sp, #0
 800783c:	4604      	mov	r4, r0
 800783e:	4608      	mov	r0, r1
 8007840:	4611      	mov	r1, r2
 8007842:	1dbb      	adds	r3, r7, #6
 8007844:	4622      	mov	r2, r4
 8007846:	801a      	strh	r2, [r3, #0]
 8007848:	1d3b      	adds	r3, r7, #4
 800784a:	4602      	mov	r2, r0
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	1cbb      	adds	r3, r7, #2
 8007850:	460a      	mov	r2, r1
 8007852:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800785c:	f107 030f 	add.w	r3, r7, #15
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800786a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786e:	1dba      	adds	r2, r7, #6
 8007870:	8812      	ldrh	r2, [r2, #0]
 8007872:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007874:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007878:	3302      	adds	r3, #2
 800787a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	1d3a      	adds	r2, r7, #4
 8007884:	8812      	ldrh	r2, [r2, #0]
 8007886:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800788c:	3302      	adds	r3, #2
 800788e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 8007892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007896:	1cba      	adds	r2, r7, #2
 8007898:	8812      	ldrh	r2, [r2, #0]
 800789a:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800789c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a0:	3302      	adds	r3, #2
 80078a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078aa:	2218      	movs	r2, #24
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 fb3a 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80078b4:	233f      	movs	r3, #63	; 0x3f
 80078b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 80078ba:	f240 1315 	movw	r3, #277	; 0x115
 80078be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80078c2:	230f      	movs	r3, #15
 80078c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80078c8:	f107 0310 	add.w	r3, r7, #16
 80078cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80078d8:	f107 030f 	add.w	r3, r7, #15
 80078dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80078e0:	2301      	movs	r3, #1
 80078e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fefd 	bl	80086ec <hci_send_req>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da01      	bge.n	80078fc <aci_gatt_disc_all_char_of_service+0xc6>
    return BLE_STATUS_TIMEOUT;
 80078f8:	23ff      	movs	r3, #255	; 0xff
 80078fa:	e002      	b.n	8007902 <aci_gatt_disc_all_char_of_service+0xcc>
  return status;
 80078fc:	f107 030f 	add.w	r3, r7, #15
 8007900:	781b      	ldrb	r3, [r3, #0]
}
 8007902:	4618      	mov	r0, r3
 8007904:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007908:	46bd      	mov	sp, r7
 800790a:	bd90      	pop	{r4, r7, pc}

0800790c <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b0cd      	sub	sp, #308	; 0x134
 8007910:	af00      	add	r7, sp, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	1dbb      	adds	r3, r7, #6
 800791a:	4622      	mov	r2, r4
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	1d3b      	adds	r3, r7, #4
 8007920:	4602      	mov	r2, r0
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	1cbb      	adds	r3, r7, #2
 8007926:	460a      	mov	r2, r1
 8007928:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800792a:	f107 0310 	add.w	r3, r7, #16
 800792e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007932:	f107 030f 	add.w	r3, r7, #15
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	1dba      	adds	r2, r7, #6
 8007946:	8812      	ldrh	r2, [r2, #0]
 8007948:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800794a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800794e:	3302      	adds	r3, #2
 8007950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007958:	1d3a      	adds	r2, r7, #4
 800795a:	8812      	ldrh	r2, [r2, #0]
 800795c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800795e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007962:	3302      	adds	r3, #2
 8007964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796c:	1cba      	adds	r2, r7, #2
 800796e:	8812      	ldrh	r2, [r2, #0]
 8007970:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007976:	3302      	adds	r3, #2
 8007978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800797c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007980:	2218      	movs	r2, #24
 8007982:	2100      	movs	r1, #0
 8007984:	4618      	mov	r0, r3
 8007986:	f000 facf 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800798a:	233f      	movs	r3, #63	; 0x3f
 800798c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 8007990:	f240 1317 	movw	r3, #279	; 0x117
 8007994:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8007998:	230f      	movs	r3, #15
 800799a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800799e:	f107 0310 	add.w	r3, r7, #16
 80079a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079ae:	f107 030f 	add.w	r3, r7, #15
 80079b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fe92 	bl	80086ec <hci_send_req>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da01      	bge.n	80079d2 <aci_gatt_disc_all_char_desc+0xc6>
    return BLE_STATUS_TIMEOUT;
 80079ce:	23ff      	movs	r3, #255	; 0xff
 80079d0:	e002      	b.n	80079d8 <aci_gatt_disc_all_char_desc+0xcc>
  return status;
 80079d2:	f107 030f 	add.w	r3, r7, #15
 80079d6:	781b      	ldrb	r3, [r3, #0]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd90      	pop	{r4, r7, pc}

080079e2 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 80079e2:	b590      	push	{r4, r7, lr}
 80079e4:	b0cf      	sub	sp, #316	; 0x13c
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	4604      	mov	r4, r0
 80079ea:	4608      	mov	r0, r1
 80079ec:	4611      	mov	r1, r2
 80079ee:	1d3a      	adds	r2, r7, #4
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	f107 030e 	add.w	r3, r7, #14
 80079f6:	4622      	mov	r2, r4
 80079f8:	801a      	strh	r2, [r3, #0]
 80079fa:	f107 030c 	add.w	r3, r7, #12
 80079fe:	4602      	mov	r2, r0
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	f107 030b 	add.w	r3, r7, #11
 8007a06:	460a      	mov	r2, r1
 8007a08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 8007a0a:	f107 0318 	add.w	r3, r7, #24
 8007a0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8007a12:	f107 0317 	add.w	r3, r7, #23
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007a20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a24:	f107 020e 	add.w	r2, r7, #14
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a30:	3302      	adds	r3, #2
 8007a32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8007a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a3a:	f107 020c 	add.w	r2, r7, #12
 8007a3e:	8812      	ldrh	r2, [r2, #0]
 8007a40:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007a42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a46:	3302      	adds	r3, #2
 8007a48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8007a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a50:	f107 020b 	add.w	r2, r7, #11
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8007a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a66:	1d58      	adds	r0, r3, #5
 8007a68:	f107 030b 	add.w	r3, r7, #11
 8007a6c:	781a      	ldrb	r2, [r3, #0]
 8007a6e:	1d3b      	adds	r3, r7, #4
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	f000 fa49 	bl	8007f08 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8007a76:	f107 030b 	add.w	r3, r7, #11
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a86:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a8a:	2218      	movs	r2, #24
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fa4a 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a94:	233f      	movs	r3, #63	; 0x3f
 8007a96:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 8007a9a:	f240 1321 	movw	r3, #289	; 0x121
 8007a9e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8007aa8:	f107 0318 	add.w	r3, r7, #24
 8007aac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007ab0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ab4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8007ab8:	f107 0317 	add.w	r3, r7, #23
 8007abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ac6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007aca:	2100      	movs	r1, #0
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fe0d 	bl	80086ec <hci_send_req>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da01      	bge.n	8007adc <aci_gatt_write_char_desc+0xfa>
    return BLE_STATUS_TIMEOUT;
 8007ad8:	23ff      	movs	r3, #255	; 0xff
 8007ada:	e002      	b.n	8007ae2 <aci_gatt_write_char_desc+0x100>
  return status;
 8007adc:	f107 0317 	add.w	r3, r7, #23
 8007ae0:	781b      	ldrb	r3, [r3, #0]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd90      	pop	{r4, r7, pc}

08007aec <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 8007aec:	b590      	push	{r4, r7, lr}
 8007aee:	b0cf      	sub	sp, #316	; 0x13c
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4604      	mov	r4, r0
 8007af4:	4608      	mov	r0, r1
 8007af6:	4611      	mov	r1, r2
 8007af8:	1d3a      	adds	r2, r7, #4
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	f107 030e 	add.w	r3, r7, #14
 8007b00:	4622      	mov	r2, r4
 8007b02:	801a      	strh	r2, [r3, #0]
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	4602      	mov	r2, r0
 8007b0a:	801a      	strh	r2, [r3, #0]
 8007b0c:	f107 030b 	add.w	r3, r7, #11
 8007b10:	460a      	mov	r2, r1
 8007b12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 8007b14:	f107 0318 	add.w	r3, r7, #24
 8007b18:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8007b1c:	f107 0317 	add.w	r3, r7, #23
 8007b20:	2200      	movs	r2, #0
 8007b22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b2e:	f107 020e 	add.w	r2, r7, #14
 8007b32:	8812      	ldrh	r2, [r2, #0]
 8007b34:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 8007b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b44:	f107 020c 	add.w	r2, r7, #12
 8007b48:	8812      	ldrh	r2, [r2, #0]
 8007b4a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007b4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b50:	3302      	adds	r3, #2
 8007b52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 8007b56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5a:	f107 020b 	add.w	r2, r7, #11
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b66:	3301      	adds	r3, #1
 8007b68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 8007b6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b70:	1d58      	adds	r0, r3, #5
 8007b72:	f107 030b 	add.w	r3, r7, #11
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	1d3b      	adds	r3, r7, #4
 8007b7a:	6819      	ldr	r1, [r3, #0]
 8007b7c:	f000 f9c4 	bl	8007f08 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 8007b80:	f107 030b 	add.w	r3, r7, #11
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b94:	2218      	movs	r2, #24
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f9c5 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b9e:	233f      	movs	r3, #63	; 0x3f
 8007ba0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 8007ba4:	f240 1323 	movw	r3, #291	; 0x123
 8007ba8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007bac:	f107 0318 	add.w	r3, r7, #24
 8007bb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007bb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8007bbc:	f107 0317 	add.w	r3, r7, #23
 8007bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007bce:	2100      	movs	r1, #0
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 fd8b 	bl	80086ec <hci_send_req>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	da01      	bge.n	8007be0 <aci_gatt_write_without_resp+0xf4>
    return BLE_STATUS_TIMEOUT;
 8007bdc:	23ff      	movs	r3, #255	; 0xff
 8007bde:	e002      	b.n	8007be6 <aci_gatt_write_without_resp+0xfa>
  return status;
 8007be0:	f107 0317 	add.w	r3, r7, #23
 8007be4:	781b      	ldrb	r3, [r3, #0]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd90      	pop	{r4, r7, pc}

08007bf0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b0cc      	sub	sp, #304	; 0x130
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	463b      	mov	r3, r7
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	1dfb      	adds	r3, r7, #7
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	701a      	strb	r2, [r3, #0]
 8007c00:	1dbb      	adds	r3, r7, #6
 8007c02:	460a      	mov	r2, r1
 8007c04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007c06:	f107 0310 	add.w	r3, r7, #16
 8007c0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c0e:	f107 030f 	add.w	r3, r7, #15
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c20:	1dfa      	adds	r2, r7, #7
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c34:	1dba      	adds	r2, r7, #6
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c3e:	3301      	adds	r3, #1
 8007c40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c48:	1c98      	adds	r0, r3, #2
 8007c4a:	1dbb      	adds	r3, r7, #6
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	463b      	mov	r3, r7
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	f000 f959 	bl	8007f08 <Osal_MemCpy>
  index_input += Length;
 8007c56:	1dbb      	adds	r3, r7, #6
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c5e:	4413      	add	r3, r2
 8007c60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c68:	2218      	movs	r2, #24
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 f95b 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c72:	233f      	movs	r3, #63	; 0x3f
 8007c74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007c78:	230c      	movs	r3, #12
 8007c7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c7e:	f107 0310 	add.w	r3, r7, #16
 8007c82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c8e:	f107 030f 	add.w	r3, r7, #15
 8007c92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c96:	2301      	movs	r3, #1
 8007c98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fd22 	bl	80086ec <hci_send_req>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da01      	bge.n	8007cb2 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007cae:	23ff      	movs	r3, #255	; 0xff
 8007cb0:	e002      	b.n	8007cb8 <aci_hal_write_config_data+0xc8>
  return status;
 8007cb2:	f107 030f 	add.w	r3, r7, #15
 8007cb6:	781b      	ldrb	r3, [r3, #0]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b0cc      	sub	sp, #304	; 0x130
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	4602      	mov	r2, r0
 8007cca:	1dfb      	adds	r3, r7, #7
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	1dbb      	adds	r3, r7, #6
 8007cd0:	460a      	mov	r2, r1
 8007cd2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007cd4:	f107 0310 	add.w	r3, r7, #16
 8007cd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cdc:	f107 030f 	add.w	r3, r7, #15
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	1dfa      	adds	r2, r7, #7
 8007cf0:	7812      	ldrb	r2, [r2, #0]
 8007cf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d02:	1dba      	adds	r2, r7, #6
 8007d04:	7812      	ldrb	r2, [r2, #0]
 8007d06:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d16:	2218      	movs	r2, #24
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 f904 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d20:	233f      	movs	r3, #63	; 0x3f
 8007d22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007d26:	230f      	movs	r3, #15
 8007d28:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d2c:	f107 0310 	add.w	r3, r7, #16
 8007d30:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d3c:	f107 030f 	add.w	r3, r7, #15
 8007d40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d44:	2301      	movs	r3, #1
 8007d46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fccb 	bl	80086ec <hci_send_req>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da01      	bge.n	8007d60 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007d5c:	23ff      	movs	r3, #255	; 0xff
 8007d5e:	e002      	b.n	8007d66 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007d60:	f107 030f 	add.w	r3, r7, #15
 8007d64:	781b      	ldrb	r3, [r3, #0]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b088      	sub	sp, #32
 8007d74:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	2218      	movs	r2, #24
 8007d80:	2100      	movs	r1, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f8d0 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x03;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007d90:	1dfb      	adds	r3, r7, #7
 8007d92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007d94:	2301      	movs	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d98:	f107 0308 	add.w	r3, r7, #8
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fca4 	bl	80086ec <hci_send_req>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	da01      	bge.n	8007dae <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007daa:	23ff      	movs	r3, #255	; 0xff
 8007dac:	e000      	b.n	8007db0 <hci_reset+0x40>
  return status;
 8007dae:	79fb      	ldrb	r3, [r7, #7]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8007db8:	b5b0      	push	{r4, r5, r7, lr}
 8007dba:	b0cc      	sub	sp, #304	; 0x130
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	1dbb      	adds	r3, r7, #6
 8007dc8:	462a      	mov	r2, r5
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	1d3b      	adds	r3, r7, #4
 8007dce:	4622      	mov	r2, r4
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	1cbb      	adds	r3, r7, #2
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	801a      	strh	r2, [r3, #0]
 8007dd8:	463b      	mov	r3, r7
 8007dda:	460a      	mov	r2, r1
 8007ddc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8007dde:	f107 0310 	add.w	r3, r7, #16
 8007de2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007de6:	f107 030f 	add.w	r3, r7, #15
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	1dba      	adds	r2, r7, #6
 8007dfa:	8812      	ldrh	r2, [r2, #0]
 8007dfc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e02:	3302      	adds	r3, #2
 8007e04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0c:	1d3a      	adds	r2, r7, #4
 8007e0e:	8812      	ldrh	r2, [r2, #0]
 8007e10:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e16:	3302      	adds	r3, #2
 8007e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e20:	1cba      	adds	r2, r7, #2
 8007e22:	8812      	ldrh	r2, [r2, #0]
 8007e24:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007e26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8007e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e34:	463a      	mov	r2, r7
 8007e36:	8812      	ldrh	r2, [r2, #0]
 8007e38:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8007e3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e3e:	3302      	adds	r3, #2
 8007e40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8007e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e48:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8007e4c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8007e4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e52:	3302      	adds	r3, #2
 8007e54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8007e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5c:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8007e60:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8007e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e66:	3302      	adds	r3, #2
 8007e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8007e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e70:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8007e74:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8007e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e7a:	3302      	adds	r3, #2
 8007e7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8007e80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e84:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007e88:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8007e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8007e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e98:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007e9c:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8007e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eac:	2218      	movs	r2, #24
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f839 	bl	8007f28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007eb6:	233f      	movs	r3, #63	; 0x3f
 8007eb8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8007ebc:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8007ec0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ed0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ed4:	f107 030f 	add.w	r3, r7, #15
 8007ed8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fbff 	bl	80086ec <hci_send_req>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da01      	bge.n	8007ef8 <aci_l2cap_connection_parameter_update_resp+0x140>
    return BLE_STATUS_TIMEOUT;
 8007ef4:	23ff      	movs	r3, #255	; 0xff
 8007ef6:	e002      	b.n	8007efe <aci_l2cap_connection_parameter_update_resp+0x146>
  return status;
 8007ef8:	f107 030f 	add.w	r3, r7, #15
 8007efc:	781b      	ldrb	r3, [r3, #0]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bdb0      	pop	{r4, r5, r7, pc}

08007f08 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f003 fdc1 	bl	800baa0 <memcpy>
 8007f1e:	4603      	mov	r3, r0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f003 fdbf 	bl	800babc <memset>
 8007f3e:	4603      	mov	r3, r0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <EndDeviceManagement_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t EndDeviceManagement_Event_Handler(void *Event)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  EDS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2bff      	cmp	r3, #255	; 0xff
 8007f62:	d133      	bne.n	8007fcc <EndDeviceManagement_Event_Handler+0x84>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	3302      	adds	r3, #2
 8007f68:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	f640 4301 	movw	r3, #3073	; 0xc01
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d124      	bne.n	8007fc4 <EndDeviceManagement_Event_Handler+0x7c>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	3302      	adds	r3, #2
 8007f7e:	61bb      	str	r3, [r7, #24]
          
            if(attribute_modified->Attr_Handle == (aEndDeviceManagementContext.EndDeviceStatusCharHdle + 2))
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	885b      	ldrh	r3, [r3, #2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <EndDeviceManagement_Event_Handler+0x94>)
 8007f8a:	885b      	ldrh	r3, [r3, #2]
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d11a      	bne.n	8007fc8 <EndDeviceManagement_Event_Handler+0x80>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	7a1b      	ldrb	r3, [r3, #8]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <EndDeviceManagement_Event_Handler+0x6c>
              {
               
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_ENABLED_EVT;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 8007fa8:	f107 0308 	add.w	r3, r7, #8
 8007fac:	4618      	mov	r0, r3
 8007fae:	f002 fbad 	bl	800a70c <EDS_STM_App_Notification>
            }
            
            
          
        }
        break;
 8007fb2:	e009      	b.n	8007fc8 <EndDeviceManagement_Event_Handler+0x80>
                Notification.EDS_Evt_Opcode = EDS_STM_NOTIFY_DISABLED_EVT;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	723b      	strb	r3, [r7, #8]
                EDS_STM_App_Notification(&Notification);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f002 fba5 	bl	800a70c <EDS_STM_App_Notification>
        break;
 8007fc2:	e001      	b.n	8007fc8 <EndDeviceManagement_Event_Handler+0x80>

        default:
          break;
 8007fc4:	bf00      	nop
 8007fc6:	e002      	b.n	8007fce <EndDeviceManagement_Event_Handler+0x86>
        break;
 8007fc8:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007fca:	e000      	b.n	8007fce <EndDeviceManagement_Event_Handler+0x86>

    default:
      break;
 8007fcc:	bf00      	nop
  }

  return(return_value);
 8007fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3728      	adds	r7, #40	; 0x28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	200000cc 	.word	0x200000cc

08007fe0 <EDS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void EDS_STM_Init(void)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(EndDeviceManagement_Event_Handler);
 8007fe6:	4831      	ldr	r0, [pc, #196]	; (80080ac <EDS_STM_Init+0xcc>)
 8007fe8:	f000 fa44 	bl	8008474 <SVCCTL_RegisterSvcHandler>
     * service_max_attribute_record = 1 for End Device Mgt service +
     *                                2 for End Device Staus characteristic +
     *                                1 for client char configuration descriptor 
     *                                
     */
    COPY_EDM_SERVICE_UUID(uuid16.Char_UUID_128);
 8007fec:	238f      	movs	r3, #143	; 0x8f
 8007fee:	703b      	strb	r3, [r7, #0]
 8007ff0:	23e5      	movs	r3, #229	; 0xe5
 8007ff2:	707b      	strb	r3, [r7, #1]
 8007ff4:	23b3      	movs	r3, #179	; 0xb3
 8007ff6:	70bb      	strb	r3, [r7, #2]
 8007ff8:	23d5      	movs	r3, #213	; 0xd5
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	232e      	movs	r3, #46	; 0x2e
 8007ffe:	713b      	strb	r3, [r7, #4]
 8008000:	237f      	movs	r3, #127	; 0x7f
 8008002:	717b      	strb	r3, [r7, #5]
 8008004:	234a      	movs	r3, #74	; 0x4a
 8008006:	71bb      	strb	r3, [r7, #6]
 8008008:	2398      	movs	r3, #152	; 0x98
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	232a      	movs	r3, #42	; 0x2a
 800800e:	723b      	strb	r3, [r7, #8]
 8008010:	2348      	movs	r3, #72	; 0x48
 8008012:	727b      	strb	r3, [r7, #9]
 8008014:	237a      	movs	r3, #122	; 0x7a
 8008016:	72bb      	strb	r3, [r7, #10]
 8008018:	23cc      	movs	r3, #204	; 0xcc
 800801a:	72fb      	strb	r3, [r7, #11]
 800801c:	2350      	movs	r3, #80	; 0x50
 800801e:	733b      	strb	r3, [r7, #12]
 8008020:	23fe      	movs	r3, #254	; 0xfe
 8008022:	737b      	strb	r3, [r7, #13]
 8008024:	2300      	movs	r3, #0
 8008026:	73bb      	strb	r3, [r7, #14]
 8008028:	2300      	movs	r3, #0
 800802a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800802c:	4639      	mov	r1, r7
 800802e:	4b20      	ldr	r3, [pc, #128]	; (80080b0 <EDS_STM_Init+0xd0>)
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	2305      	movs	r3, #5
 8008034:	2201      	movs	r2, #1
 8008036:	2002      	movs	r0, #2
 8008038:	f7ff f98f 	bl	800735a <aci_gatt_add_service>
                      &(aEndDeviceManagementContext.EndDeviceManagementSvcHdle));

    /**
     *  Add End Device Status Characteristic
     */
    COPY_EDM_STATUS_CHAR_UUID(uuid16.Char_UUID_128);
 800803c:	2319      	movs	r3, #25
 800803e:	703b      	strb	r3, [r7, #0]
 8008040:	23ed      	movs	r3, #237	; 0xed
 8008042:	707b      	strb	r3, [r7, #1]
 8008044:	2382      	movs	r3, #130	; 0x82
 8008046:	70bb      	strb	r3, [r7, #2]
 8008048:	23ae      	movs	r3, #174	; 0xae
 800804a:	70fb      	strb	r3, [r7, #3]
 800804c:	23ed      	movs	r3, #237	; 0xed
 800804e:	713b      	strb	r3, [r7, #4]
 8008050:	2321      	movs	r3, #33	; 0x21
 8008052:	717b      	strb	r3, [r7, #5]
 8008054:	234c      	movs	r3, #76	; 0x4c
 8008056:	71bb      	strb	r3, [r7, #6]
 8008058:	239d      	movs	r3, #157	; 0x9d
 800805a:	71fb      	strb	r3, [r7, #7]
 800805c:	2341      	movs	r3, #65	; 0x41
 800805e:	723b      	strb	r3, [r7, #8]
 8008060:	2345      	movs	r3, #69	; 0x45
 8008062:	727b      	strb	r3, [r7, #9]
 8008064:	2322      	movs	r3, #34	; 0x22
 8008066:	72bb      	strb	r3, [r7, #10]
 8008068:	238e      	movs	r3, #142	; 0x8e
 800806a:	72fb      	strb	r3, [r7, #11]
 800806c:	2351      	movs	r3, #81	; 0x51
 800806e:	733b      	strb	r3, [r7, #12]
 8008070:	23fe      	movs	r3, #254	; 0xfe
 8008072:	737b      	strb	r3, [r7, #13]
 8008074:	2300      	movs	r3, #0
 8008076:	73bb      	strb	r3, [r7, #14]
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <EDS_STM_Init+0xd0>)
 800807e:	8818      	ldrh	r0, [r3, #0]
 8008080:	463a      	mov	r2, r7
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <EDS_STM_Init+0xd4>)
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	2301      	movs	r3, #1
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	230a      	movs	r3, #10
 800808c:	9303      	str	r3, [sp, #12]
 800808e:	2300      	movs	r3, #0
 8008090:	9302      	str	r3, [sp, #8]
 8008092:	2300      	movs	r3, #0
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	2312      	movs	r3, #18
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2306      	movs	r3, #6
 800809c:	2102      	movs	r1, #2
 800809e:	f7ff fa0b 	bl	80074b8 <aci_gatt_add_char>
                      &(aEndDeviceManagementContext.EndDeviceStatusCharHdle));
    
     BLE_DBG_EDS_STM_MSG("-- End Device Managment Service (EDMS) is added Successfully %04X\n",
                 aEndDeviceManagementContext.EndDeviceManagementSvcHdle);

    return;
 80080a2:	bf00      	nop
}
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	08007f49 	.word	0x08007f49
 80080b0:	200000cc 	.word	0x200000cc
 80080b4:	200000ce 	.word	0x200000ce

080080b8 <EDS_STM_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus EDS_STM_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af02      	add	r7, sp, #8
 80080be:	4603      	mov	r3, r0
 80080c0:	6039      	str	r1, [r7, #0]
 80080c2:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80080c4:	2342      	movs	r3, #66	; 0x42
 80080c6:	73fb      	strb	r3, [r7, #15]
  
 
  switch(UUID)
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	f642 3260 	movw	r2, #11104	; 0x2b60
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d10c      	bne.n	80080ec <EDS_STM_Update_Char+0x34>
  {
    case END_DEVICE_STATUS_CHAR_UUID:
    
      result = aci_gatt_update_char_value(aEndDeviceManagementContext.EndDeviceManagementSvcHdle,
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <EDS_STM_Update_Char+0x40>)
 80080d4:	8818      	ldrh	r0, [r3, #0]
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <EDS_STM_Update_Char+0x40>)
 80080d8:	8859      	ldrh	r1, [r3, #2]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	2306      	movs	r3, #6
 80080e0:	2200      	movs	r2, #0
 80080e2:	f7ff fad3 	bl	800768c <aci_gatt_update_char_value>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
                             aEndDeviceManagementContext.EndDeviceStatusCharHdle,
                             0, /* charValOffset */
                             6, /* charValueLen */
                             (uint8_t *)  pPayload);
     
      break;
 80080ea:	e000      	b.n	80080ee <EDS_STM_Update_Char+0x36>

    default:
      break;
 80080ec:	bf00      	nop
  }

  return result;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}/* end BLE_SVC_LedButton_Update_Char() */
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	200000cc 	.word	0x200000cc

080080fc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08a      	sub	sp, #40	; 0x28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	3301      	adds	r3, #1
 800810e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2bff      	cmp	r3, #255	; 0xff
 8008116:	d14c      	bne.n	80081b2 <PeerToPeer_Event_Handler+0xb6>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	3302      	adds	r3, #2
 800811c:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	461a      	mov	r2, r3
 8008126:	f640 4301 	movw	r3, #3073	; 0xc01
 800812a:	429a      	cmp	r2, r3
 800812c:	d13d      	bne.n	80081aa <PeerToPeer_Event_Handler+0xae>
      {
        case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	3302      	adds	r3, #2
 8008132:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	885b      	ldrh	r3, [r3, #2]
 8008138:	b29b      	uxth	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <PeerToPeer_Event_Handler+0xc4>)
 800813e:	889b      	ldrh	r3, [r3, #4]
 8008140:	3302      	adds	r3, #2
 8008142:	429a      	cmp	r2, r3
 8008144:	d118      	bne.n	8008178 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	7a1b      	ldrb	r3, [r3, #8]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008158:	2300      	movs	r3, #0
 800815a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800815c:	f107 0308 	add.w	r3, r7, #8
 8008160:	4618      	mov	r0, r3
 8008162:	f002 faef 	bl	800a744 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8008166:	e022      	b.n	80081ae <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008168:	2301      	movs	r3, #1
 800816a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800816c:	f107 0308 	add.w	r3, r7, #8
 8008170:	4618      	mov	r0, r3
 8008172:	f002 fae7 	bl	800a744 <P2PS_STM_App_Notification>
        break;
 8008176:	e01a      	b.n	80081ae <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	885b      	ldrh	r3, [r3, #2]
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <PeerToPeer_Event_Handler+0xc4>)
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	3301      	adds	r3, #1
 8008186:	429a      	cmp	r2, r3
 8008188:	d111      	bne.n	80081ae <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800818a:	2303      	movs	r3, #3
 800818c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	88db      	ldrh	r3, [r3, #6]
 8008192:	b29b      	uxth	r3, r3
 8008194:	b2db      	uxtb	r3, r3
 8008196:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	3308      	adds	r3, #8
 800819c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800819e:	f107 0308 	add.w	r3, r7, #8
 80081a2:	4618      	mov	r0, r3
 80081a4:	f002 face 	bl	800a744 <P2PS_STM_App_Notification>
        break;
 80081a8:	e001      	b.n	80081ae <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80081aa:	bf00      	nop
 80081ac:	e002      	b.n	80081b4 <PeerToPeer_Event_Handler+0xb8>
        break;
 80081ae:	bf00      	nop
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 80081b0:	e000      	b.n	80081b4 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80081b2:	bf00      	nop
  }

  return(return_value);
 80081b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80081b8:	4618      	mov	r0, r3
 80081ba:	3728      	adds	r7, #40	; 0x28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	200000d0 	.word	0x200000d0

080081c4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80081ca:	484a      	ldr	r0, [pc, #296]	; (80082f4 <P2PS_STM_Init+0x130>)
 80081cc:	f000 f952 	bl	8008474 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80081d0:	238f      	movs	r3, #143	; 0x8f
 80081d2:	703b      	strb	r3, [r7, #0]
 80081d4:	23e5      	movs	r3, #229	; 0xe5
 80081d6:	707b      	strb	r3, [r7, #1]
 80081d8:	23b3      	movs	r3, #179	; 0xb3
 80081da:	70bb      	strb	r3, [r7, #2]
 80081dc:	23d5      	movs	r3, #213	; 0xd5
 80081de:	70fb      	strb	r3, [r7, #3]
 80081e0:	232e      	movs	r3, #46	; 0x2e
 80081e2:	713b      	strb	r3, [r7, #4]
 80081e4:	237f      	movs	r3, #127	; 0x7f
 80081e6:	717b      	strb	r3, [r7, #5]
 80081e8:	234a      	movs	r3, #74	; 0x4a
 80081ea:	71bb      	strb	r3, [r7, #6]
 80081ec:	2398      	movs	r3, #152	; 0x98
 80081ee:	71fb      	strb	r3, [r7, #7]
 80081f0:	232a      	movs	r3, #42	; 0x2a
 80081f2:	723b      	strb	r3, [r7, #8]
 80081f4:	2348      	movs	r3, #72	; 0x48
 80081f6:	727b      	strb	r3, [r7, #9]
 80081f8:	237a      	movs	r3, #122	; 0x7a
 80081fa:	72bb      	strb	r3, [r7, #10]
 80081fc:	23cc      	movs	r3, #204	; 0xcc
 80081fe:	72fb      	strb	r3, [r7, #11]
 8008200:	2340      	movs	r3, #64	; 0x40
 8008202:	733b      	strb	r3, [r7, #12]
 8008204:	23fe      	movs	r3, #254	; 0xfe
 8008206:	737b      	strb	r3, [r7, #13]
 8008208:	2300      	movs	r3, #0
 800820a:	73bb      	strb	r3, [r7, #14]
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008210:	4639      	mov	r1, r7
 8008212:	4b39      	ldr	r3, [pc, #228]	; (80082f8 <P2PS_STM_Init+0x134>)
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	2308      	movs	r3, #8
 8008218:	2201      	movs	r2, #1
 800821a:	2002      	movs	r0, #2
 800821c:	f7ff f89d 	bl	800735a <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008220:	2319      	movs	r3, #25
 8008222:	703b      	strb	r3, [r7, #0]
 8008224:	23ed      	movs	r3, #237	; 0xed
 8008226:	707b      	strb	r3, [r7, #1]
 8008228:	2382      	movs	r3, #130	; 0x82
 800822a:	70bb      	strb	r3, [r7, #2]
 800822c:	23ae      	movs	r3, #174	; 0xae
 800822e:	70fb      	strb	r3, [r7, #3]
 8008230:	23ed      	movs	r3, #237	; 0xed
 8008232:	713b      	strb	r3, [r7, #4]
 8008234:	2321      	movs	r3, #33	; 0x21
 8008236:	717b      	strb	r3, [r7, #5]
 8008238:	234c      	movs	r3, #76	; 0x4c
 800823a:	71bb      	strb	r3, [r7, #6]
 800823c:	239d      	movs	r3, #157	; 0x9d
 800823e:	71fb      	strb	r3, [r7, #7]
 8008240:	2341      	movs	r3, #65	; 0x41
 8008242:	723b      	strb	r3, [r7, #8]
 8008244:	2345      	movs	r3, #69	; 0x45
 8008246:	727b      	strb	r3, [r7, #9]
 8008248:	2322      	movs	r3, #34	; 0x22
 800824a:	72bb      	strb	r3, [r7, #10]
 800824c:	238e      	movs	r3, #142	; 0x8e
 800824e:	72fb      	strb	r3, [r7, #11]
 8008250:	2341      	movs	r3, #65	; 0x41
 8008252:	733b      	strb	r3, [r7, #12]
 8008254:	23fe      	movs	r3, #254	; 0xfe
 8008256:	737b      	strb	r3, [r7, #13]
 8008258:	2300      	movs	r3, #0
 800825a:	73bb      	strb	r3, [r7, #14]
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008260:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <P2PS_STM_Init+0x134>)
 8008262:	8818      	ldrh	r0, [r3, #0]
 8008264:	463a      	mov	r2, r7
 8008266:	4b25      	ldr	r3, [pc, #148]	; (80082fc <P2PS_STM_Init+0x138>)
 8008268:	9305      	str	r3, [sp, #20]
 800826a:	2301      	movs	r3, #1
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	230a      	movs	r3, #10
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	2301      	movs	r3, #1
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	2300      	movs	r3, #0
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	2306      	movs	r3, #6
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	2302      	movs	r3, #2
 8008280:	2102      	movs	r1, #2
 8008282:	f7ff f919 	bl	80074b8 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008286:	2319      	movs	r3, #25
 8008288:	703b      	strb	r3, [r7, #0]
 800828a:	23ed      	movs	r3, #237	; 0xed
 800828c:	707b      	strb	r3, [r7, #1]
 800828e:	2382      	movs	r3, #130	; 0x82
 8008290:	70bb      	strb	r3, [r7, #2]
 8008292:	23ae      	movs	r3, #174	; 0xae
 8008294:	70fb      	strb	r3, [r7, #3]
 8008296:	23ed      	movs	r3, #237	; 0xed
 8008298:	713b      	strb	r3, [r7, #4]
 800829a:	2321      	movs	r3, #33	; 0x21
 800829c:	717b      	strb	r3, [r7, #5]
 800829e:	234c      	movs	r3, #76	; 0x4c
 80082a0:	71bb      	strb	r3, [r7, #6]
 80082a2:	239d      	movs	r3, #157	; 0x9d
 80082a4:	71fb      	strb	r3, [r7, #7]
 80082a6:	2341      	movs	r3, #65	; 0x41
 80082a8:	723b      	strb	r3, [r7, #8]
 80082aa:	2345      	movs	r3, #69	; 0x45
 80082ac:	727b      	strb	r3, [r7, #9]
 80082ae:	2322      	movs	r3, #34	; 0x22
 80082b0:	72bb      	strb	r3, [r7, #10]
 80082b2:	238e      	movs	r3, #142	; 0x8e
 80082b4:	72fb      	strb	r3, [r7, #11]
 80082b6:	2342      	movs	r3, #66	; 0x42
 80082b8:	733b      	strb	r3, [r7, #12]
 80082ba:	23fe      	movs	r3, #254	; 0xfe
 80082bc:	737b      	strb	r3, [r7, #13]
 80082be:	2300      	movs	r3, #0
 80082c0:	73bb      	strb	r3, [r7, #14]
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <P2PS_STM_Init+0x134>)
 80082c8:	8818      	ldrh	r0, [r3, #0]
 80082ca:	463a      	mov	r2, r7
 80082cc:	4b0c      	ldr	r3, [pc, #48]	; (8008300 <P2PS_STM_Init+0x13c>)
 80082ce:	9305      	str	r3, [sp, #20]
 80082d0:	2301      	movs	r3, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	230a      	movs	r3, #10
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	2301      	movs	r3, #1
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	2300      	movs	r3, #0
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	2310      	movs	r3, #16
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	2302      	movs	r3, #2
 80082e6:	2102      	movs	r1, #2
 80082e8:	f7ff f8e6 	bl	80074b8 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80082ec:	bf00      	nop
}
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	080080fd 	.word	0x080080fd
 80082f8:	200000d0 	.word	0x200000d0
 80082fc:	200000d2 	.word	0x200000d2
 8008300:	200000d4 	.word	0x200000d4

08008304 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af02      	add	r7, sp, #8
 800830a:	4603      	mov	r3, r0
 800830c:	6039      	str	r1, [r7, #0]
 800830e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8008310:	2342      	movs	r3, #66	; 0x42
 8008312:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800831a:	4293      	cmp	r3, r2
 800831c:	d10c      	bne.n	8008338 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <P2PS_STM_App_Update_Char+0x40>)
 8008320:	8818      	ldrh	r0, [r3, #0]
 8008322:	4b08      	ldr	r3, [pc, #32]	; (8008344 <P2PS_STM_App_Update_Char+0x40>)
 8008324:	8899      	ldrh	r1, [r3, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2302      	movs	r3, #2
 800832c:	2200      	movs	r2, #0
 800832e:	f7ff f9ad 	bl	800768c <aci_gatt_update_char_value>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8008336:	e000      	b.n	800833a <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8008338:	bf00      	nop
  }

  return result;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	200000d0 	.word	0x200000d0

08008348 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 8008348:	b480      	push	{r7}
 800834a:	af00      	add	r7, sp, #0
  return;
 800834c:	bf00      	nop
}
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008356:	b480      	push	{r7}
 8008358:	af00      	add	r7, sp, #0
  return;
 800835a:	bf00      	nop
}
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <DIS_Init>:
__weak void DIS_Init( void )
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return;
 8008368:	bf00      	nop
}
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <HIDS_Init>:
__weak void EDS_STM_Init( void )
{
  return;
}
__weak void HIDS_Init( void )
{
 8008372:	b480      	push	{r7}
 8008374:	af00      	add	r7, sp, #0
  return;
 8008376:	bf00      	nop
}
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  return;
 8008384:	bf00      	nop
}
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HTS_Init>:
__weak void HTS_Init( void )
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  return;
 8008392:	bf00      	nop
}
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <IAS_Init>:
__weak void IAS_Init( void )
{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
  return;
 80083a0:	bf00      	nop
}
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <LLS_Init>:
__weak void LLS_Init( void )
{
 80083aa:	b480      	push	{r7}
 80083ac:	af00      	add	r7, sp, #0
  return;
 80083ae:	bf00      	nop
}
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <TPS_Init>:
__weak void TPS_Init( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  return;
 80083bc:	bf00      	nop
}
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80083c6:	b480      	push	{r7}
 80083c8:	af00      	add	r7, sp, #0
  return;
 80083ca:	bf00      	nop
}
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
  return;
 80083d8:	bf00      	nop
}
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <MESH_Init>:
__weak void MESH_Init( void )
{
 80083e2:	b480      	push	{r7}
 80083e4:	af00      	add	r7, sp, #0
  return;
 80083e6:	bf00      	nop
}
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80083f0:	b480      	push	{r7}
 80083f2:	af00      	add	r7, sp, #0
  return;
 80083f4:	bf00      	nop
}
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80083fe:	b480      	push	{r7}
 8008400:	af00      	add	r7, sp, #0
  return;
 8008402:	bf00      	nop
}
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <SVCCTL_Init+0x18>)
 8008412:	2200      	movs	r2, #0
 8008414:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <SVCCTL_Init+0x1c>)
 8008418:	2200      	movs	r2, #0
 800841a:	761a      	strb	r2, [r3, #24]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800841c:	f000 f806 	bl	800842c <SVCCTL_SvcInit>

  return;
 8008420:	bf00      	nop
}
 8008422:	bd80      	pop	{r7, pc}
 8008424:	200000d8 	.word	0x200000d8
 8008428:	200000f8 	.word	0x200000f8

0800842c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  BLS_Init();
 8008430:	f7ff ff8a 	bl	8008348 <BLS_Init>

  CRS_STM_Init();
 8008434:	f7ff ff8f 	bl	8008356 <CRS_STM_Init>

  DIS_Init();
 8008438:	f7ff ff94 	bl	8008364 <DIS_Init>

  EDS_STM_Init();
 800843c:	f7ff fdd0 	bl	8007fe0 <EDS_STM_Init>

  HIDS_Init();
 8008440:	f7ff ff97 	bl	8008372 <HIDS_Init>

  HRS_Init();
 8008444:	f7ff ff9c 	bl	8008380 <HRS_Init>

  HTS_Init();
 8008448:	f7ff ffa1 	bl	800838e <HTS_Init>

  IAS_Init();
 800844c:	f7ff ffa6 	bl	800839c <IAS_Init>

  LLS_Init();
 8008450:	f7ff ffab 	bl	80083aa <LLS_Init>

  TPS_Init();
 8008454:	f7ff ffb0 	bl	80083b8 <TPS_Init>

  MOTENV_STM_Init();
 8008458:	f7ff ffb5 	bl	80083c6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800845c:	f7ff feb2 	bl	80081c4 <P2PS_STM_Init>

  OTAS_STM_Init();
 8008460:	f7ff ffb8 	bl	80083d4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008464:	f7ff ffc4 	bl	80083f0 <BVOPUS_STM_Init>

  MESH_Init();
 8008468:	f7ff ffbb 	bl	80083e2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800846c:	f7ff ffc7 	bl	80083fe <SVCCTL_InitCustomSvc>
  
  return;
 8008470:	bf00      	nop
}
 8008472:	bd80      	pop	{r7, pc}

08008474 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800847c:	4b09      	ldr	r3, [pc, #36]	; (80084a4 <SVCCTL_RegisterSvcHandler+0x30>)
 800847e:	7f1b      	ldrb	r3, [r3, #28]
 8008480:	4619      	mov	r1, r3
 8008482:	4a08      	ldr	r2, [pc, #32]	; (80084a4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800848a:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <SVCCTL_RegisterSvcHandler+0x30>)
 800848c:	7f1b      	ldrb	r3, [r3, #28]
 800848e:	3301      	adds	r3, #1
 8008490:	b2da      	uxtb	r2, r3
 8008492:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008494:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008496:	bf00      	nop
}
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	200000d8 	.word	0x200000d8

080084a8 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 80084b0:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <SVCCTL_RegisterCltHandler+0x30>)
 80084b2:	7e1b      	ldrb	r3, [r3, #24]
 80084b4:	4619      	mov	r1, r3
 80084b6:	4a08      	ldr	r2, [pc, #32]	; (80084d8 <SVCCTL_RegisterCltHandler+0x30>)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80084be:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <SVCCTL_RegisterCltHandler+0x30>)
 80084c0:	7e1b      	ldrb	r3, [r3, #24]
 80084c2:	3301      	adds	r3, #1
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <SVCCTL_RegisterCltHandler+0x30>)
 80084c8:	761a      	strb	r2, [r3, #24]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80084ca:	bf00      	nop
}
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	200000f8 	.word	0x200000f8

080084dc <SVCCTL_UserEvtRx>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3301      	adds	r3, #1
 80084e8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80084ea:	2300      	movs	r3, #0
 80084ec:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2bff      	cmp	r3, #255	; 0xff
 80084f4:	d13f      	bne.n	8008576 <SVCCTL_UserEvtRx+0x9a>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	3302      	adds	r3, #2
 80084fa:	60fb      	str	r3, [r7, #12]

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800850a:	d132      	bne.n	8008572 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800850c:	2300      	movs	r3, #0
 800850e:	757b      	strb	r3, [r7, #21]
 8008510:	e00d      	b.n	800852e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008512:	7d7b      	ldrb	r3, [r7, #21]
 8008514:	4a27      	ldr	r2, [pc, #156]	; (80085b4 <SVCCTL_UserEvtRx+0xd8>)
 8008516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	4798      	blx	r3
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d108      	bne.n	800853a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008528:	7d7b      	ldrb	r3, [r7, #21]
 800852a:	3301      	adds	r3, #1
 800852c:	757b      	strb	r3, [r7, #21]
 800852e:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <SVCCTL_UserEvtRx+0xd8>)
 8008530:	7f1b      	ldrb	r3, [r3, #28]
 8008532:	7d7a      	ldrb	r2, [r7, #21]
 8008534:	429a      	cmp	r2, r3
 8008536:	d3ec      	bcc.n	8008512 <SVCCTL_UserEvtRx+0x36>
 8008538:	e000      	b.n	800853c <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800853a:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800853c:	2300      	movs	r3, #0
 800853e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8008540:	2300      	movs	r3, #0
 8008542:	757b      	strb	r3, [r7, #21]
 8008544:	e00d      	b.n	8008562 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8008546:	7d7b      	ldrb	r3, [r7, #21]
 8008548:	4a1b      	ldr	r2, [pc, #108]	; (80085b8 <SVCCTL_UserEvtRx+0xdc>)
 800854a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	4798      	blx	r3
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d108      	bne.n	800856e <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800855c:	7d7b      	ldrb	r3, [r7, #21]
 800855e:	3301      	adds	r3, #1
 8008560:	757b      	strb	r3, [r7, #21]
 8008562:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <SVCCTL_UserEvtRx+0xdc>)
 8008564:	7e1b      	ldrb	r3, [r3, #24]
 8008566:	7d7a      	ldrb	r2, [r7, #21]
 8008568:	429a      	cmp	r2, r3
 800856a:	d3ec      	bcc.n	8008546 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800856c:	e002      	b.n	8008574 <SVCCTL_UserEvtRx+0x98>
              break;
 800856e:	bf00      	nop
          break;
 8008570:	e000      	b.n	8008574 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8008572:	bf00      	nop
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008574:	e000      	b.n	8008578 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8008576:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d00f      	beq.n	800859e <SVCCTL_UserEvtRx+0xc2>
 800857e:	2b02      	cmp	r3, #2
 8008580:	dc10      	bgt.n	80085a4 <SVCCTL_UserEvtRx+0xc8>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <SVCCTL_UserEvtRx+0xb0>
 8008586:	2b01      	cmp	r3, #1
 8008588:	d006      	beq.n	8008598 <SVCCTL_UserEvtRx+0xbc>
 800858a:	e00b      	b.n	80085a4 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 ff03 	bl	8009398 <SVCCTL_App_Notification>
 8008592:	4603      	mov	r3, r0
 8008594:	75bb      	strb	r3, [r7, #22]
      break;
 8008596:	e008      	b.n	80085aa <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008598:	2301      	movs	r3, #1
 800859a:	75bb      	strb	r3, [r7, #22]
      break;
 800859c:	e005      	b.n	80085aa <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800859e:	2300      	movs	r3, #0
 80085a0:	75bb      	strb	r3, [r7, #22]
      break;
 80085a2:	e002      	b.n	80085aa <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75bb      	strb	r3, [r7, #22]
      break;
 80085a8:	bf00      	nop
  }

  return (return_status);
 80085aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	200000d8 	.word	0x200000d8
 80085b8:	200000f8 	.word	0x200000f8

080085bc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80085c4:	f107 030c 	add.w	r3, r7, #12
 80085c8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	2121      	movs	r1, #33	; 0x21
 80085d4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80085d8:	f000 fa1e 	bl	8008a18 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	330b      	adds	r3, #11
 80085e0:	78db      	ldrb	r3, [r3, #3]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3720      	adds	r7, #32
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80085f2:	f107 030c 	add.w	r3, r7, #12
 80085f6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	210f      	movs	r1, #15
 8008602:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008606:	f000 fa07 	bl	8008a18 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	330b      	adds	r3, #11
 800860e:	78db      	ldrb	r3, [r3, #3]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	4a08      	ldr	r2, [pc, #32]	; (8008648 <hci_init+0x30>)
 8008628:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800862a:	4a08      	ldr	r2, [pc, #32]	; (800864c <hci_init+0x34>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008630:	4806      	ldr	r0, [pc, #24]	; (800864c <hci_init+0x34>)
 8008632:	f000 f973 	bl	800891c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f000 f8d4 	bl	80087e8 <TlInit>

  return;
 8008640:	bf00      	nop
}
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	200002b0 	.word	0x200002b0
 800864c:	20000288 	.word	0x20000288

08008650 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008656:	4822      	ldr	r0, [pc, #136]	; (80086e0 <hci_user_evt_proc+0x90>)
 8008658:	f000 fd28 	bl	80090ac <LST_is_empty>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d12b      	bne.n	80086ba <hci_user_evt_proc+0x6a>
 8008662:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <hci_user_evt_proc+0x94>)
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d027      	beq.n	80086ba <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800866a:	f107 030c 	add.w	r3, r7, #12
 800866e:	4619      	mov	r1, r3
 8008670:	481b      	ldr	r0, [pc, #108]	; (80086e0 <hci_user_evt_proc+0x90>)
 8008672:	f000 fdaa 	bl	80091ca <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008676:	4b1c      	ldr	r3, [pc, #112]	; (80086e8 <hci_user_evt_proc+0x98>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008682:	2301      	movs	r3, #1
 8008684:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <hci_user_evt_proc+0x98>)
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	1d3a      	adds	r2, r7, #4
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008690:	793a      	ldrb	r2, [r7, #4]
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <hci_user_evt_proc+0x94>)
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e002      	b.n	800869e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008698:	4b12      	ldr	r3, [pc, #72]	; (80086e4 <hci_user_evt_proc+0x94>)
 800869a:	2201      	movs	r2, #1
 800869c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800869e:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <hci_user_evt_proc+0x94>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fc03 	bl	8008eb4 <TL_MM_EvtDone>
 80086ae:	e004      	b.n	80086ba <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4619      	mov	r1, r3
 80086b4:	480a      	ldr	r0, [pc, #40]	; (80086e0 <hci_user_evt_proc+0x90>)
 80086b6:	f000 fd1b 	bl	80090f0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80086ba:	4809      	ldr	r0, [pc, #36]	; (80086e0 <hci_user_evt_proc+0x90>)
 80086bc:	f000 fcf6 	bl	80090ac <LST_is_empty>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d107      	bne.n	80086d6 <hci_user_evt_proc+0x86>
 80086c6:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <hci_user_evt_proc+0x94>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80086ce:	4804      	ldr	r0, [pc, #16]	; (80086e0 <hci_user_evt_proc+0x90>)
 80086d0:	f001 ffc0 	bl	800a654 <hci_notify_asynch_evt>
  }


  return;
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
}
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000118 	.word	0x20000118
 80086e4:	20000124 	.word	0x20000124
 80086e8:	20000288 	.word	0x20000288

080086ec <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80086f8:	2000      	movs	r0, #0
 80086fa:	f000 f8cb 	bl	8008894 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80086fe:	2300      	movs	r3, #0
 8008700:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	885b      	ldrh	r3, [r3, #2]
 8008706:	b21b      	sxth	r3, r3
 8008708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800870c:	b21a      	sxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	029b      	lsls	r3, r3, #10
 8008714:	b21b      	sxth	r3, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	b21b      	sxth	r3, r3
 800871a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	b2d9      	uxtb	r1, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	8bbb      	ldrh	r3, [r7, #28]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f88d 	bl	8008848 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800872e:	e04e      	b.n	80087ce <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008730:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008734:	f001 ffa6 	bl	800a684 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008738:	e043      	b.n	80087c2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	4619      	mov	r1, r3
 8008740:	4828      	ldr	r0, [pc, #160]	; (80087e4 <hci_send_req+0xf8>)
 8008742:	f000 fd42 	bl	80091ca <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	7a5b      	ldrb	r3, [r3, #9]
 800874a:	2b0f      	cmp	r3, #15
 800874c:	d114      	bne.n	8008778 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	330b      	adds	r3, #11
 8008752:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	885b      	ldrh	r3, [r3, #2]
 8008758:	b29b      	uxth	r3, r3
 800875a:	8bba      	ldrh	r2, [r7, #28]
 800875c:	429a      	cmp	r2, r3
 800875e:	d104      	bne.n	800876a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	7812      	ldrb	r2, [r2, #0]
 8008768:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d027      	beq.n	80087c2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008772:	2301      	movs	r3, #1
 8008774:	77fb      	strb	r3, [r7, #31]
 8008776:	e024      	b.n	80087c2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	330b      	adds	r3, #11
 800877c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008784:	b29b      	uxth	r3, r3
 8008786:	8bba      	ldrh	r2, [r7, #28]
 8008788:	429a      	cmp	r2, r3
 800878a:	d114      	bne.n	80087b6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	7a9b      	ldrb	r3, [r3, #10]
 8008790:	3b03      	subs	r3, #3
 8008792:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	695a      	ldr	r2, [r3, #20]
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	429a      	cmp	r2, r3
 800879c:	bfa8      	it	ge
 800879e:	461a      	movge	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6918      	ldr	r0, [r3, #16]
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	1cd9      	adds	r1, r3, #3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	461a      	mov	r2, r3
 80087b2:	f003 f975 	bl	800baa0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80087be:	2301      	movs	r3, #1
 80087c0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80087c2:	4808      	ldr	r0, [pc, #32]	; (80087e4 <hci_send_req+0xf8>)
 80087c4:	f000 fc72 	bl	80090ac <LST_is_empty>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0b5      	beq.n	800873a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ad      	beq.n	8008730 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80087d4:	2001      	movs	r0, #1
 80087d6:	f000 f85d 	bl	8008894 <NotifyCmdStatus>

  return 0;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3720      	adds	r7, #32
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	200002a8 	.word	0x200002a8

080087e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80087f0:	480f      	ldr	r0, [pc, #60]	; (8008830 <TlInit+0x48>)
 80087f2:	f000 fc4b 	bl	800908c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80087f6:	4a0f      	ldr	r2, [pc, #60]	; (8008834 <TlInit+0x4c>)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80087fc:	480e      	ldr	r0, [pc, #56]	; (8008838 <TlInit+0x50>)
 80087fe:	f000 fc45 	bl	800908c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008802:	4b0e      	ldr	r3, [pc, #56]	; (800883c <TlInit+0x54>)
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <TlInit+0x58>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008814:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <TlInit+0x5c>)
 8008816:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008818:	4b09      	ldr	r3, [pc, #36]	; (8008840 <TlInit+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
  }

  return;
 8008824:	bf00      	nop
 8008826:	bf00      	nop
}
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200002a8 	.word	0x200002a8
 8008834:	20000120 	.word	0x20000120
 8008838:	20000118 	.word	0x20000118
 800883c:	20000124 	.word	0x20000124
 8008840:	20000288 	.word	0x20000288
 8008844:	080088d5 	.word	0x080088d5

08008848 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	603a      	str	r2, [r7, #0]
 8008852:	80fb      	strh	r3, [r7, #6]
 8008854:	460b      	mov	r3, r1
 8008856:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <SendCmd+0x44>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <SendCmd+0x44>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	797a      	ldrb	r2, [r7, #5]
 8008868:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800886a:	4b08      	ldr	r3, [pc, #32]	; (800888c <SendCmd+0x44>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	797a      	ldrb	r2, [r7, #5]
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	4618      	mov	r0, r3
 8008876:	f003 f913 	bl	800baa0 <memcpy>

  hciContext.io.Send(0,0);
 800887a:	4b05      	ldr	r3, [pc, #20]	; (8008890 <SendCmd+0x48>)
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2100      	movs	r1, #0
 8008880:	2000      	movs	r0, #0
 8008882:	4798      	blx	r3

  return;
 8008884:	bf00      	nop
}
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000120 	.word	0x20000120
 8008890:	20000288 	.word	0x20000288

08008894 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d108      	bne.n	80088b6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80088a4:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <NotifyCmdStatus+0x3c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00d      	beq.n	80088c8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80088ac:	4b08      	ldr	r3, [pc, #32]	; (80088d0 <NotifyCmdStatus+0x3c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2000      	movs	r0, #0
 80088b2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80088b4:	e008      	b.n	80088c8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <NotifyCmdStatus+0x3c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <NotifyCmdStatus+0x3c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2001      	movs	r0, #1
 80088c4:	4798      	blx	r3
  return;
 80088c6:	bf00      	nop
 80088c8:	bf00      	nop
}
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	200002b0 	.word	0x200002b0

080088d4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7a5b      	ldrb	r3, [r3, #9]
 80088e0:	2b0f      	cmp	r3, #15
 80088e2:	d003      	beq.n	80088ec <TlEvtReceived+0x18>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7a5b      	ldrb	r3, [r3, #9]
 80088e8:	2b0e      	cmp	r3, #14
 80088ea:	d107      	bne.n	80088fc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4809      	ldr	r0, [pc, #36]	; (8008914 <TlEvtReceived+0x40>)
 80088f0:	f000 fc24 	bl	800913c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80088f4:	2000      	movs	r0, #0
 80088f6:	f001 feba 	bl	800a66e <hci_cmd_resp_release>
 80088fa:	e006      	b.n	800890a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4806      	ldr	r0, [pc, #24]	; (8008918 <TlEvtReceived+0x44>)
 8008900:	f000 fc1c 	bl	800913c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008904:	4804      	ldr	r0, [pc, #16]	; (8008918 <TlEvtReceived+0x44>)
 8008906:	f001 fea5 	bl	800a654 <hci_notify_asynch_evt>
  }

  return;
 800890a:	bf00      	nop
}
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	200002a8 	.word	0x200002a8
 8008918:	20000118 	.word	0x20000118

0800891c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a05      	ldr	r2, [pc, #20]	; (800893c <hci_register_io_bus+0x20>)
 8008928:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a04      	ldr	r2, [pc, #16]	; (8008940 <hci_register_io_bus+0x24>)
 800892e:	611a      	str	r2, [r3, #16]

  return;
 8008930:	bf00      	nop
}
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	08008c2d 	.word	0x08008c2d
 8008940:	08008c95 	.word	0x08008c95

08008944 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	4a08      	ldr	r2, [pc, #32]	; (8008974 <shci_init+0x30>)
 8008954:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008956:	4a08      	ldr	r2, [pc, #32]	; (8008978 <shci_init+0x34>)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800895c:	4806      	ldr	r0, [pc, #24]	; (8008978 <shci_init+0x34>)
 800895e:	f000 f911 	bl	8008b84 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f894 	bl	8008a94 <TlInit>

  return;
 800896c:	bf00      	nop
}
 800896e:	3708      	adds	r7, #8
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	200002d4 	.word	0x200002d4
 8008978:	200002b4 	.word	0x200002b4

0800897c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008982:	4822      	ldr	r0, [pc, #136]	; (8008a0c <shci_user_evt_proc+0x90>)
 8008984:	f000 fb92 	bl	80090ac <LST_is_empty>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d12b      	bne.n	80089e6 <shci_user_evt_proc+0x6a>
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <shci_user_evt_proc+0x94>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d027      	beq.n	80089e6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008996:	f107 030c 	add.w	r3, r7, #12
 800899a:	4619      	mov	r1, r3
 800899c:	481b      	ldr	r0, [pc, #108]	; (8008a0c <shci_user_evt_proc+0x90>)
 800899e:	f000 fc14 	bl	80091ca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <shci_user_evt_proc+0x98>)
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80089ae:	2301      	movs	r3, #1
 80089b0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80089b2:	4b18      	ldr	r3, [pc, #96]	; (8008a14 <shci_user_evt_proc+0x98>)
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	1d3a      	adds	r2, r7, #4
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80089bc:	793a      	ldrb	r2, [r7, #4]
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <shci_user_evt_proc+0x94>)
 80089c0:	701a      	strb	r2, [r3, #0]
 80089c2:	e002      	b.n	80089ca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80089c4:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <shci_user_evt_proc+0x94>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <shci_user_evt_proc+0x94>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fa6d 	bl	8008eb4 <TL_MM_EvtDone>
 80089da:	e004      	b.n	80089e6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4619      	mov	r1, r3
 80089e0:	480a      	ldr	r0, [pc, #40]	; (8008a0c <shci_user_evt_proc+0x90>)
 80089e2:	f000 fb85 	bl	80090f0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80089e6:	4809      	ldr	r0, [pc, #36]	; (8008a0c <shci_user_evt_proc+0x90>)
 80089e8:	f000 fb60 	bl	80090ac <LST_is_empty>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d107      	bne.n	8008a02 <shci_user_evt_proc+0x86>
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <shci_user_evt_proc+0x94>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80089fa:	4804      	ldr	r0, [pc, #16]	; (8008a0c <shci_user_evt_proc+0x90>)
 80089fc:	f7f7 ff1c 	bl	8000838 <shci_notify_asynch_evt>
  }


  return;
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
}
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000128 	.word	0x20000128
 8008a10:	20000138 	.word	0x20000138
 8008a14:	200002b4 	.word	0x200002b4

08008a18 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60ba      	str	r2, [r7, #8]
 8008a20:	607b      	str	r3, [r7, #4]
 8008a22:	4603      	mov	r3, r0
 8008a24:	81fb      	strh	r3, [r7, #14]
 8008a26:	460b      	mov	r3, r1
 8008a28:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f000 f864 	bl	8008af8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008a30:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <shci_send+0x74>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	89fa      	ldrh	r2, [r7, #14]
 8008a36:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008a3a:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <shci_send+0x74>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	7b7a      	ldrb	r2, [r7, #13]
 8008a40:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <shci_send+0x74>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	7b7a      	ldrb	r2, [r7, #13]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f003 f827 	bl	800baa0 <memcpy>

  shciContext.io.Send(0,0);
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <shci_send+0x78>)
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2100      	movs	r1, #0
 8008a58:	2000      	movs	r0, #0
 8008a5a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008a5c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008a60:	f7f7 ff02 	bl	8000868 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f103 0008 	add.w	r0, r3, #8
 8008a6a:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <shci_send+0x74>)
 8008a6c:	6819      	ldr	r1, [r3, #0]
 8008a6e:	4b07      	ldr	r3, [pc, #28]	; (8008a8c <shci_send+0x74>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	789b      	ldrb	r3, [r3, #2]
 8008a74:	3303      	adds	r3, #3
 8008a76:	461a      	mov	r2, r3
 8008a78:	f003 f812 	bl	800baa0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008a7c:	2001      	movs	r0, #1
 8008a7e:	f000 f83b 	bl	8008af8 <Cmd_SetStatus>

  return;
 8008a82:	bf00      	nop
}
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000134 	.word	0x20000134
 8008a90:	200002b4 	.word	0x200002b4

08008a94 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008a9c:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <TlInit+0x4c>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008aa2:	4810      	ldr	r0, [pc, #64]	; (8008ae4 <TlInit+0x50>)
 8008aa4:	f000 faf2 	bl	800908c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	f000 f825 	bl	8008af8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008aae:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <TlInit+0x54>)
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008ab4:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <TlInit+0x58>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00c      	beq.n	8008ad6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <TlInit+0x5c>)
 8008ac2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <TlInit+0x60>)
 8008ac6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008ac8:	4b08      	ldr	r3, [pc, #32]	; (8008aec <TlInit+0x58>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f107 020c 	add.w	r2, r7, #12
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
  }

  return;
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
}
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	20000134 	.word	0x20000134
 8008ae4:	20000128 	.word	0x20000128
 8008ae8:	20000138 	.word	0x20000138
 8008aec:	200002b4 	.word	0x200002b4
 8008af0:	08008b49 	.word	0x08008b49
 8008af4:	08008b61 	.word	0x08008b61

08008af8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10b      	bne.n	8008b20 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008b08:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <Cmd_SetStatus+0x48>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <Cmd_SetStatus+0x48>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2000      	movs	r0, #0
 8008b16:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <Cmd_SetStatus+0x4c>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008b1e:	e00b      	b.n	8008b38 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008b20:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <Cmd_SetStatus+0x4c>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008b26:	4b06      	ldr	r3, [pc, #24]	; (8008b40 <Cmd_SetStatus+0x48>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d004      	beq.n	8008b38 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008b2e:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <Cmd_SetStatus+0x48>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2001      	movs	r0, #1
 8008b34:	4798      	blx	r3
  return;
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
}
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	200002d4 	.word	0x200002d4
 8008b44:	20000130 	.word	0x20000130

08008b48 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008b50:	2000      	movs	r0, #0
 8008b52:	f7f7 fe7e 	bl	8000852 <shci_cmd_resp_release>

  return;
 8008b56:	bf00      	nop
}
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008b68:	6879      	ldr	r1, [r7, #4]
 8008b6a:	4805      	ldr	r0, [pc, #20]	; (8008b80 <TlUserEvtReceived+0x20>)
 8008b6c:	f000 fae6 	bl	800913c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008b70:	4803      	ldr	r0, [pc, #12]	; (8008b80 <TlUserEvtReceived+0x20>)
 8008b72:	f7f7 fe61 	bl	8000838 <shci_notify_asynch_evt>

  return;
 8008b76:	bf00      	nop
}
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000128 	.word	0x20000128

08008b84 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a05      	ldr	r2, [pc, #20]	; (8008ba4 <shci_register_io_bus+0x20>)
 8008b90:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a04      	ldr	r2, [pc, #16]	; (8008ba8 <shci_register_io_bus+0x24>)
 8008b96:	611a      	str	r2, [r3, #16]

  return;
 8008b98:	bf00      	nop
}
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	08008d41 	.word	0x08008d41
 8008ba8:	08008d95 	.word	0x08008d95

08008bac <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008bb0:	f002 fbec 	bl	800b38c <HW_IPCC_Enable>

  return;
 8008bb4:	bf00      	nop
}
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <TL_Init>:


void TL_Init( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <TL_Init+0x48>)
 8008bbe:	4a11      	ldr	r2, [pc, #68]	; (8008c04 <TL_Init+0x4c>)
 8008bc0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <TL_Init+0x48>)
 8008bc4:	4a10      	ldr	r2, [pc, #64]	; (8008c08 <TL_Init+0x50>)
 8008bc6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <TL_Init+0x48>)
 8008bca:	4a10      	ldr	r2, [pc, #64]	; (8008c0c <TL_Init+0x54>)
 8008bcc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <TL_Init+0x48>)
 8008bd0:	4a0f      	ldr	r2, [pc, #60]	; (8008c10 <TL_Init+0x58>)
 8008bd2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <TL_Init+0x48>)
 8008bd6:	4a0f      	ldr	r2, [pc, #60]	; (8008c14 <TL_Init+0x5c>)
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <TL_Init+0x48>)
 8008bdc:	4a0e      	ldr	r2, [pc, #56]	; (8008c18 <TL_Init+0x60>)
 8008bde:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <TL_Init+0x48>)
 8008be2:	4a0e      	ldr	r2, [pc, #56]	; (8008c1c <TL_Init+0x64>)
 8008be4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008be6:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <TL_Init+0x48>)
 8008be8:	4a0d      	ldr	r2, [pc, #52]	; (8008c20 <TL_Init+0x68>)
 8008bea:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <TL_Init+0x48>)
 8008bee:	4a0d      	ldr	r2, [pc, #52]	; (8008c24 <TL_Init+0x6c>)
 8008bf0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <TL_Init+0x48>)
 8008bf4:	4a0c      	ldr	r2, [pc, #48]	; (8008c28 <TL_Init+0x70>)
 8008bf6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008bf8:	f002 fbdc 	bl	800b3b4 <HW_IPCC_Init>

  return;
 8008bfc:	bf00      	nop
}
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20030000 	.word	0x20030000
 8008c04:	20030028 	.word	0x20030028
 8008c08:	20030048 	.word	0x20030048
 8008c0c:	20030058 	.word	0x20030058
 8008c10:	20030064 	.word	0x20030064
 8008c14:	2003006c 	.word	0x2003006c
 8008c18:	20030074 	.word	0x20030074
 8008c1c:	2003007c 	.word	0x2003007c
 8008c20:	20030098 	.word	0x20030098
 8008c24:	2003009c 	.word	0x2003009c
 8008c28:	200300a8 	.word	0x200300a8

08008c2c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008c38:	4811      	ldr	r0, [pc, #68]	; (8008c80 <TL_BLE_Init+0x54>)
 8008c3a:	f000 fa27 	bl	800908c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008c3e:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <TL_BLE_Init+0x58>)
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4a0c      	ldr	r2, [pc, #48]	; (8008c88 <TL_BLE_Init+0x5c>)
 8008c58:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	4a08      	ldr	r2, [pc, #32]	; (8008c80 <TL_BLE_Init+0x54>)
 8008c5e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008c60:	f002 fbbe 	bl	800b3e0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a08      	ldr	r2, [pc, #32]	; (8008c8c <TL_BLE_Init+0x60>)
 8008c6a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4a07      	ldr	r2, [pc, #28]	; (8008c90 <TL_BLE_Init+0x64>)
 8008c72:	6013      	str	r3, [r2, #0]

  return 0;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	200300c4 	.word	0x200300c4
 8008c84:	20030000 	.word	0x20030000
 8008c88:	20030a48 	.word	0x20030a48
 8008c8c:	200002e0 	.word	0x200002e0
 8008c90:	200002e4 	.word	0x200002e4

08008c94 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <TL_BLE_SendCmd+0x34>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <TL_BLE_SendCmd+0x34>)
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	f000 f96c 	bl	8008f90 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008cb8:	f002 fb9c 	bl	800b3f4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20030000 	.word	0x20030000

08008ccc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008cd2:	e01c      	b.n	8008d0e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008cd4:	1d3b      	adds	r3, r7, #4
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4812      	ldr	r0, [pc, #72]	; (8008d24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008cda:	f000 fa76 	bl	80091ca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	7a5b      	ldrb	r3, [r3, #9]
 8008ce2:	2b0f      	cmp	r3, #15
 8008ce4:	d003      	beq.n	8008cee <HW_IPCC_BLE_RxEvtNot+0x22>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	7a5b      	ldrb	r3, [r3, #9]
 8008cea:	2b0e      	cmp	r3, #14
 8008cec:	d105      	bne.n	8008cfa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	2002      	movs	r0, #2
 8008cf4:	f000 f94c 	bl	8008f90 <OutputDbgTrace>
 8008cf8:	e004      	b.n	8008d04 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	2003      	movs	r0, #3
 8008d00:	f000 f946 	bl	8008f90 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008d04:	4b08      	ldr	r3, [pc, #32]	; (8008d28 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4610      	mov	r0, r2
 8008d0c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008d0e:	4805      	ldr	r0, [pc, #20]	; (8008d24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008d10:	f000 f9cc 	bl	80090ac <LST_is_empty>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0dc      	beq.n	8008cd4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008d1a:	bf00      	nop
}
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200300c4 	.word	0x200300c4
 8008d28:	200002e0 	.word	0x200002e0

08008d2c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008d30:	4b02      	ldr	r3, [pc, #8]	; (8008d3c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4798      	blx	r3

  return;
 8008d36:	bf00      	nop
}
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	200002e4 	.word	0x200002e4

08008d40 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008d4c:	480d      	ldr	r0, [pc, #52]	; (8008d84 <TL_SYS_Init+0x44>)
 8008d4e:	f000 f99d 	bl	800908c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <TL_SYS_Init+0x48>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4a08      	ldr	r2, [pc, #32]	; (8008d84 <TL_SYS_Init+0x44>)
 8008d64:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008d66:	f002 fb67 	bl	800b438 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <TL_SYS_Init+0x4c>)
 8008d70:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	4a06      	ldr	r2, [pc, #24]	; (8008d90 <TL_SYS_Init+0x50>)
 8008d78:	6013      	str	r3, [r2, #0]

  return 0;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	200300cc 	.word	0x200300cc
 8008d88:	20030000 	.word	0x20030000
 8008d8c:	200002e8 	.word	0x200002e8
 8008d90:	200002ec 	.word	0x200002ec

08008d94 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <TL_SYS_SendCmd+0x34>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2210      	movs	r2, #16
 8008da8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <TL_SYS_SendCmd+0x34>)
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4619      	mov	r1, r3
 8008db2:	2004      	movs	r0, #4
 8008db4:	f000 f8ec 	bl	8008f90 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008db8:	f002 fb48 	bl	800b44c <HW_IPCC_SYS_SendCmd>

  return 0;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20030000 	.word	0x20030000

08008dcc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	2005      	movs	r0, #5
 8008dda:	f000 f8d9 	bl	8008f90 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a03      	ldr	r2, [pc, #12]	; (8008df0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008de4:	68d2      	ldr	r2, [r2, #12]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	4610      	mov	r0, r2
 8008dea:	4798      	blx	r3

  return;
 8008dec:	bf00      	nop
}
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20030000 	.word	0x20030000
 8008df4:	200002e8 	.word	0x200002e8

08008df8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008dfe:	e00e      	b.n	8008e1e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008e00:	1d3b      	adds	r3, r7, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	480b      	ldr	r0, [pc, #44]	; (8008e34 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008e06:	f000 f9e0 	bl	80091ca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	2006      	movs	r0, #6
 8008e10:	f000 f8be 	bl	8008f90 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008e14:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <HW_IPCC_SYS_EvtNot+0x40>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008e1e:	4805      	ldr	r0, [pc, #20]	; (8008e34 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008e20:	f000 f944 	bl	80090ac <LST_is_empty>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0ea      	beq.n	8008e00 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008e2a:	bf00      	nop
}
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200300cc 	.word	0x200300cc
 8008e38:	200002ec 	.word	0x200002ec

08008e3c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008e44:	4817      	ldr	r0, [pc, #92]	; (8008ea4 <TL_MM_Init+0x68>)
 8008e46:	f000 f921 	bl	800908c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008e4a:	4817      	ldr	r0, [pc, #92]	; (8008ea8 <TL_MM_Init+0x6c>)
 8008e4c:	f000 f91e 	bl	800908c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <TL_MM_Init+0x70>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	4a16      	ldr	r2, [pc, #88]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e56:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	6892      	ldr	r2, [r2, #8]
 8008e60:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008e62:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68d2      	ldr	r2, [r2, #12]
 8008e6a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a0c      	ldr	r2, [pc, #48]	; (8008ea4 <TL_MM_Init+0x68>)
 8008e72:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008e74:	4b0e      	ldr	r3, [pc, #56]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008e7e:	4b0c      	ldr	r3, [pc, #48]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	6852      	ldr	r2, [r2, #4]
 8008e86:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008e88:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6912      	ldr	r2, [r2, #16]
 8008e90:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008e92:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <TL_MM_Init+0x74>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	6952      	ldr	r2, [r2, #20]
 8008e9a:	619a      	str	r2, [r3, #24]

  return;
 8008e9c:	bf00      	nop
}
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	200300b4 	.word	0x200300b4
 8008ea8:	200002d8 	.word	0x200002d8
 8008eac:	20030000 	.word	0x20030000
 8008eb0:	200002f0 	.word	0x200002f0

08008eb4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	4807      	ldr	r0, [pc, #28]	; (8008edc <TL_MM_EvtDone+0x28>)
 8008ec0:	f000 f93c 	bl	800913c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	f000 f862 	bl	8008f90 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008ecc:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <TL_MM_EvtDone+0x2c>)
 8008ece:	f002 fae3 	bl	800b498 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008ed2:	bf00      	nop
}
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	200002d8 	.word	0x200002d8
 8008ee0:	08008ee5 	.word	0x08008ee5

08008ee4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008eea:	e00c      	b.n	8008f06 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	4619      	mov	r1, r3
 8008ef0:	480a      	ldr	r0, [pc, #40]	; (8008f1c <SendFreeBuf+0x38>)
 8008ef2:	f000 f96a 	bl	80091ca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <SendFreeBuf+0x3c>)
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f91b 	bl	800913c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008f06:	4805      	ldr	r0, [pc, #20]	; (8008f1c <SendFreeBuf+0x38>)
 8008f08:	f000 f8d0 	bl	80090ac <LST_is_empty>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0ec      	beq.n	8008eec <SendFreeBuf+0x8>
  }

  return;
 8008f12:	bf00      	nop
}
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	200002d8 	.word	0x200002d8
 8008f20:	20030000 	.word	0x20030000

08008f24 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <TL_TRACES_Init+0x1c>)
 8008f2a:	f000 f8af 	bl	800908c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <TL_TRACES_Init+0x20>)
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	4a03      	ldr	r2, [pc, #12]	; (8008f40 <TL_TRACES_Init+0x1c>)
 8008f34:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008f36:	f002 fae5 	bl	800b504 <HW_IPCC_TRACES_Init>

  return;
 8008f3a:	bf00      	nop
}
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200300bc 	.word	0x200300bc
 8008f44:	20030000 	.word	0x20030000

08008f48 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008f4e:	e008      	b.n	8008f62 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008f50:	1d3b      	adds	r3, r7, #4
 8008f52:	4619      	mov	r1, r3
 8008f54:	4808      	ldr	r0, [pc, #32]	; (8008f78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008f56:	f000 f938 	bl	80091ca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 f80d 	bl	8008f7c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008f62:	4805      	ldr	r0, [pc, #20]	; (8008f78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008f64:	f000 f8a2 	bl	80090ac <LST_is_empty>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0f0      	beq.n	8008f50 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008f6e:	bf00      	nop
}
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200300bc 	.word	0x200300bc

08008f7c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	6039      	str	r1, [r7, #0]
 8008f9a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b06      	cmp	r3, #6
 8008fa0:	d845      	bhi.n	800902e <OutputDbgTrace+0x9e>
 8008fa2:	a201      	add	r2, pc, #4	; (adr r2, 8008fa8 <OutputDbgTrace+0x18>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fc5 	.word	0x08008fc5
 8008fac:	08008fe9 	.word	0x08008fe9
 8008fb0:	08008fef 	.word	0x08008fef
 8008fb4:	08009003 	.word	0x08009003
 8008fb8:	0800900f 	.word	0x0800900f
 8008fbc:	08009015 	.word	0x08009015
 8008fc0:	08009023 	.word	0x08009023
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	7a5b      	ldrb	r3, [r3, #9]
 8008fcc:	2bff      	cmp	r3, #255	; 0xff
 8008fce:	d005      	beq.n	8008fdc <OutputDbgTrace+0x4c>
 8008fd0:	2bff      	cmp	r3, #255	; 0xff
 8008fd2:	dc05      	bgt.n	8008fe0 <OutputDbgTrace+0x50>
 8008fd4:	2b0e      	cmp	r3, #14
 8008fd6:	d005      	beq.n	8008fe4 <OutputDbgTrace+0x54>
 8008fd8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008fda:	e001      	b.n	8008fe0 <OutputDbgTrace+0x50>
          break;
 8008fdc:	bf00      	nop
 8008fde:	e027      	b.n	8009030 <OutputDbgTrace+0xa0>
          break;
 8008fe0:	bf00      	nop
 8008fe2:	e025      	b.n	8009030 <OutputDbgTrace+0xa0>
          break;
 8008fe4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008fe6:	e023      	b.n	8009030 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008fec:	e020      	b.n	8009030 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	7a5b      	ldrb	r3, [r3, #9]
 8008ff6:	2b0e      	cmp	r3, #14
 8008ff8:	d001      	beq.n	8008ffe <OutputDbgTrace+0x6e>
 8008ffa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008ffc:	e000      	b.n	8009000 <OutputDbgTrace+0x70>
          break;
 8008ffe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009000:	e016      	b.n	8009030 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	7a5b      	ldrb	r3, [r3, #9]
 800900a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800900c:	e010      	b.n	8009030 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009012:	e00d      	b.n	8009030 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	7a5b      	ldrb	r3, [r3, #9]
 800901c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800901e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009020:	e006      	b.n	8009030 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	7a5b      	ldrb	r3, [r3, #9]
 800902a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800902c:	e000      	b.n	8009030 <OutputDbgTrace+0xa0>

    default:
      break;
 800902e:	bf00      	nop
  }

  return;
 8009030:	bf00      	nop
}
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009046:	4b0f      	ldr	r3, [pc, #60]	; (8009084 <OTP_Read+0x48>)
 8009048:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800904a:	e002      	b.n	8009052 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	3b08      	subs	r3, #8
 8009050:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	3307      	adds	r3, #7
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	79fa      	ldrb	r2, [r7, #7]
 800905a:	429a      	cmp	r2, r3
 800905c:	d003      	beq.n	8009066 <OTP_Read+0x2a>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4a09      	ldr	r2, [pc, #36]	; (8009088 <OTP_Read+0x4c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d1f2      	bne.n	800904c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3307      	adds	r3, #7
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	79fa      	ldrb	r2, [r7, #7]
 800906e:	429a      	cmp	r2, r3
 8009070:	d001      	beq.n	8009076 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009076:	68fb      	ldr	r3, [r7, #12]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	1fff73f8 	.word	0x1fff73f8
 8009088:	1fff7000 	.word	0x1fff7000

0800908c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	605a      	str	r2, [r3, #4]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090b4:	f3ef 8310 	mrs	r3, PRIMASK
 80090b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80090be:	b672      	cpsid	i
}
 80090c0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d102      	bne.n	80090d2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80090cc:	2301      	movs	r3, #1
 80090ce:	75fb      	strb	r3, [r7, #23]
 80090d0:	e001      	b.n	80090d6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	f383 8810 	msr	PRIMASK, r3
}
 80090e0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090fa:	f3ef 8310 	mrs	r3, PRIMASK
 80090fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009100:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009102:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009104:	b672      	cpsid	i
}
 8009106:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	605a      	str	r2, [r3, #4]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	f383 8810 	msr	PRIMASK, r3
}
 800912e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009146:	f3ef 8310 	mrs	r3, PRIMASK
 800914a:	60fb      	str	r3, [r7, #12]
  return(result);
 800914c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800914e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009150:	b672      	cpsid	i
}
 8009152:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f383 8810 	msr	PRIMASK, r3
}
 800917a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009190:	f3ef 8310 	mrs	r3, PRIMASK
 8009194:	60fb      	str	r3, [r7, #12]
  return(result);
 8009196:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009198:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800919a:	b672      	cpsid	i
}
 800919c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6812      	ldr	r2, [r2, #0]
 80091a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	6852      	ldr	r2, [r2, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f383 8810 	msr	PRIMASK, r3
}
 80091bc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091d4:	f3ef 8310 	mrs	r3, PRIMASK
 80091d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091de:	b672      	cpsid	i
}
 80091e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff ffca 	bl	8009188 <LST_remove_node>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f383 8810 	msr	PRIMASK, r3
}
 80091fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009200:	bf00      	nop
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009208:	b480      	push	{r7}
 800920a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800920c:	4b03      	ldr	r3, [pc, #12]	; (800921c <LL_FLASH_GetUDN+0x14>)
 800920e:	681b      	ldr	r3, [r3, #0]
}
 8009210:	4618      	mov	r0, r3
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	1fff7580 	.word	0x1fff7580

08009220 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8009224:	4b03      	ldr	r3, [pc, #12]	; (8009234 <LL_FLASH_GetDeviceID+0x14>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	b2db      	uxtb	r3, r3
}
 800922a:	4618      	mov	r0, r3
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	1fff7584 	.word	0x1fff7584

08009238 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8009238:	b480      	push	{r7}
 800923a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800923c:	4b03      	ldr	r3, [pc, #12]	; (800924c <LL_FLASH_GetSTCompanyID+0x14>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	0a1b      	lsrs	r3, r3, #8
}
 8009242:	4618      	mov	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	1fff7584 	.word	0x1fff7584

08009250 <APP_BLE_Init>:
#endif
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8009250:	b5b0      	push	{r4, r5, r7, lr}
 8009252:	b08c      	sub	sp, #48	; 0x30
 8009254:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009256:	4b45      	ldr	r3, [pc, #276]	; (800936c <APP_BLE_Init+0x11c>)
 8009258:	463c      	mov	r4, r7
 800925a:	461d      	mov	r5, r3
 800925c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800925e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009268:	c407      	stmia	r4!, {r0, r1, r2}
 800926a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800926c:	f000 fe26 	bl	8009ebc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8009270:	2101      	movs	r1, #1
 8009272:	2002      	movs	r0, #2
 8009274:	f002 f96e 	bl	800b554 <UTIL_LPM_SetOffMode>

/**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
 UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009278:	4a3d      	ldr	r2, [pc, #244]	; (8009370 <APP_BLE_Init+0x120>)
 800927a:	2100      	movs	r1, #0
 800927c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009280:	f002 fab2 	bl	800b7e8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8009284:	463b      	mov	r3, r7
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff f998 	bl	80085bc <SHCI_C2_BLE_Init>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <APP_BLE_Init+0x46>
  {
    Error_Handler();
 8009292:	f7f8 fd14 	bl	8001cbe <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009296:	f000 fe27 	bl	8009ee8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800929a:	f7ff f8b7 	bl	800840c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800929e:	4a35      	ldr	r2, [pc, #212]	; (8009374 <APP_BLE_Init+0x124>)
 80092a0:	2100      	movs	r1, #0
 80092a2:	2002      	movs	r0, #2
 80092a4:	f002 faa0 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, ConnReq1);
 80092a8:	4a33      	ldr	r2, [pc, #204]	; (8009378 <APP_BLE_Init+0x128>)
 80092aa:	2100      	movs	r1, #0
 80092ac:	2004      	movs	r0, #4
 80092ae:	f002 fa9b 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_START_ADV_ID, UTIL_SEQ_RFU, Adv_Request);
 80092b2:	4a32      	ldr	r2, [pc, #200]	; (800937c <APP_BLE_Init+0x12c>)
 80092b4:	2100      	movs	r1, #0
 80092b6:	2001      	movs	r0, #1
 80092b8:	f002 fa96 	bl	800b7e8 <UTIL_SEQ_RegTask>
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN SCH_RegTask_Multi */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_2_ID, UTIL_SEQ_RFU, ConnReq2);
 80092bc:	4a30      	ldr	r2, [pc, #192]	; (8009380 <APP_BLE_Init+0x130>)
 80092be:	2100      	movs	r1, #0
 80092c0:	2008      	movs	r0, #8
 80092c2:	f002 fa91 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_3_ID, UTIL_SEQ_RFU, ConnReq3);
 80092c6:	4a2f      	ldr	r2, [pc, #188]	; (8009384 <APP_BLE_Init+0x134>)
 80092c8:	2100      	movs	r1, #0
 80092ca:	2010      	movs	r0, #16
 80092cc:	f002 fa8c 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_4_ID, UTIL_SEQ_RFU, ConnReq4);
 80092d0:	4a2d      	ldr	r2, [pc, #180]	; (8009388 <APP_BLE_Init+0x138>)
 80092d2:	2100      	movs	r1, #0
 80092d4:	2020      	movs	r0, #32
 80092d6:	f002 fa87 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_5_ID, UTIL_SEQ_RFU, ConnReq5);
 80092da:	4a2c      	ldr	r2, [pc, #176]	; (800938c <APP_BLE_Init+0x13c>)
 80092dc:	2100      	movs	r1, #0
 80092de:	2040      	movs	r0, #64	; 0x40
 80092e0:	f002 fa82 	bl	800b7e8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_DEV_6_ID, UTIL_SEQ_RFU, ConnReq6);
 80092e4:	4a2a      	ldr	r2, [pc, #168]	; (8009390 <APP_BLE_Init+0x140>)
 80092e6:	2100      	movs	r1, #0
 80092e8:	2080      	movs	r0, #128	; 0x80
 80092ea:	f002 fa7d 	bl	800b7e8 <UTIL_SEQ_RegTask>
#endif

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_IDLE;
 80092ee:	4b29      	ldr	r3, [pc, #164]	; (8009394 <APP_BLE_Init+0x144>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
  BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <APP_BLE_Init+0x144>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  BleApplicationContext.EndDevice1Found = 0x00;
 80092fe:	4b25      	ldr	r3, [pc, #148]	; (8009394 <APP_BLE_Init+0x144>)
 8009300:	2200      	movs	r2, #0
 8009302:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN Connection_Status_Multi */
  BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 8009306:	4b23      	ldr	r3, [pc, #140]	; (8009394 <APP_BLE_Init+0x144>)
 8009308:	2200      	movs	r2, #0
 800930a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 800930e:	4b21      	ldr	r3, [pc, #132]	; (8009394 <APP_BLE_Init+0x144>)
 8009310:	2200      	movs	r2, #0
 8009312:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 8009316:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <APP_BLE_Init+0x144>)
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 800931e:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <APP_BLE_Init+0x144>)
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 8009326:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <APP_BLE_Init+0x144>)
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

/* USER CODE END Connection_Status_Multi */
/* USER CODE BEGIN EndDeviceFound_Multi_Init */
  BleApplicationContext.EndDevice2Found = 0x00;
 800932e:	4b19      	ldr	r3, [pc, #100]	; (8009394 <APP_BLE_Init+0x144>)
 8009330:	2200      	movs	r2, #0
 8009332:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  BleApplicationContext.EndDevice3Found = 0x00;
 8009336:	4b17      	ldr	r3, [pc, #92]	; (8009394 <APP_BLE_Init+0x144>)
 8009338:	2200      	movs	r2, #0
 800933a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  BleApplicationContext.EndDevice4Found = 0x00;
 800933e:	4b15      	ldr	r3, [pc, #84]	; (8009394 <APP_BLE_Init+0x144>)
 8009340:	2200      	movs	r2, #0
 8009342:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  BleApplicationContext.EndDevice5Found = 0x00;
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <APP_BLE_Init+0x144>)
 8009348:	2200      	movs	r2, #0
 800934a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  BleApplicationContext.EndDevice6Found = 0x00;
 800934e:	4b11      	ldr	r3, [pc, #68]	; (8009394 <APP_BLE_Init+0x144>)
 8009350:	2200      	movs	r2, #0
 8009352:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
/* USER CODE END EndDeviceFound_Multi_Init */
#endif
/**
 * Initialize P2P Routeur Application
 */
  P2PR_APP_Init();
 8009356:	f001 fb07 	bl	800a968 <P2PR_APP_Init>

  /**
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 800935a:	2100      	movs	r1, #0
 800935c:	2001      	movs	r0, #1
 800935e:	f002 fa65 	bl	800b82c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8009362:	bf00      	nop
}
 8009364:	3730      	adds	r7, #48	; 0x30
 8009366:	46bd      	mov	sp, r7
 8009368:	bdb0      	pop	{r4, r5, r7, pc}
 800936a:	bf00      	nop
 800936c:	0800bb3c 	.word	0x0800bb3c
 8009370:	08008651 	.word	0x08008651
 8009374:	0800a07d 	.word	0x0800a07d
 8009378:	0800a185 	.word	0x0800a185
 800937c:	0800a101 	.word	0x0800a101
 8009380:	0800a201 	.word	0x0800a201
 8009384:	0800a27d 	.word	0x0800a27d
 8009388:	0800a2f9 	.word	0x0800a2f9
 800938c:	0800a375 	.word	0x0800a375
 8009390:	0800a3f1 	.word	0x0800a3f1
 8009394:	2000013c 	.word	0x2000013c

08009398 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8009398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800939a:	b09b      	sub	sp, #108	; 0x6c
 800939c:	af06      	add	r7, sp, #24
 800939e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blue_aci *blue_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3301      	adds	r3, #1
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t result;
  uint8_t role, event_type, event_data_size;
  int k = 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t *adv_report_data;
  uint8_t adtype, adlength;
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	3302      	adds	r3, #2
 80093ae:	63bb      	str	r3, [r7, #56]	; 0x38

  switch (event_pckt->evt)
 80093b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	2bff      	cmp	r3, #255	; 0xff
 80093b6:	d00a      	beq.n	80093ce <SVCCTL_App_Notification+0x36>
 80093b8:	2bff      	cmp	r3, #255	; 0xff
 80093ba:	f300 850c 	bgt.w	8009dd6 <SVCCTL_App_Notification+0xa3e>
 80093be:	2b05      	cmp	r3, #5
 80093c0:	f000 80e2 	beq.w	8009588 <SVCCTL_App_Notification+0x1f0>
 80093c4:	2b3e      	cmp	r3, #62	; 0x3e
 80093c6:	f000 81a0 	beq.w	800970a <SVCCTL_App_Notification+0x372>
 80093ca:	f000 bd04 	b.w	8009dd6 <SVCCTL_App_Notification+0xa3e>
    /* USER CODE BEGIN evt */

    /* USER CODE END evt */
    case EVT_VENDOR:
    {
      handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 80093ce:	4b6a      	ldr	r3, [pc, #424]	; (8009578 <SVCCTL_App_Notification+0x1e0>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]
      blue_evt = (evt_blue_aci*) event_pckt->data;
 80093d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d6:	3302      	adds	r3, #2
 80093d8:	637b      	str	r3, [r7, #52]	; 0x34
      /* USER CODE BEGIN EVT_VENDOR */

      /* USER CODE END EVT_VENDOR */
      switch (blue_evt->ecode)
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	f240 4207 	movw	r2, #1031	; 0x407
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d004      	beq.n	80093f2 <SVCCTL_App_Notification+0x5a>
 80093e8:	f640 0202 	movw	r2, #2050	; 0x802
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d06d      	beq.n	80094cc <SVCCTL_App_Notification+0x134>

        default:
          /* USER CODE BEGIN ecode_default */

          /* USER CODE END ecode_default */
          break;
 80093f0:	e0bf      	b.n	8009572 <SVCCTL_App_Notification+0x1da>
          aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blue_evt->data;
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	3302      	adds	r3, #2
 80093f6:	62bb      	str	r3, [r7, #40]	; 0x28
          if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	f040 80b4 	bne.w	800956a <SVCCTL_App_Notification+0x1d2>
              && gap_evt_proc_complete->Status == 0x00)
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	f040 80af 	bne.w	800956a <SVCCTL_App_Notification+0x1d2>
        	  HAL_GPIO_WritePin(LD_BLUE_GPIO_Port, LD_BLUE_Pin, GPIO_PIN_RESET);
 800940c:	2200      	movs	r2, #0
 800940e:	2120      	movs	r1, #32
 8009410:	485a      	ldr	r0, [pc, #360]	; (800957c <SVCCTL_App_Notification+0x1e4>)
 8009412:	f7fa fd01 	bl	8003e18 <HAL_GPIO_WritePin>
            if (BleApplicationContext.EndDevice1Found == 0x01
 8009416:	4b5a      	ldr	r3, [pc, #360]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009418:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800941c:	2b01      	cmp	r3, #1
 800941e:	d109      	bne.n	8009434 <SVCCTL_App_Notification+0x9c>
                && BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 8009420:	4b57      	ldr	r3, [pc, #348]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009422:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009426:	2b05      	cmp	r3, #5
 8009428:	d004      	beq.n	8009434 <SVCCTL_App_Notification+0x9c>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800942a:	2100      	movs	r1, #0
 800942c:	2004      	movs	r0, #4
 800942e:	f002 f9fd 	bl	800b82c <UTIL_SEQ_SetTask>
 8009432:	e04a      	b.n	80094ca <SVCCTL_App_Notification+0x132>
            else if (BleApplicationContext.EndDevice2Found == 0x01
 8009434:	4b52      	ldr	r3, [pc, #328]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009436:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800943a:	2b01      	cmp	r3, #1
 800943c:	d109      	bne.n	8009452 <SVCCTL_App_Notification+0xba>
                && BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 800943e:	4b50      	ldr	r3, [pc, #320]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009440:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009444:	2b05      	cmp	r3, #5
 8009446:	d004      	beq.n	8009452 <SVCCTL_App_Notification+0xba>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 8009448:	2100      	movs	r1, #0
 800944a:	2008      	movs	r0, #8
 800944c:	f002 f9ee 	bl	800b82c <UTIL_SEQ_SetTask>
 8009450:	e03b      	b.n	80094ca <SVCCTL_App_Notification+0x132>
            else if (BleApplicationContext.EndDevice3Found == 0x01
 8009452:	4b4b      	ldr	r3, [pc, #300]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009454:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009458:	2b01      	cmp	r3, #1
 800945a:	d109      	bne.n	8009470 <SVCCTL_App_Notification+0xd8>
                && BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 800945c:	4b48      	ldr	r3, [pc, #288]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 800945e:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009462:	2b05      	cmp	r3, #5
 8009464:	d004      	beq.n	8009470 <SVCCTL_App_Notification+0xd8>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8009466:	2100      	movs	r1, #0
 8009468:	2010      	movs	r0, #16
 800946a:	f002 f9df 	bl	800b82c <UTIL_SEQ_SetTask>
 800946e:	e02c      	b.n	80094ca <SVCCTL_App_Notification+0x132>
            else if (BleApplicationContext.EndDevice4Found == 0x01
 8009470:	4b43      	ldr	r3, [pc, #268]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009472:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009476:	2b01      	cmp	r3, #1
 8009478:	d109      	bne.n	800948e <SVCCTL_App_Notification+0xf6>
                && BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 800947a:	4b41      	ldr	r3, [pc, #260]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 800947c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009480:	2b05      	cmp	r3, #5
 8009482:	d004      	beq.n	800948e <SVCCTL_App_Notification+0xf6>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 8009484:	2100      	movs	r1, #0
 8009486:	2020      	movs	r0, #32
 8009488:	f002 f9d0 	bl	800b82c <UTIL_SEQ_SetTask>
 800948c:	e01d      	b.n	80094ca <SVCCTL_App_Notification+0x132>
            else if (BleApplicationContext.EndDevice5Found == 0x01
 800948e:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 8009490:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8009494:	2b01      	cmp	r3, #1
 8009496:	d109      	bne.n	80094ac <SVCCTL_App_Notification+0x114>
                && BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 8009498:	4b39      	ldr	r3, [pc, #228]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 800949a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800949e:	2b05      	cmp	r3, #5
 80094a0:	d004      	beq.n	80094ac <SVCCTL_App_Notification+0x114>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 80094a2:	2100      	movs	r1, #0
 80094a4:	2040      	movs	r0, #64	; 0x40
 80094a6:	f002 f9c1 	bl	800b82c <UTIL_SEQ_SetTask>
 80094aa:	e00e      	b.n	80094ca <SVCCTL_App_Notification+0x132>
            else if (BleApplicationContext.EndDevice6Found == 0x01
 80094ac:	4b34      	ldr	r3, [pc, #208]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 80094ae:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d159      	bne.n	800956a <SVCCTL_App_Notification+0x1d2>
                && BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 80094b6:	4b32      	ldr	r3, [pc, #200]	; (8009580 <SVCCTL_App_Notification+0x1e8>)
 80094b8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80094bc:	2b05      	cmp	r3, #5
 80094be:	d054      	beq.n	800956a <SVCCTL_App_Notification+0x1d2>
              UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 80094c0:	2100      	movs	r1, #0
 80094c2:	2080      	movs	r0, #128	; 0x80
 80094c4:	f002 f9b2 	bl	800b82c <UTIL_SEQ_SetTask>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 80094c8:	e04f      	b.n	800956a <SVCCTL_App_Notification+0x1d2>
 80094ca:	e04e      	b.n	800956a <SVCCTL_App_Notification+0x1d2>
          aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blue_evt->data;
 80094cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ce:	3302      	adds	r3, #2
 80094d0:	633b      	str	r3, [r7, #48]	; 0x30
          APP_BLE_p2p_Conn_Update_req.Connection_Handle = pr->Connection_Handle;
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	4b2a      	ldr	r3, [pc, #168]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 80094da:	801a      	strh	r2, [r3, #0]
          APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	789a      	ldrb	r2, [r3, #2]
 80094e0:	4b28      	ldr	r3, [pc, #160]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 80094e2:	709a      	strb	r2, [r3, #2]
          APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	4b25      	ldr	r3, [pc, #148]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 80094ee:	809a      	strh	r2, [r3, #4]
          APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	4b22      	ldr	r3, [pc, #136]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 80094fa:	80da      	strh	r2, [r3, #6]
          APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 80094fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009502:	b29a      	uxth	r2, r3
 8009504:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009506:	811a      	strh	r2, [r3, #8]
          APP_BLE_p2p_Conn_Update_req.Slave_Latency = pr->Slave_Latency;
 8009508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950a:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800950e:	b29a      	uxth	r2, r3
 8009510:	4b1c      	ldr	r3, [pc, #112]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009512:	815a      	strh	r2, [r3, #10]
          APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800951a:	b29a      	uxth	r2, r3
 800951c:	4b19      	ldr	r3, [pc, #100]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 800951e:	819a      	strh	r2, [r3, #12]
          result = aci_l2cap_connection_parameter_update_resp(APP_BLE_p2p_Conn_Update_req.Connection_Handle,
 8009520:	4b18      	ldr	r3, [pc, #96]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009522:	8818      	ldrh	r0, [r3, #0]
 8009524:	4b17      	ldr	r3, [pc, #92]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009526:	88d9      	ldrh	r1, [r3, #6]
 8009528:	4b16      	ldr	r3, [pc, #88]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 800952a:	891c      	ldrh	r4, [r3, #8]
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 800952e:	895d      	ldrh	r5, [r3, #10]
 8009530:	4b14      	ldr	r3, [pc, #80]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009532:	899b      	ldrh	r3, [r3, #12]
 8009534:	4a13      	ldr	r2, [pc, #76]	; (8009584 <SVCCTL_App_Notification+0x1ec>)
 8009536:	7892      	ldrb	r2, [r2, #2]
 8009538:	2600      	movs	r6, #0
 800953a:	9604      	str	r6, [sp, #16]
 800953c:	9203      	str	r2, [sp, #12]
 800953e:	2210      	movs	r2, #16
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	2210      	movs	r2, #16
 8009544:	9201      	str	r2, [sp, #4]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	462b      	mov	r3, r5
 800954a:	4622      	mov	r2, r4
 800954c:	f7fe fc34 	bl	8007db8 <aci_l2cap_connection_parameter_update_resp>
 8009550:	4603      	mov	r3, r0
 8009552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if(result != BLE_STATUS_SUCCESS) {
 8009556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <SVCCTL_App_Notification+0x1d8>
        	  HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800955e:	2201      	movs	r2, #1
 8009560:	2102      	movs	r1, #2
 8009562:	4806      	ldr	r0, [pc, #24]	; (800957c <SVCCTL_App_Notification+0x1e4>)
 8009564:	f7fa fc58 	bl	8003e18 <HAL_GPIO_WritePin>
        break;
 8009568:	e002      	b.n	8009570 <SVCCTL_App_Notification+0x1d8>
        break; /* EVT_BLUE_GAP_PAIRING_CMPLT */
 800956a:	bf00      	nop
 800956c:	f000 bc33 	b.w	8009dd6 <SVCCTL_App_Notification+0xa3e>
        break;
 8009570:	bf00      	nop
      }
    }
    break; /* EVT_VENDOR */
 8009572:	f000 bc30 	b.w	8009dd6 <SVCCTL_App_Notification+0xa3e>
 8009576:	bf00      	nop
 8009578:	20000588 	.word	0x20000588
 800957c:	48000400 	.word	0x48000400
 8009580:	2000013c 	.word	0x2000013c
 8009584:	200001e4 	.word	0x200001e4
    case EVT_DISCONN_COMPLETE:

      /* USER CODE BEGIN EVT_DISCONN_COMPLETE */

      /* USER CODE END EVT_DISCONN_COMPLETE */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice1)
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800958e:	b29a      	uxth	r2, r3
 8009590:	4b76      	ldr	r3, [pc, #472]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009592:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009596:	429a      	cmp	r2, r3
 8009598:	d112      	bne.n	80095c0 <SVCCTL_App_Notification+0x228>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 1 \n");
        BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 800959a:	4b74      	ldr	r3, [pc, #464]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 800959c:	2200      	movs	r2, #0
 800959e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
        BleApplicationContext.connectionHandleEndDevice1 = 0xFFFF;
 80095a2:	4b72      	ldr	r3, [pc, #456]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80095a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095a8:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        handleNotification.P2P_Evt_Opcode = P2P_SERVER1_DISCON_HANDLE_EVT;
 80095ac:	4b70      	ldr	r3, [pc, #448]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80095b2:	4b70      	ldr	r3, [pc, #448]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 80095b4:	881a      	ldrh	r2, [r3, #0]
 80095b6:	4b6e      	ldr	r3, [pc, #440]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095b8:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80095ba:	486d      	ldr	r0, [pc, #436]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095bc:	f000 ff56 	bl	800a46c <Evt_Notification>
      }

      if (cc->Connection_Handle == BleApplicationContext.connectionHandleCentral)
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	4b68      	ldr	r3, [pc, #416]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80095ca:	f8b3 3094 	ldrh.w	r3, [r3, #148]	; 0x94
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d10d      	bne.n	80095ee <SVCCTL_App_Notification+0x256>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF SMART PHONE \n");
        BleApplicationContext.connectionHandleCentral = APP_BLE_IDLE;
 80095d2:	4b66      	ldr	r3, [pc, #408]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        handleNotification.P2P_Evt_Opcode = SMART_PHONE1_DISCON_HANDLE_EVT;
 80095da:	4b65      	ldr	r3, [pc, #404]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095dc:	2203      	movs	r2, #3
 80095de:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = 0xFFFF;
 80095e0:	4b63      	ldr	r3, [pc, #396]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095e6:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80095e8:	4861      	ldr	r0, [pc, #388]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80095ea:	f000 ff3f 	bl	800a46c <Evt_Notification>
      }

#if (CFG_P2P_DEMO_MULTI != 0)
      /* USER CODE BEGIN EVT_DISCONN_COMPLETE_Multi */
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice2)
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	4b5d      	ldr	r3, [pc, #372]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80095f8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d112      	bne.n	8009626 <SVCCTL_App_Notification+0x28e>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 2 \n");
        BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 8009600:	4b5a      	ldr	r3, [pc, #360]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009602:	2200      	movs	r2, #0
 8009604:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
        BleApplicationContext.connectionHandleEndDevice2 = 0xFFFF;
 8009608:	4b58      	ldr	r3, [pc, #352]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 800960a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800960e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        handleNotification.P2P_Evt_Opcode = P2P_SERVER2_DISCON_HANDLE_EVT;
 8009612:	4b57      	ldr	r3, [pc, #348]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009614:	2209      	movs	r2, #9
 8009616:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8009618:	4b56      	ldr	r3, [pc, #344]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 800961a:	881a      	ldrh	r2, [r3, #0]
 800961c:	4b54      	ldr	r3, [pc, #336]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 800961e:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8009620:	4853      	ldr	r0, [pc, #332]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009622:	f000 ff23 	bl	800a46c <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice3)
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800962c:	b29a      	uxth	r2, r3
 800962e:	4b4f      	ldr	r3, [pc, #316]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009630:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009634:	429a      	cmp	r2, r3
 8009636:	d112      	bne.n	800965e <SVCCTL_App_Notification+0x2c6>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 3 \n");
        BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 8009638:	4b4c      	ldr	r3, [pc, #304]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 800963a:	2200      	movs	r2, #0
 800963c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
        BleApplicationContext.connectionHandleEndDevice3 = 0xFFFF;
 8009640:	4b4a      	ldr	r3, [pc, #296]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009646:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
        handleNotification.P2P_Evt_Opcode = P2P_SERVER3_DISCON_HANDLE_EVT;
 800964a:	4b49      	ldr	r3, [pc, #292]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 800964c:	220a      	movs	r2, #10
 800964e:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8009650:	4b48      	ldr	r3, [pc, #288]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 8009652:	881a      	ldrh	r2, [r3, #0]
 8009654:	4b46      	ldr	r3, [pc, #280]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009656:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8009658:	4845      	ldr	r0, [pc, #276]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 800965a:	f000 ff07 	bl	800a46c <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice4)
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009664:	b29a      	uxth	r2, r3
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009668:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800966c:	429a      	cmp	r2, r3
 800966e:	d112      	bne.n	8009696 <SVCCTL_App_Notification+0x2fe>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 4 \n");
        BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 8009670:	4b3e      	ldr	r3, [pc, #248]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        BleApplicationContext.connectionHandleEndDevice4 = 0xFFFF;
 8009678:	4b3c      	ldr	r3, [pc, #240]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 800967a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800967e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
        handleNotification.P2P_Evt_Opcode = P2P_SERVER4_DISCON_HANDLE_EVT;
 8009682:	4b3b      	ldr	r3, [pc, #236]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009684:	220b      	movs	r2, #11
 8009686:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 8009688:	4b3a      	ldr	r3, [pc, #232]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 800968a:	881a      	ldrh	r2, [r3, #0]
 800968c:	4b38      	ldr	r3, [pc, #224]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 800968e:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8009690:	4837      	ldr	r0, [pc, #220]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009692:	f000 feeb 	bl	800a46c <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice5)
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800969c:	b29a      	uxth	r2, r3
 800969e:	4b33      	ldr	r3, [pc, #204]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096a0:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d112      	bne.n	80096ce <SVCCTL_App_Notification+0x336>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 5 \n");
        BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 80096a8:	4b30      	ldr	r3, [pc, #192]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
        BleApplicationContext.connectionHandleEndDevice5 = 0xFFFF;
 80096b0:	4b2e      	ldr	r3, [pc, #184]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096b6:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
        handleNotification.P2P_Evt_Opcode = P2P_SERVER5_DISCON_HANDLE_EVT;
 80096ba:	4b2d      	ldr	r3, [pc, #180]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80096bc:	220c      	movs	r2, #12
 80096be:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80096c0:	4b2c      	ldr	r3, [pc, #176]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 80096c2:	881a      	ldrh	r2, [r3, #0]
 80096c4:	4b2a      	ldr	r3, [pc, #168]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80096c6:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 80096c8:	4829      	ldr	r0, [pc, #164]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80096ca:	f000 fecf 	bl	800a46c <Evt_Notification>
      }
      if (cc->Connection_Handle == BleApplicationContext.connectionHandleEndDevice6)
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	4b25      	ldr	r3, [pc, #148]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096d8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80096dc:	429a      	cmp	r2, r3
 80096de:	f040 8379 	bne.w	8009dd4 <SVCCTL_App_Notification+0xa3c>
      {
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT OF END DEVICE 6 \n");
        BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 80096e2:	4b22      	ldr	r3, [pc, #136]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
        BleApplicationContext.connectionHandleEndDevice6 = 0xFFFF;
 80096ea:	4b20      	ldr	r3, [pc, #128]	; (800976c <SVCCTL_App_Notification+0x3d4>)
 80096ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        handleNotification.P2P_Evt_Opcode = P2P_SERVER6_DISCON_HANDLE_EVT;
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 80096f6:	220d      	movs	r2, #13
 80096f8:	701a      	strb	r2, [r3, #0]
        handleNotification.ConnectionHandle = connection_handle;
 80096fa:	4b1e      	ldr	r3, [pc, #120]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 80096fc:	881a      	ldrh	r2, [r3, #0]
 80096fe:	4b1c      	ldr	r3, [pc, #112]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009700:	805a      	strh	r2, [r3, #2]
        Evt_Notification(&handleNotification);
 8009702:	481b      	ldr	r0, [pc, #108]	; (8009770 <SVCCTL_App_Notification+0x3d8>)
 8009704:	f000 feb2 	bl	800a46c <Evt_Notification>


      /* USER CODE END EVT_DISCONN_COMPLETE_Multi */
#endif

      break; /* EVT_DISCONN_COMPLETE */
 8009708:	e364      	b.n	8009dd4 <SVCCTL_App_Notification+0xa3c>
    case EVT_LE_META_EVENT:

      /* USER CODE BEGIN EVT_LE_META_EVENT */

      /* USER CODE END EVT_LE_META_EVENT */
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800970a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970c:	3302      	adds	r3, #2
 800970e:	627b      	str	r3, [r7, #36]	; 0x24

      switch (meta_evt->subevent)
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d003      	beq.n	8009720 <SVCCTL_App_Notification+0x388>
 8009718:	2b02      	cmp	r3, #2
 800971a:	f000 8206 	beq.w	8009b2a <SVCCTL_App_Notification+0x792>

          break;

      }

      break; /* HCI_EVT_LE_META_EVENT */
 800971e:	e35a      	b.n	8009dd6 <SVCCTL_App_Notification+0xa3e>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	3301      	adds	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
          connection_handle = connection_complete_event->Connection_Handle;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800972c:	b29a      	uxth	r2, r3
 800972e:	4b11      	ldr	r3, [pc, #68]	; (8009774 <SVCCTL_App_Notification+0x3dc>)
 8009730:	801a      	strh	r2, [r3, #0]
          role = connection_complete_event->Role;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	78db      	ldrb	r3, [r3, #3]
 8009736:	73fb      	strb	r3, [r7, #15]
          if (role == 0x00)
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 81e5 	bne.w	8009b0a <SVCCTL_App_Notification+0x772>
            uint8_t dev1 = 1
 8009740:	2301      	movs	r3, #1
 8009742:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
           , dev2 = 1,dev3 = 1,dev4 = 1,dev5 = 1,dev6 = 1
 8009746:	2301      	movs	r3, #1
 8009748:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 800974c:	2301      	movs	r3, #1
 800974e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8009758:	2301      	movs	r3, #1
 800975a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 8009764:	2300      	movs	r3, #0
 8009766:	643b      	str	r3, [r7, #64]	; 0x40
 8009768:	e087      	b.n	800987a <SVCCTL_App_Notification+0x4e2>
 800976a:	bf00      	nop
 800976c:	2000013c 	.word	0x2000013c
 8009770:	20000588 	.word	0x20000588
 8009774:	2000059a 	.word	0x2000059a
              dev1 &= (P2P_SERVER1_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8009778:	4aad      	ldr	r2, [pc, #692]	; (8009a30 <SVCCTL_App_Notification+0x698>)
 800977a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977c:	4413      	add	r3, r2
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	6939      	ldr	r1, [r7, #16]
 8009782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009784:	440b      	add	r3, r1
 8009786:	3305      	adds	r3, #5
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	bf0c      	ite	eq
 800978e:	2301      	moveq	r3, #1
 8009790:	2300      	movne	r3, #0
 8009792:	b2db      	uxtb	r3, r3
 8009794:	b25a      	sxtb	r2, r3
 8009796:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800979a:	4013      	ands	r3, r2
 800979c:	b25b      	sxtb	r3, r3
 800979e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
              dev2 &= (P2P_SERVER2_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80097a2:	4aa4      	ldr	r2, [pc, #656]	; (8009a34 <SVCCTL_App_Notification+0x69c>)
 80097a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097a6:	4413      	add	r3, r2
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	6939      	ldr	r1, [r7, #16]
 80097ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ae:	440b      	add	r3, r1
 80097b0:	3305      	adds	r3, #5
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	bf0c      	ite	eq
 80097b8:	2301      	moveq	r3, #1
 80097ba:	2300      	movne	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	b25a      	sxtb	r2, r3
 80097c0:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80097c4:	4013      	ands	r3, r2
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              dev3 &= (P2P_SERVER3_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80097cc:	4a9a      	ldr	r2, [pc, #616]	; (8009a38 <SVCCTL_App_Notification+0x6a0>)
 80097ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d0:	4413      	add	r3, r2
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	6939      	ldr	r1, [r7, #16]
 80097d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d8:	440b      	add	r3, r1
 80097da:	3305      	adds	r3, #5
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	bf0c      	ite	eq
 80097e2:	2301      	moveq	r3, #1
 80097e4:	2300      	movne	r3, #0
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	b25a      	sxtb	r2, r3
 80097ea:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 80097ee:	4013      	ands	r3, r2
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
              dev4 &= (P2P_SERVER4_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 80097f6:	4a91      	ldr	r2, [pc, #580]	; (8009a3c <SVCCTL_App_Notification+0x6a4>)
 80097f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fa:	4413      	add	r3, r2
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	6939      	ldr	r1, [r7, #16]
 8009800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009802:	440b      	add	r3, r1
 8009804:	3305      	adds	r3, #5
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	bf0c      	ite	eq
 800980c:	2301      	moveq	r3, #1
 800980e:	2300      	movne	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	b25a      	sxtb	r2, r3
 8009814:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8009818:	4013      	ands	r3, r2
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
              dev5 &= (P2P_SERVER5_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 8009820:	4a87      	ldr	r2, [pc, #540]	; (8009a40 <SVCCTL_App_Notification+0x6a8>)
 8009822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009824:	4413      	add	r3, r2
 8009826:	781a      	ldrb	r2, [r3, #0]
 8009828:	6939      	ldr	r1, [r7, #16]
 800982a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982c:	440b      	add	r3, r1
 800982e:	3305      	adds	r3, #5
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	bf0c      	ite	eq
 8009836:	2301      	moveq	r3, #1
 8009838:	2300      	movne	r3, #0
 800983a:	b2db      	uxtb	r3, r3
 800983c:	b25a      	sxtb	r2, r3
 800983e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009842:	4013      	ands	r3, r2
 8009844:	b25b      	sxtb	r3, r3
 8009846:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
              dev6 &= (P2P_SERVER6_BDADDR[i] == connection_complete_event->Peer_Address[i]);
 800984a:	4a7e      	ldr	r2, [pc, #504]	; (8009a44 <SVCCTL_App_Notification+0x6ac>)
 800984c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984e:	4413      	add	r3, r2
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	6939      	ldr	r1, [r7, #16]
 8009854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009856:	440b      	add	r3, r1
 8009858:	3305      	adds	r3, #5
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	b25a      	sxtb	r2, r3
 8009868:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 800986c:	4013      	ands	r3, r2
 800986e:	b25b      	sxtb	r3, r3
 8009870:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
            for (int i = 0; i < 6; i++)
 8009874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009876:	3301      	adds	r3, #1
 8009878:	643b      	str	r3, [r7, #64]	; 0x40
 800987a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800987c:	2b05      	cmp	r3, #5
 800987e:	f77f af7b 	ble.w	8009778 <SVCCTL_App_Notification+0x3e0>
            if (dev1 == 1)
 8009882:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8009886:	2b01      	cmp	r3, #1
 8009888:	d12d      	bne.n	80098e6 <SVCCTL_App_Notification+0x54e>
              BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTED;
 800988a:	4b6f      	ldr	r3, [pc, #444]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 800988c:	2205      	movs	r2, #5
 800988e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
              BleApplicationContext.connectionHandleEndDevice1 = connection_handle;
 8009892:	4b6e      	ldr	r3, [pc, #440]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009894:	881a      	ldrh	r2, [r3, #0]
 8009896:	4b6c      	ldr	r3, [pc, #432]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009898:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
              BleApplicationContext.BleApplicationContext_legacy.connectionHandle[0] = connection_handle;
 800989c:	4b6b      	ldr	r3, [pc, #428]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 800989e:	881a      	ldrh	r2, [r3, #0]
 80098a0:	4b69      	ldr	r3, [pc, #420]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098a2:	82da      	strh	r2, [r3, #22]
              handleNotification.P2P_Evt_Opcode = P2P_SERVER1_CONN_HANDLE_EVT;
 80098a4:	4b6a      	ldr	r3, [pc, #424]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	701a      	strb	r2, [r3, #0]
              handleNotification.ConnectionHandle = connection_handle;
 80098aa:	4b68      	ldr	r3, [pc, #416]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 80098ac:	881a      	ldrh	r2, [r3, #0]
 80098ae:	4b68      	ldr	r3, [pc, #416]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80098b0:	805a      	strh	r2, [r3, #2]
              Evt_Notification(&handleNotification);
 80098b2:	4867      	ldr	r0, [pc, #412]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80098b4:	f000 fdda 	bl	800a46c <Evt_Notification>
              result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice1);
 80098b8:	4b63      	ldr	r3, [pc, #396]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098ba:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd ff6b 	bl	800779a <aci_gatt_disc_all_primary_services>
 80098c4:	4603      	mov	r3, r0
 80098c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                  if ((BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 80098ca:	4b5f      	ldr	r3, [pc, #380]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098cc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80098d0:	2b05      	cmp	r3, #5
 80098d2:	d008      	beq.n	80098e6 <SVCCTL_App_Notification+0x54e>
                      && (BleApplicationContext.EndDevice2Found == 0x01))
 80098d4:	4b5c      	ldr	r3, [pc, #368]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098d6:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d103      	bne.n	80098e6 <SVCCTL_App_Notification+0x54e>
                    UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 80098de:	2100      	movs	r1, #0
 80098e0:	2008      	movs	r0, #8
 80098e2:	f001 ffa3 	bl	800b82c <UTIL_SEQ_SetTask>
            if (dev2 == 1)
 80098e6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d12d      	bne.n	800994a <SVCCTL_App_Notification+0x5b2>
                BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTED;
 80098ee:	4b56      	ldr	r3, [pc, #344]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098f0:	2205      	movs	r2, #5
 80098f2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
                BleApplicationContext.connectionHandleEndDevice2 = connection_handle;
 80098f6:	4b55      	ldr	r3, [pc, #340]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 80098f8:	881a      	ldrh	r2, [r3, #0]
 80098fa:	4b53      	ldr	r3, [pc, #332]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80098fc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
                BleApplicationContext.BleApplicationContext_legacy.connectionHandle[1] = connection_handle;
 8009900:	4b52      	ldr	r3, [pc, #328]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009902:	881a      	ldrh	r2, [r3, #0]
 8009904:	4b50      	ldr	r3, [pc, #320]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009906:	831a      	strh	r2, [r3, #24]
                handleNotification.P2P_Evt_Opcode = P2P_SERVER2_CONN_HANDLE_EVT;
 8009908:	4b51      	ldr	r3, [pc, #324]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 800990a:	2204      	movs	r2, #4
 800990c:	701a      	strb	r2, [r3, #0]
                handleNotification.ConnectionHandle = connection_handle;
 800990e:	4b4f      	ldr	r3, [pc, #316]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009910:	881a      	ldrh	r2, [r3, #0]
 8009912:	4b4f      	ldr	r3, [pc, #316]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 8009914:	805a      	strh	r2, [r3, #2]
                Evt_Notification(&handleNotification);
 8009916:	484e      	ldr	r0, [pc, #312]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 8009918:	f000 fda8 	bl	800a46c <Evt_Notification>
                result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice2);
 800991c:	4b4a      	ldr	r3, [pc, #296]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 800991e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009922:	4618      	mov	r0, r3
 8009924:	f7fd ff39 	bl	800779a <aci_gatt_disc_all_primary_services>
 8009928:	4603      	mov	r3, r0
 800992a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if ((BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 800992e:	4b46      	ldr	r3, [pc, #280]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009930:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009934:	2b05      	cmp	r3, #5
 8009936:	d008      	beq.n	800994a <SVCCTL_App_Notification+0x5b2>
                    && (BleApplicationContext.EndDevice1Found == 0x01))
 8009938:	4b43      	ldr	r3, [pc, #268]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 800993a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800993e:	2b01      	cmp	r3, #1
 8009940:	d103      	bne.n	800994a <SVCCTL_App_Notification+0x5b2>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8009942:	2100      	movs	r1, #0
 8009944:	2004      	movs	r0, #4
 8009946:	f001 ff71 	bl	800b82c <UTIL_SEQ_SetTask>
              if (dev3 == 1)
 800994a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800994e:	2b01      	cmp	r3, #1
 8009950:	d12d      	bne.n	80099ae <SVCCTL_App_Notification+0x616>
                BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTED;
 8009952:	4b3d      	ldr	r3, [pc, #244]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009954:	2205      	movs	r2, #5
 8009956:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
                BleApplicationContext.connectionHandleEndDevice3 = connection_handle;
 800995a:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 800995c:	881a      	ldrh	r2, [r3, #0]
 800995e:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009960:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
                BleApplicationContext.BleApplicationContext_legacy.connectionHandle[2] = connection_handle;
 8009964:	4b39      	ldr	r3, [pc, #228]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009966:	881a      	ldrh	r2, [r3, #0]
 8009968:	4b37      	ldr	r3, [pc, #220]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 800996a:	835a      	strh	r2, [r3, #26]
                handleNotification.P2P_Evt_Opcode = P2P_SERVER3_CONN_HANDLE_EVT;
 800996c:	4b38      	ldr	r3, [pc, #224]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 800996e:	2205      	movs	r2, #5
 8009970:	701a      	strb	r2, [r3, #0]
                handleNotification.ConnectionHandle = connection_handle;
 8009972:	4b36      	ldr	r3, [pc, #216]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009974:	881a      	ldrh	r2, [r3, #0]
 8009976:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 8009978:	805a      	strh	r2, [r3, #2]
                Evt_Notification(&handleNotification);
 800997a:	4835      	ldr	r0, [pc, #212]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 800997c:	f000 fd76 	bl	800a46c <Evt_Notification>
                result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice3);
 8009980:	4b31      	ldr	r3, [pc, #196]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009982:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009986:	4618      	mov	r0, r3
 8009988:	f7fd ff07 	bl	800779a <aci_gatt_disc_all_primary_services>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if ((BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 8009992:	4b2d      	ldr	r3, [pc, #180]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009994:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009998:	2b05      	cmp	r3, #5
 800999a:	d008      	beq.n	80099ae <SVCCTL_App_Notification+0x616>
                    && (BleApplicationContext.EndDevice4Found == 0x01))
 800999c:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 800999e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d103      	bne.n	80099ae <SVCCTL_App_Notification+0x616>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 80099a6:	2100      	movs	r1, #0
 80099a8:	2020      	movs	r0, #32
 80099aa:	f001 ff3f 	bl	800b82c <UTIL_SEQ_SetTask>
              if (dev4 == 1)
 80099ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d12d      	bne.n	8009a12 <SVCCTL_App_Notification+0x67a>
                BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTED;
 80099b6:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80099b8:	2205      	movs	r2, #5
 80099ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
                BleApplicationContext.connectionHandleEndDevice4 = connection_handle;
 80099be:	4b23      	ldr	r3, [pc, #140]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 80099c0:	881a      	ldrh	r2, [r3, #0]
 80099c2:	4b21      	ldr	r3, [pc, #132]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80099c4:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
                BleApplicationContext.BleApplicationContext_legacy.connectionHandle[3] = connection_handle;
 80099c8:	4b20      	ldr	r3, [pc, #128]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 80099ca:	881a      	ldrh	r2, [r3, #0]
 80099cc:	4b1e      	ldr	r3, [pc, #120]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80099ce:	839a      	strh	r2, [r3, #28]
                handleNotification.P2P_Evt_Opcode = P2P_SERVER4_CONN_HANDLE_EVT;
 80099d0:	4b1f      	ldr	r3, [pc, #124]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80099d2:	2206      	movs	r2, #6
 80099d4:	701a      	strb	r2, [r3, #0]
                handleNotification.ConnectionHandle = connection_handle;
 80099d6:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 80099d8:	881a      	ldrh	r2, [r3, #0]
 80099da:	4b1d      	ldr	r3, [pc, #116]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80099dc:	805a      	strh	r2, [r3, #2]
                Evt_Notification(&handleNotification);
 80099de:	481c      	ldr	r0, [pc, #112]	; (8009a50 <SVCCTL_App_Notification+0x6b8>)
 80099e0:	f000 fd44 	bl	800a46c <Evt_Notification>
                result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice4);
 80099e4:	4b18      	ldr	r3, [pc, #96]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80099e6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fd fed5 	bl	800779a <aci_gatt_disc_all_primary_services>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if ((BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 80099f8:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80099fc:	2b05      	cmp	r3, #5
 80099fe:	d008      	beq.n	8009a12 <SVCCTL_App_Notification+0x67a>
                    && (BleApplicationContext.EndDevice3Found == 0x01))
 8009a00:	4b11      	ldr	r3, [pc, #68]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009a02:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d103      	bne.n	8009a12 <SVCCTL_App_Notification+0x67a>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	2010      	movs	r0, #16
 8009a0e:	f001 ff0d 	bl	800b82c <UTIL_SEQ_SetTask>
              if (dev5 == 1)
 8009a12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d141      	bne.n	8009a9e <SVCCTL_App_Notification+0x706>
                BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTED;
 8009a1a:	4b0b      	ldr	r3, [pc, #44]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009a1c:	2205      	movs	r2, #5
 8009a1e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
                BleApplicationContext.connectionHandleEndDevice5 = connection_handle;
 8009a22:	4b0a      	ldr	r3, [pc, #40]	; (8009a4c <SVCCTL_App_Notification+0x6b4>)
 8009a24:	881a      	ldrh	r2, [r3, #0]
 8009a26:	4b08      	ldr	r3, [pc, #32]	; (8009a48 <SVCCTL_App_Notification+0x6b0>)
 8009a28:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8009a2c:	e012      	b.n	8009a54 <SVCCTL_App_Notification+0x6bc>
 8009a2e:	bf00      	nop
 8009a30:	2000059c 	.word	0x2000059c
 8009a34:	200005a4 	.word	0x200005a4
 8009a38:	200005ac 	.word	0x200005ac
 8009a3c:	20000594 	.word	0x20000594
 8009a40:	200005b4 	.word	0x200005b4
 8009a44:	20000580 	.word	0x20000580
 8009a48:	2000013c 	.word	0x2000013c
 8009a4c:	2000059a 	.word	0x2000059a
 8009a50:	20000588 	.word	0x20000588
                BleApplicationContext.BleApplicationContext_legacy.connectionHandle[4] = connection_handle;
 8009a54:	4bb1      	ldr	r3, [pc, #708]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009a56:	881a      	ldrh	r2, [r3, #0]
 8009a58:	4bb1      	ldr	r3, [pc, #708]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009a5a:	83da      	strh	r2, [r3, #30]
                handleNotification.P2P_Evt_Opcode = P2P_SERVER5_CONN_HANDLE_EVT;
 8009a5c:	4bb1      	ldr	r3, [pc, #708]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009a5e:	2207      	movs	r2, #7
 8009a60:	701a      	strb	r2, [r3, #0]
                handleNotification.ConnectionHandle = connection_handle;
 8009a62:	4bae      	ldr	r3, [pc, #696]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009a64:	881a      	ldrh	r2, [r3, #0]
 8009a66:	4baf      	ldr	r3, [pc, #700]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009a68:	805a      	strh	r2, [r3, #2]
                Evt_Notification(&handleNotification);
 8009a6a:	48ae      	ldr	r0, [pc, #696]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009a6c:	f000 fcfe 	bl	800a46c <Evt_Notification>
                result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice5);
 8009a70:	4bab      	ldr	r3, [pc, #684]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009a72:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fd fe8f 	bl	800779a <aci_gatt_disc_all_primary_services>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if ((BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 8009a82:	4ba7      	ldr	r3, [pc, #668]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009a84:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d008      	beq.n	8009a9e <SVCCTL_App_Notification+0x706>
                    && (BleApplicationContext.EndDevice6Found == 0x01))
 8009a8c:	4ba4      	ldr	r3, [pc, #656]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009a8e:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d103      	bne.n	8009a9e <SVCCTL_App_Notification+0x706>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 8009a96:	2100      	movs	r1, #0
 8009a98:	2080      	movs	r0, #128	; 0x80
 8009a9a:	f001 fec7 	bl	800b82c <UTIL_SEQ_SetTask>
              if (dev6 == 1)
 8009a9e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	f040 8192 	bne.w	8009dcc <SVCCTL_App_Notification+0xa34>
                BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTED;
 8009aa8:	4b9d      	ldr	r3, [pc, #628]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009aaa:	2205      	movs	r2, #5
 8009aac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
                BleApplicationContext.connectionHandleEndDevice6 = connection_handle;
 8009ab0:	4b9a      	ldr	r3, [pc, #616]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009ab2:	881a      	ldrh	r2, [r3, #0]
 8009ab4:	4b9a      	ldr	r3, [pc, #616]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009ab6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
                BleApplicationContext.BleApplicationContext_legacy.connectionHandle[5] = connection_handle;
 8009aba:	4b98      	ldr	r3, [pc, #608]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009abc:	881a      	ldrh	r2, [r3, #0]
 8009abe:	4b98      	ldr	r3, [pc, #608]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009ac0:	841a      	strh	r2, [r3, #32]
                handleNotification.P2P_Evt_Opcode = P2P_SERVER6_CONN_HANDLE_EVT;
 8009ac2:	4b98      	ldr	r3, [pc, #608]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	701a      	strb	r2, [r3, #0]
                handleNotification.ConnectionHandle = connection_handle;
 8009ac8:	4b94      	ldr	r3, [pc, #592]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009aca:	881a      	ldrh	r2, [r3, #0]
 8009acc:	4b95      	ldr	r3, [pc, #596]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009ace:	805a      	strh	r2, [r3, #2]
                Evt_Notification(&handleNotification);
 8009ad0:	4894      	ldr	r0, [pc, #592]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009ad2:	f000 fccb 	bl	800a46c <Evt_Notification>
                result = aci_gatt_disc_all_primary_services(BleApplicationContext.connectionHandleEndDevice6);
 8009ad6:	4b92      	ldr	r3, [pc, #584]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009ad8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fd fe5c 	bl	800779a <aci_gatt_disc_all_primary_services>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                if ((BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 8009ae8:	4b8d      	ldr	r3, [pc, #564]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009aea:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009aee:	2b05      	cmp	r3, #5
 8009af0:	f000 816c 	beq.w	8009dcc <SVCCTL_App_Notification+0xa34>
                    && (BleApplicationContext.EndDevice5Found == 0x01))
 8009af4:	4b8a      	ldr	r3, [pc, #552]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009af6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	f040 8166 	bne.w	8009dcc <SVCCTL_App_Notification+0xa34>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 8009b00:	2100      	movs	r1, #0
 8009b02:	2040      	movs	r0, #64	; 0x40
 8009b04:	f001 fe92 	bl	800b82c <UTIL_SEQ_SetTask>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8009b08:	e160      	b.n	8009dcc <SVCCTL_App_Notification+0xa34>
            BleApplicationContext.connectionHandleCentral = connection_handle;
 8009b0a:	4b84      	ldr	r3, [pc, #528]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009b0c:	881a      	ldrh	r2, [r3, #0]
 8009b0e:	4b84      	ldr	r3, [pc, #528]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009b10:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
            handleNotification.P2P_Evt_Opcode = SMART_PHONE1_CONN_HANDLE_EVT;
 8009b14:	4b83      	ldr	r3, [pc, #524]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009b16:	2202      	movs	r2, #2
 8009b18:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = connection_handle;
 8009b1a:	4b80      	ldr	r3, [pc, #512]	; (8009d1c <SVCCTL_App_Notification+0x984>)
 8009b1c:	881a      	ldrh	r2, [r3, #0]
 8009b1e:	4b81      	ldr	r3, [pc, #516]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009b20:	805a      	strh	r2, [r3, #2]
            Evt_Notification(&handleNotification);
 8009b22:	4880      	ldr	r0, [pc, #512]	; (8009d24 <SVCCTL_App_Notification+0x98c>)
 8009b24:	f000 fca2 	bl	800a46c <Evt_Notification>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8009b28:	e150      	b.n	8009dcc <SVCCTL_App_Notification+0xa34>
          le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8009b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	623b      	str	r3, [r7, #32]
          event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	785b      	ldrb	r3, [r3, #1]
 8009b34:	77fb      	strb	r3, [r7, #31]
          event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	7a5b      	ldrb	r3, [r3, #9]
 8009b3a:	77bb      	strb	r3, [r7, #30]
          adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	3309      	adds	r3, #9
 8009b40:	3301      	adds	r3, #1
 8009b42:	61bb      	str	r3, [r7, #24]
          k = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	64fb      	str	r3, [r7, #76]	; 0x4c
          if (event_type == ADV_IND)
 8009b48:	7ffb      	ldrb	r3, [r7, #31]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 8140 	bne.w	8009dd0 <SVCCTL_App_Notification+0xa38>
            while(k < event_data_size)
 8009b50:	e136      	b.n	8009dc0 <SVCCTL_App_Notification+0xa28>
              adlength = adv_report_data[k];
 8009b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b54:	69ba      	ldr	r2, [r7, #24]
 8009b56:	4413      	add	r3, r2
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	75fb      	strb	r3, [r7, #23]
              adtype = adv_report_data[k + 1];
 8009b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b5e:	3301      	adds	r3, #1
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	4413      	add	r3, r2
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	75bb      	strb	r3, [r7, #22]
              switch (adtype)
 8009b68:	7dbb      	ldrb	r3, [r7, #22]
 8009b6a:	2b16      	cmp	r3, #22
 8009b6c:	dc36      	bgt.n	8009bdc <SVCCTL_App_Notification+0x844>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f340 8120 	ble.w	8009db4 <SVCCTL_App_Notification+0xa1c>
 8009b74:	3b01      	subs	r3, #1
 8009b76:	2b15      	cmp	r3, #21
 8009b78:	f200 811c 	bhi.w	8009db4 <SVCCTL_App_Notification+0xa1c>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <SVCCTL_App_Notification+0x7ec>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009db5 	.word	0x08009db5
 8009b88:	08009db5 	.word	0x08009db5
 8009b8c:	08009db5 	.word	0x08009db5
 8009b90:	08009db5 	.word	0x08009db5
 8009b94:	08009db5 	.word	0x08009db5
 8009b98:	08009db5 	.word	0x08009db5
 8009b9c:	08009db5 	.word	0x08009db5
 8009ba0:	08009db5 	.word	0x08009db5
 8009ba4:	08009db5 	.word	0x08009db5
 8009ba8:	08009db5 	.word	0x08009db5
 8009bac:	08009db5 	.word	0x08009db5
 8009bb0:	08009db5 	.word	0x08009db5
 8009bb4:	08009db5 	.word	0x08009db5
 8009bb8:	08009db5 	.word	0x08009db5
 8009bbc:	08009db5 	.word	0x08009db5
 8009bc0:	08009db5 	.word	0x08009db5
 8009bc4:	08009db5 	.word	0x08009db5
 8009bc8:	08009db5 	.word	0x08009db5
 8009bcc:	08009db5 	.word	0x08009db5
 8009bd0:	08009db5 	.word	0x08009db5
 8009bd4:	08009db5 	.word	0x08009db5
 8009bd8:	08009db5 	.word	0x08009db5
 8009bdc:	2bff      	cmp	r3, #255	; 0xff
 8009bde:	f040 80e9 	bne.w	8009db4 <SVCCTL_App_Notification+0xa1c>
                  if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	2b06      	cmp	r3, #6
 8009be6:	f240 80e1 	bls.w	8009dac <SVCCTL_App_Notification+0xa14>
 8009bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bec:	3302      	adds	r3, #2
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	f040 80d9 	bne.w	8009dac <SVCCTL_App_Notification+0xa14>
                    switch (adv_report_data[k + 3])
 8009bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bfc:	3303      	adds	r3, #3
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	4413      	add	r3, r2
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	3b83      	subs	r3, #131	; 0x83
 8009c06:	2b07      	cmp	r3, #7
 8009c08:	f200 80d2 	bhi.w	8009db0 <SVCCTL_App_Notification+0xa18>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <SVCCTL_App_Notification+0x87c>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c35 	.word	0x08009c35
 8009c18:	08009c6f 	.word	0x08009c6f
 8009c1c:	08009db1 	.word	0x08009db1
 8009c20:	08009db1 	.word	0x08009db1
 8009c24:	08009ca9 	.word	0x08009ca9
 8009c28:	08009ce3 	.word	0x08009ce3
 8009c2c:	08009d39 	.word	0x08009d39
 8009c30:	08009d73 	.word	0x08009d73
                        BleApplicationContext.EndDevice1Found = 0x01;
 8009c34:	4b3a      	ldr	r3, [pc, #232]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
                        P2P_SERVER1_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	78da      	ldrb	r2, [r3, #3]
 8009c40:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c42:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER1_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	791a      	ldrb	r2, [r3, #4]
 8009c48:	4b37      	ldr	r3, [pc, #220]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c4a:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER1_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	795a      	ldrb	r2, [r3, #5]
 8009c50:	4b35      	ldr	r3, [pc, #212]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c52:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER1_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	799a      	ldrb	r2, [r3, #6]
 8009c58:	4b33      	ldr	r3, [pc, #204]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c5a:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER1_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009c5c:	6a3b      	ldr	r3, [r7, #32]
 8009c5e:	79da      	ldrb	r2, [r3, #7]
 8009c60:	4b31      	ldr	r3, [pc, #196]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c62:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER1_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	7a1a      	ldrb	r2, [r3, #8]
 8009c68:	4b2f      	ldr	r3, [pc, #188]	; (8009d28 <SVCCTL_App_Notification+0x990>)
 8009c6a:	715a      	strb	r2, [r3, #5]
                        break;
 8009c6c:	e0a1      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
                        BleApplicationContext.EndDevice2Found = 0x01;
 8009c6e:	4b2c      	ldr	r3, [pc, #176]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
                        P2P_SERVER2_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	78da      	ldrb	r2, [r3, #3]
 8009c7a:	4b2c      	ldr	r3, [pc, #176]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009c7c:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER2_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	791a      	ldrb	r2, [r3, #4]
 8009c82:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009c84:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER2_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	795a      	ldrb	r2, [r3, #5]
 8009c8a:	4b28      	ldr	r3, [pc, #160]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009c8c:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER2_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	799a      	ldrb	r2, [r3, #6]
 8009c92:	4b26      	ldr	r3, [pc, #152]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009c94:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER2_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	79da      	ldrb	r2, [r3, #7]
 8009c9a:	4b24      	ldr	r3, [pc, #144]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009c9c:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER2_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	7a1a      	ldrb	r2, [r3, #8]
 8009ca2:	4b22      	ldr	r3, [pc, #136]	; (8009d2c <SVCCTL_App_Notification+0x994>)
 8009ca4:	715a      	strb	r2, [r3, #5]
                        break;
 8009ca6:	e084      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
                        BleApplicationContext.EndDevice3Found = 0x01;
 8009ca8:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                        P2P_SERVER3_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	78da      	ldrb	r2, [r3, #3]
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cb6:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER3_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	791a      	ldrb	r2, [r3, #4]
 8009cbc:	4b1c      	ldr	r3, [pc, #112]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cbe:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER3_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	795a      	ldrb	r2, [r3, #5]
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cc6:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER3_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	799a      	ldrb	r2, [r3, #6]
 8009ccc:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cce:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER3_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	79da      	ldrb	r2, [r3, #7]
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cd6:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER3_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	7a1a      	ldrb	r2, [r3, #8]
 8009cdc:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <SVCCTL_App_Notification+0x998>)
 8009cde:	715a      	strb	r2, [r3, #5]
                        break;
 8009ce0:	e067      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
                        BleApplicationContext.EndDevice4Found = 0x01;
 8009ce2:	4b0f      	ldr	r3, [pc, #60]	; (8009d20 <SVCCTL_App_Notification+0x988>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
                        P2P_SERVER4_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	78da      	ldrb	r2, [r3, #3]
 8009cee:	4b11      	ldr	r3, [pc, #68]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009cf0:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER4_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	791a      	ldrb	r2, [r3, #4]
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009cf8:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER4_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	795a      	ldrb	r2, [r3, #5]
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009d00:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER4_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	799a      	ldrb	r2, [r3, #6]
 8009d06:	4b0b      	ldr	r3, [pc, #44]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009d08:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER4_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	79da      	ldrb	r2, [r3, #7]
 8009d0e:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009d10:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER4_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	7a1a      	ldrb	r2, [r3, #8]
 8009d16:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <SVCCTL_App_Notification+0x99c>)
 8009d18:	715a      	strb	r2, [r3, #5]
                        break;
 8009d1a:	e04a      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
 8009d1c:	2000059a 	.word	0x2000059a
 8009d20:	2000013c 	.word	0x2000013c
 8009d24:	20000588 	.word	0x20000588
 8009d28:	2000059c 	.word	0x2000059c
 8009d2c:	200005a4 	.word	0x200005a4
 8009d30:	200005ac 	.word	0x200005ac
 8009d34:	20000594 	.word	0x20000594
                        BleApplicationContext.EndDevice5Found = 0x01;
 8009d38:	4b29      	ldr	r3, [pc, #164]	; (8009de0 <SVCCTL_App_Notification+0xa48>)
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
                        P2P_SERVER5_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	78da      	ldrb	r2, [r3, #3]
 8009d44:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d46:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER5_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	791a      	ldrb	r2, [r3, #4]
 8009d4c:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d4e:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER5_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	795a      	ldrb	r2, [r3, #5]
 8009d54:	4b23      	ldr	r3, [pc, #140]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d56:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER5_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	799a      	ldrb	r2, [r3, #6]
 8009d5c:	4b21      	ldr	r3, [pc, #132]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d5e:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER5_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	79da      	ldrb	r2, [r3, #7]
 8009d64:	4b1f      	ldr	r3, [pc, #124]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d66:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER5_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009d68:	6a3b      	ldr	r3, [r7, #32]
 8009d6a:	7a1a      	ldrb	r2, [r3, #8]
 8009d6c:	4b1d      	ldr	r3, [pc, #116]	; (8009de4 <SVCCTL_App_Notification+0xa4c>)
 8009d6e:	715a      	strb	r2, [r3, #5]
                        break;
 8009d70:	e01f      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
                        BleApplicationContext.EndDevice6Found = 0x01;
 8009d72:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <SVCCTL_App_Notification+0xa48>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
                        P2P_SERVER6_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	78da      	ldrb	r2, [r3, #3]
 8009d7e:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009d80:	701a      	strb	r2, [r3, #0]
                        P2P_SERVER6_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	791a      	ldrb	r2, [r3, #4]
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009d88:	705a      	strb	r2, [r3, #1]
                        P2P_SERVER6_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	795a      	ldrb	r2, [r3, #5]
 8009d8e:	4b16      	ldr	r3, [pc, #88]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009d90:	709a      	strb	r2, [r3, #2]
                        P2P_SERVER6_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	799a      	ldrb	r2, [r3, #6]
 8009d96:	4b14      	ldr	r3, [pc, #80]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009d98:	70da      	strb	r2, [r3, #3]
                        P2P_SERVER6_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	79da      	ldrb	r2, [r3, #7]
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009da0:	711a      	strb	r2, [r3, #4]
                        P2P_SERVER6_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	7a1a      	ldrb	r2, [r3, #8]
 8009da6:	4b10      	ldr	r3, [pc, #64]	; (8009de8 <SVCCTL_App_Notification+0xa50>)
 8009da8:	715a      	strb	r2, [r3, #5]
                        break;
 8009daa:	e002      	b.n	8009db2 <SVCCTL_App_Notification+0xa1a>
                  }
 8009dac:	bf00      	nop
 8009dae:	e002      	b.n	8009db6 <SVCCTL_App_Notification+0xa1e>
                    break;
 8009db0:	bf00      	nop
                  break;
 8009db2:	e000      	b.n	8009db6 <SVCCTL_App_Notification+0xa1e>
                  break;
 8009db4:	bf00      	nop
              k += adlength + 1;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	3301      	adds	r3, #1
 8009dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dbc:	4413      	add	r3, r2
 8009dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
            while(k < event_data_size)
 8009dc0:	7fbb      	ldrb	r3, [r7, #30]
 8009dc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	f6ff aec4 	blt.w	8009b52 <SVCCTL_App_Notification+0x7ba>
          break;
 8009dca:	e001      	b.n	8009dd0 <SVCCTL_App_Notification+0xa38>
          break; /* HCI_EVT_LE_CONN_COMPLETE */
 8009dcc:	bf00      	nop
 8009dce:	e002      	b.n	8009dd6 <SVCCTL_App_Notification+0xa3e>
          break;
 8009dd0:	bf00      	nop
      break; /* HCI_EVT_LE_META_EVENT */
 8009dd2:	e000      	b.n	8009dd6 <SVCCTL_App_Notification+0xa3e>
      break; /* EVT_DISCONN_COMPLETE */
 8009dd4:	bf00      	nop
    }
  return (SVCCTL_UserEvtFlowEnable);
 8009dd6:	2301      	movs	r3, #1
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3754      	adds	r7, #84	; 0x54
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009de0:	2000013c 	.word	0x2000013c
 8009de4:	200005b4 	.word	0x200005b4
 8009de8:	20000580 	.word	0x20000580

08009dec <APP_BLE_Get_Client_Connection_Status>:
 * PUBLIC FUNCTIONS
 *
 *************************************************************/

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status( uint16_t Connection_Handle )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b085      	sub	sp, #20
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	4603      	mov	r3, r0
 8009df4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_1 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_1 */
  APP_BLE_ConnStatus_t return_value;

  if (BleApplicationContext.connectionHandleEndDevice1 == Connection_Handle)
 8009df6:	4b25      	ldr	r3, [pc, #148]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009df8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8009dfc:	88fa      	ldrh	r2, [r7, #6]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d104      	bne.n	8009e0c <APP_BLE_Get_Client_Connection_Status+0x20>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[0];
 8009e02:	4b22      	ldr	r3, [pc, #136]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e04:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8009e08:	73fb      	strb	r3, [r7, #15]
 8009e0a:	e038      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
#if (CFG_P2P_DEMO_MULTI != 0)
/* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_Multi */
  else if (BleApplicationContext.connectionHandleEndDevice2 == Connection_Handle)
 8009e0c:	4b1f      	ldr	r3, [pc, #124]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e0e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d104      	bne.n	8009e22 <APP_BLE_Get_Client_Connection_Status+0x36>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[1];
 8009e18:	4b1c      	ldr	r3, [pc, #112]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e1a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e02d      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice3 == Connection_Handle)
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e24:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 8009e28:	88fa      	ldrh	r2, [r7, #6]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d104      	bne.n	8009e38 <APP_BLE_Get_Client_Connection_Status+0x4c>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[2];
 8009e2e:	4b17      	ldr	r3, [pc, #92]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e30:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8009e34:	73fb      	strb	r3, [r7, #15]
 8009e36:	e022      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice4 == Connection_Handle)
 8009e38:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e3a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8009e3e:	88fa      	ldrh	r2, [r7, #6]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d104      	bne.n	8009e4e <APP_BLE_Get_Client_Connection_Status+0x62>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[3];
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e46:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8009e4a:	73fb      	strb	r3, [r7, #15]
 8009e4c:	e017      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice5 == Connection_Handle)
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e50:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8009e54:	88fa      	ldrh	r2, [r7, #6]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d104      	bne.n	8009e64 <APP_BLE_Get_Client_Connection_Status+0x78>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[4];
 8009e5a:	4b0c      	ldr	r3, [pc, #48]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e5c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8009e60:	73fb      	strb	r3, [r7, #15]
 8009e62:	e00c      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
  else if (BleApplicationContext.connectionHandleEndDevice6 == Connection_Handle)
 8009e64:	4b09      	ldr	r3, [pc, #36]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e66:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8009e6a:	88fa      	ldrh	r2, [r7, #6]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d104      	bne.n	8009e7a <APP_BLE_Get_Client_Connection_Status+0x8e>
  {
    return_value = BleApplicationContext.EndDevice_Connection_Status[5];
 8009e70:	4b06      	ldr	r3, [pc, #24]	; (8009e8c <APP_BLE_Get_Client_Connection_Status+0xa0>)
 8009e72:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8009e76:	73fb      	strb	r3, [r7, #15]
 8009e78:	e001      	b.n	8009e7e <APP_BLE_Get_Client_Connection_Status+0x92>
  }
/* USER CODE END APP_BLE_Get_Client_Connection_Status_Multi */
#endif
  else
  {
    return_value = APP_BLE_IDLE;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN APP_BLE_Get_Client_Connection_Status_2 */

  /* USER CODE END APP_BLE_Get_Client_Connection_Status_2 */
  return (return_value);
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	2000013c 	.word	0x2000013c

08009e90 <APP_BLE_Key_Button1_Action>:

/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 8009e94:	2100      	movs	r1, #0
 8009e96:	2002      	movs	r0, #2
 8009e98:	f001 fcc8 	bl	800b82c <UTIL_SEQ_SetTask>
}
 8009e9c:	bf00      	nop
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
}
 8009ea4:	bf00      	nop
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	af00      	add	r7, sp, #0
}
 8009eb2:	bf00      	nop
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <Ble_Tl_Init+0x20>)
 8009ec4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009ec6:	4b06      	ldr	r3, [pc, #24]	; (8009ee0 <Ble_Tl_Init+0x24>)
 8009ec8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009eca:	463b      	mov	r3, r7
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4805      	ldr	r0, [pc, #20]	; (8009ee4 <Ble_Tl_Init+0x28>)
 8009ed0:	f7fe fba2 	bl	8008618 <hci_init>

  return;
 8009ed4:	bf00      	nop
}
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	200300d4 	.word	0x200300d4
 8009ee0:	0800a6d3 	.word	0x0800a6d3
 8009ee4:	0800a69b 	.word	0x0800a69b

08009ee8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eea:	b08f      	sub	sp, #60	; 0x3c
 8009eec:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_UNKNOWN_APPEARANCE };
 8009eee:	2300      	movs	r3, #0
 8009ef0:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8009ef2:	f7fd ff3d 	bl	8007d70 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8009ef6:	f000 fb69 	bl	800a5cc <BleGetBdAddress>
 8009efa:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8009efc:	69fa      	ldr	r2, [r7, #28]
 8009efe:	2106      	movs	r1, #6
 8009f00:	2000      	movs	r0, #0
 8009f02:	f7fd fe75 	bl	8007bf0 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);
  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	795a      	ldrb	r2, [r3, #5]
 8009f0a:	4b56      	ldr	r3, [pc, #344]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f0c:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8009f0e:	69fb      	ldr	r3, [r7, #28]
 8009f10:	791a      	ldrb	r2, [r3, #4]
 8009f12:	4b54      	ldr	r3, [pc, #336]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f14:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	78da      	ldrb	r2, [r3, #3]
 8009f1a:	4b52      	ldr	r3, [pc, #328]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f1c:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	789a      	ldrb	r2, [r3, #2]
 8009f22:	4b50      	ldr	r3, [pc, #320]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f24:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	785a      	ldrb	r2, [r3, #1]
 8009f2a:	4b4e      	ldr	r3, [pc, #312]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f2c:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	781a      	ldrb	r2, [r3, #0]
 8009f32:	4b4c      	ldr	r3, [pc, #304]	; (800a064 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009f34:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 8009f36:	4a4c      	ldr	r2, [pc, #304]	; (800a068 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8009f38:	2110      	movs	r1, #16
 8009f3a:	2018      	movs	r0, #24
 8009f3c:	f7fd fe58 	bl	8007bf0 <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8009f40:	4a4a      	ldr	r2, [pc, #296]	; (800a06c <Ble_Hci_Gap_Gatt_Init+0x184>)
 8009f42:	2110      	movs	r1, #16
 8009f44:	2008      	movs	r0, #8
 8009f46:	f7fd fe53 	bl	8007bf0 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8009f4a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8009f4e:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8009f50:	f7ff f95a 	bl	8009208 <LL_FLASH_GetUDN>
 8009f54:	4603      	mov	r3, r0
 8009f56:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8009f58:	1d3b      	adds	r3, r7, #4
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	2106      	movs	r1, #6
 8009f5e:	202e      	movs	r0, #46	; 0x2e
 8009f60:	f7fd fe46 	bl	8007bf0 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8009f64:	4a40      	ldr	r2, [pc, #256]	; (800a068 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8009f66:	2110      	movs	r1, #16
 8009f68:	2018      	movs	r0, #24
 8009f6a:	f7fd fe41 	bl	8007bf0 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8009f6e:	4a3f      	ldr	r2, [pc, #252]	; (800a06c <Ble_Hci_Gap_Gatt_Init+0x184>)
 8009f70:	2110      	movs	r1, #16
 8009f72:	2008      	movs	r0, #8
 8009f74:	f7fd fe3c 	bl	8007bf0 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009f78:	2118      	movs	r1, #24
 8009f7a:	2001      	movs	r0, #1
 8009f7c:	f7fd fea1 	bl	8007cc2 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8009f80:	f7fd f9c6 	bl	8007310 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009f88:	7efb      	ldrb	r3, [r7, #27]
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	76fb      	strb	r3, [r7, #27]
#endif

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 8009f90:	7efb      	ldrb	r3, [r7, #27]
 8009f92:	f043 0304 	orr.w	r3, r3, #4
 8009f96:	76fb      	strb	r3, [r7, #27]
#endif

  if (role > 0)
 8009f98:	7efb      	ldrb	r3, [r7, #27]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01e      	beq.n	8009fdc <Ble_Hci_Gap_Gatt_Init+0xf4>
  {
    const char *name = "MRM3";
 8009f9e:	4b34      	ldr	r3, [pc, #208]	; (800a070 <Ble_Hci_Gap_Gatt_Init+0x188>)
 8009fa0:	617b      	str	r3, [r7, #20]

    aci_gap_init(role, 0,
 8009fa2:	f107 0212 	add.w	r2, r7, #18
 8009fa6:	7ef8      	ldrb	r0, [r7, #27]
 8009fa8:	f107 030e 	add.w	r3, r7, #14
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	f107 0310 	add.w	r3, r7, #16
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	2207      	movs	r2, #7
 8009fb8:	2100      	movs	r1, #0
 8009fba:	f7fc ff61 	bl	8006e80 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8009fbe:	8a7c      	ldrh	r4, [r7, #18]
 8009fc0:	8a3d      	ldrh	r5, [r7, #16]
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7f6 f8da 	bl	800017c <strlen>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7fd fb58 	bl	800768c <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8009fdc:	8a78      	ldrh	r0, [r7, #18]
 8009fde:	89f9      	ldrh	r1, [r7, #14]
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	9300      	str	r3, [sp, #0]
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f7fd fb50 	bl	800768c <aci_gatt_update_char_value>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009fec:	4b21      	ldr	r3, [pc, #132]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fc fe50 	bl	8006c9c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009ffc:	4b1d      	ldr	r3, [pc, #116]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800a002:	4b1c      	ldr	r3, [pc, #112]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a004:	2208      	movs	r2, #8
 800a006:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800a008:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a00a:	2210      	movs	r2, #16
 800a00c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800a00e:	4b19      	ldr	r3, [pc, #100]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a010:	2201      	movs	r2, #1
 800a012:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800a014:	4b17      	ldr	r3, [pc, #92]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <Ble_Hci_Gap_Gatt_Init+0x190>)
 800a018:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a01c:	2201      	movs	r2, #1
 800a01e:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800a020:	4b14      	ldr	r3, [pc, #80]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a022:	789c      	ldrb	r4, [r3, #2]
 800a024:	4b13      	ldr	r3, [pc, #76]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a026:	785d      	ldrb	r5, [r3, #1]
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a02a:	791b      	ldrb	r3, [r3, #4]
 800a02c:	4a11      	ldr	r2, [pc, #68]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a02e:	7952      	ldrb	r2, [r2, #5]
 800a030:	4910      	ldr	r1, [pc, #64]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a032:	78c9      	ldrb	r1, [r1, #3]
 800a034:	480f      	ldr	r0, [pc, #60]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a036:	6880      	ldr	r0, [r0, #8]
 800a038:	2600      	movs	r6, #0
 800a03a:	9604      	str	r6, [sp, #16]
 800a03c:	9003      	str	r0, [sp, #12]
 800a03e:	9102      	str	r1, [sp, #8]
 800a040:	9201      	str	r2, [sp, #4]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	2201      	movs	r2, #1
 800a048:	4629      	mov	r1, r5
 800a04a:	4620      	mov	r0, r4
 800a04c:	f7fc fe70 	bl	8006d30 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800a050:	4b08      	ldr	r3, [pc, #32]	; (800a074 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800a052:	789b      	ldrb	r3, [r3, #2]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <Ble_Hci_Gap_Gatt_Init+0x174>
   {
     aci_gap_configure_whitelist();
 800a058:	f7fc fff9 	bl	800704e <aci_gap_configure_whitelist>
   }

}
 800a05c:	bf00      	nop
 800a05e:	3724      	adds	r7, #36	; 0x24
 800a060:	46bd      	mov	sp, r7
 800a062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a064:	20000018 	.word	0x20000018
 800a068:	0800bd5c 	.word	0x0800bd5c
 800a06c:	0800bd6c 	.word	0x0800bd6c
 800a070:	0800bb6c 	.word	0x0800bb6c
 800a074:	2000013c 	.word	0x2000013c
 800a078:	0001b207 	.word	0x0001b207

0800a07c <Scan_Request>:
 * @brief  Scan Request
 * @param  None
 * @retval None
 */
static void Scan_Request( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;

  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED
 800a082:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <Scan_Request+0x7c>)
 800a084:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a088:	2b05      	cmp	r3, #5
 800a08a:	d118      	bne.n	800a0be <Scan_Request+0x42>

#if (CFG_P2P_DEMO_MULTI != 0)
      || BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED
 800a08c:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <Scan_Request+0x7c>)
 800a08e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a092:	2b05      	cmp	r3, #5
 800a094:	d113      	bne.n	800a0be <Scan_Request+0x42>
 800a096:	4b18      	ldr	r3, [pc, #96]	; (800a0f8 <Scan_Request+0x7c>)
 800a098:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	d10e      	bne.n	800a0be <Scan_Request+0x42>
      || BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED|| BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED || BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED
 800a0a0:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <Scan_Request+0x7c>)
 800a0a2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d109      	bne.n	800a0be <Scan_Request+0x42>
 800a0aa:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <Scan_Request+0x7c>)
 800a0ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a0b0:	2b05      	cmp	r3, #5
 800a0b2:	d104      	bne.n	800a0be <Scan_Request+0x42>
 800a0b4:	4b10      	ldr	r3, [pc, #64]	; (800a0f8 <Scan_Request+0x7c>)
 800a0b6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800a0ba:	2b05      	cmp	r3, #5
 800a0bc:	d017      	beq.n	800a0ee <Scan_Request+0x72>
#endif
  )
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED */
	  HAL_GPIO_WritePin(LD_BLUE_GPIO_Port, LD_BLUE_Pin, GPIO_PIN_SET);
 800a0be:	2201      	movs	r2, #1
 800a0c0:	2120      	movs	r1, #32
 800a0c2:	480e      	ldr	r0, [pc, #56]	; (800a0fc <Scan_Request+0x80>)
 800a0c4:	f7f9 fea8 	bl	8003e18 <HAL_GPIO_WritePin>
    /* USER CODE END APP_BLE_CONNECTED */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, PUBLIC_ADDR, 1);
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a0d0:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a0d4:	f7fc ffdf 	bl	8007096 <aci_gap_start_general_discovery_proc>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 800a0dc:	79fb      	ldrb	r3, [r7, #7]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <Scan_Request+0x72>
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
    }
    else
    {
    /* USER CODE BEGIN BLE_SCAN_FAILED */
    	HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	2102      	movs	r1, #2
 800a0e6:	4805      	ldr	r0, [pc, #20]	; (800a0fc <Scan_Request+0x80>)
 800a0e8:	f7f9 fe96 	bl	8003e18 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 800a0ec:	bf00      	nop
 800a0ee:	bf00      	nop
}
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	2000013c 	.word	0x2000013c
 800a0fc:	48000400 	.word	0x48000400

0800a100 <Adv_Request>:
 * @brief  Advertising Enable
 * @param  None
 * @retval None
 */
static void Adv_Request( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	; 0x28
 800a104:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  if (BleApplicationContext.SmartPhone_Connection_Status != APP_BLE_CONNECTED)
 800a106:	4b1b      	ldr	r3, [pc, #108]	; (800a174 <Adv_Request+0x74>)
 800a108:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800a10c:	2b05      	cmp	r3, #5
 800a10e:	d02c      	beq.n	800a16a <Adv_Request+0x6a>
  {
    tBleStatus result = 0x00;
 800a110:	2300      	movs	r3, #0
 800a112:	71fb      	strb	r3, [r7, #7]
    /*Start Advertising*/
    result = aci_gap_set_discoverable(ADV_IND,
 800a114:	2300      	movs	r3, #0
 800a116:	9306      	str	r3, [sp, #24]
 800a118:	2300      	movs	r3, #0
 800a11a:	9305      	str	r3, [sp, #20]
 800a11c:	2300      	movs	r3, #0
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	2300      	movs	r3, #0
 800a122:	9303      	str	r3, [sp, #12]
 800a124:	4b14      	ldr	r3, [pc, #80]	; (800a178 <Adv_Request+0x78>)
 800a126:	9302      	str	r3, [sp, #8]
 800a128:	2305      	movs	r3, #5
 800a12a:	9301      	str	r3, [sp, #4]
 800a12c:	2300      	movs	r3, #0
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a136:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 800a13a:	2000      	movs	r0, #0
 800a13c:	f7fc fcd0 	bl	8006ae0 <aci_gap_set_discoverable>
 800a140:	4603      	mov	r3, r0
 800a142:	71fb      	strb	r3, [r7, #7]
                                      0,
                                      NULL,
                                      0,
                                      0);
    /* Send Advertising data */
    result = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800a144:	490d      	ldr	r1, [pc, #52]	; (800a17c <Adv_Request+0x7c>)
 800a146:	200e      	movs	r0, #14
 800a148:	f7fc ff25 	bl	8006f96 <aci_gap_update_adv_data>
 800a14c:	4603      	mov	r3, r0
 800a14e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.SmartPhone_Connection_Status = APP_BLE_FAST_ADV;
 800a150:	4b08      	ldr	r3, [pc, #32]	; (800a174 <Adv_Request+0x74>)
 800a152:	2201      	movs	r2, #1
 800a154:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if (result == BLE_STATUS_SUCCESS)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <Adv_Request+0x6a>
      APP_DBG_MSG("** START ADVERTISING **  \r\n\r");
    }
    else
    {
    /* USER CODE BEGIN BLE_CONNECT_FAILED */
    	HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a15e:	2201      	movs	r2, #1
 800a160:	2102      	movs	r1, #2
 800a162:	4807      	ldr	r0, [pc, #28]	; (800a180 <Adv_Request+0x80>)
 800a164:	f7f9 fe58 	bl	8003e18 <HAL_GPIO_WritePin>
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
}
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000013c 	.word	0x2000013c
 800a178:	20000010 	.word	0x20000010
 800a17c:	20000018 	.word	0x20000018
 800a180:	48000400 	.word	0x48000400

0800a184 <ConnReq1>:
 * @brief  Connection Establishement on SERVER 1
 * @param  None
 * @retval None
 */
static void ConnReq1( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b08a      	sub	sp, #40	; 0x28
 800a188:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 1 **  \r\n\r");
  if (BleApplicationContext.EndDevice_Connection_Status[0] != APP_BLE_CONNECTED)
 800a18a:	4b1a      	ldr	r3, [pc, #104]	; (800a1f4 <ConnReq1+0x70>)
 800a18c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800a190:	2b05      	cmp	r3, #5
 800a192:	d02b      	beq.n	800a1ec <ConnReq1+0x68>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */

    /* USER CODE END APP_BLE_CONNECTED_SUCCESS_END_DEVICE_1 */
        result = aci_gap_create_connection(
 800a194:	2310      	movs	r3, #16
 800a196:	9306      	str	r3, [sp, #24]
 800a198:	2310      	movs	r3, #16
 800a19a:	9305      	str	r3, [sp, #20]
 800a19c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a1aa:	9302      	str	r3, [sp, #8]
 800a1ac:	23a0      	movs	r3, #160	; 0xa0
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <ConnReq1+0x74>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a1bc:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a1c0:	f7fc ffe1 	bl	8007186 <aci_gap_create_connection>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d104      	bne.n	800a1d8 <ConnReq1+0x54>
    {
    /* USER CODE BEGIN BLE_STATUS_END_DEVICE_1_SUCCESS */

    /* USER CODE END BLE_STATUS_END_DEVICE_1_SUCCESS */
    BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_CONNECTING;
 800a1ce:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <ConnReq1+0x70>)
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    /* USER CODE END BLE_STATUS_END_DEVICE_1_FAILED */
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
    }
  }

  return;
 800a1d6:	e009      	b.n	800a1ec <ConnReq1+0x68>
    	HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a1d8:	2201      	movs	r2, #1
 800a1da:	2102      	movs	r1, #2
 800a1dc:	4807      	ldr	r0, [pc, #28]	; (800a1fc <ConnReq1+0x78>)
 800a1de:	f7f9 fe1b 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[0] = APP_BLE_IDLE;
 800a1e2:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <ConnReq1+0x70>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  return;
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
}
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	2000013c 	.word	0x2000013c
 800a1f8:	2000059c 	.word	0x2000059c
 800a1fc:	48000400 	.word	0x48000400

0800a200 <ConnReq2>:
 * @brief  Connection Establishement on SERVER 2
 * @param  None
 * @retval None
 */
static void ConnReq2( void )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b08a      	sub	sp, #40	; 0x28
 800a204:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 2 **  \r\n\r");

  if (BleApplicationContext.EndDevice_Connection_Status[1] != APP_BLE_CONNECTED)
 800a206:	4b1a      	ldr	r3, [pc, #104]	; (800a270 <ConnReq2+0x70>)
 800a208:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	d02b      	beq.n	800a268 <ConnReq2+0x68>
  {
    result = aci_gap_create_connection(
 800a210:	2310      	movs	r3, #16
 800a212:	9306      	str	r3, [sp, #24]
 800a214:	2310      	movs	r3, #16
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a21c:	9304      	str	r3, [sp, #16]
 800a21e:	2300      	movs	r3, #0
 800a220:	9303      	str	r3, [sp, #12]
 800a222:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a226:	9302      	str	r3, [sp, #8]
 800a228:	23a0      	movs	r3, #160	; 0xa0
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	4b10      	ldr	r3, [pc, #64]	; (800a274 <ConnReq2+0x74>)
 800a232:	2200      	movs	r2, #0
 800a234:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a238:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a23c:	f7fc ffa3 	bl	8007186 <aci_gap_create_connection>
 800a240:	4603      	mov	r3, r0
 800a242:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a244:	79fb      	ldrb	r3, [r7, #7]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d104      	bne.n	800a254 <ConnReq2+0x54>
    {
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_CONNECTING;
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <ConnReq2+0x70>)
 800a24c:	2204      	movs	r2, #4
 800a24e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;

    }
  }

  return;
 800a252:	e009      	b.n	800a268 <ConnReq2+0x68>
      HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a254:	2201      	movs	r2, #1
 800a256:	2102      	movs	r1, #2
 800a258:	4807      	ldr	r0, [pc, #28]	; (800a278 <ConnReq2+0x78>)
 800a25a:	f7f9 fddd 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[1] = APP_BLE_IDLE;
 800a25e:	4b04      	ldr	r3, [pc, #16]	; (800a270 <ConnReq2+0x70>)
 800a260:	2200      	movs	r2, #0
 800a262:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  return;
 800a266:	bf00      	nop
 800a268:	bf00      	nop
}
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	2000013c 	.word	0x2000013c
 800a274:	200005a4 	.word	0x200005a4
 800a278:	48000400 	.word	0x48000400

0800a27c <ConnReq3>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq3( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08a      	sub	sp, #40	; 0x28
 800a280:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 3 **  \r\n\r");
  if (BleApplicationContext.EndDevice_Connection_Status[2] != APP_BLE_CONNECTED)
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <ConnReq3+0x70>)
 800a284:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 800a288:	2b05      	cmp	r3, #5
 800a28a:	d02b      	beq.n	800a2e4 <ConnReq3+0x68>
  {
    result = aci_gap_create_connection(
 800a28c:	2310      	movs	r3, #16
 800a28e:	9306      	str	r3, [sp, #24]
 800a290:	2310      	movs	r3, #16
 800a292:	9305      	str	r3, [sp, #20]
 800a294:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	2300      	movs	r3, #0
 800a29c:	9303      	str	r3, [sp, #12]
 800a29e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a2a2:	9302      	str	r3, [sp, #8]
 800a2a4:	23a0      	movs	r3, #160	; 0xa0
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <ConnReq3+0x74>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a2b4:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a2b8:	f7fc ff65 	bl	8007186 <aci_gap_create_connection>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a2c0:	79fb      	ldrb	r3, [r7, #7]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <ConnReq3+0x54>
    {
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_CONNECTING;
 800a2c6:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <ConnReq3+0x70>)
 800a2c8:	2204      	movs	r2, #4
 800a2ca:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;

    }
  }

  return;
 800a2ce:	e009      	b.n	800a2e4 <ConnReq3+0x68>
      HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	2102      	movs	r1, #2
 800a2d4:	4807      	ldr	r0, [pc, #28]	; (800a2f4 <ConnReq3+0x78>)
 800a2d6:	f7f9 fd9f 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[2] = APP_BLE_IDLE;
 800a2da:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <ConnReq3+0x70>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  return;
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
}
 800a2e6:	3708      	adds	r7, #8
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}
 800a2ec:	2000013c 	.word	0x2000013c
 800a2f0:	200005ac 	.word	0x200005ac
 800a2f4:	48000400 	.word	0x48000400

0800a2f8 <ConnReq4>:
 * @brief  Connection Establishement on SERVER 4
 * @param  None
 * @retval None
 */
static void ConnReq4( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08a      	sub	sp, #40	; 0x28
 800a2fc:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 4 **  \r\n\r");
  if (BleApplicationContext.EndDevice_Connection_Status[3] != APP_BLE_CONNECTED)
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <ConnReq4+0x70>)
 800a300:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800a304:	2b05      	cmp	r3, #5
 800a306:	d02b      	beq.n	800a360 <ConnReq4+0x68>
  {
    result = aci_gap_create_connection(
 800a308:	2310      	movs	r3, #16
 800a30a:	9306      	str	r3, [sp, #24]
 800a30c:	2310      	movs	r3, #16
 800a30e:	9305      	str	r3, [sp, #20]
 800a310:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	2300      	movs	r3, #0
 800a318:	9303      	str	r3, [sp, #12]
 800a31a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a31e:	9302      	str	r3, [sp, #8]
 800a320:	23a0      	movs	r3, #160	; 0xa0
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	2300      	movs	r3, #0
 800a326:	9300      	str	r3, [sp, #0]
 800a328:	4b10      	ldr	r3, [pc, #64]	; (800a36c <ConnReq4+0x74>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a330:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a334:	f7fc ff27 	bl	8007186 <aci_gap_create_connection>
 800a338:	4603      	mov	r3, r0
 800a33a:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a33c:	79fb      	ldrb	r3, [r7, #7]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d104      	bne.n	800a34c <ConnReq4+0x54>
    {
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_CONNECTING;
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <ConnReq4+0x70>)
 800a344:	2204      	movs	r2, #4
 800a346:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;

    }
  }

  return;
 800a34a:	e009      	b.n	800a360 <ConnReq4+0x68>
      HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a34c:	2201      	movs	r2, #1
 800a34e:	2102      	movs	r1, #2
 800a350:	4807      	ldr	r0, [pc, #28]	; (800a370 <ConnReq4+0x78>)
 800a352:	f7f9 fd61 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[3] = APP_BLE_IDLE;
 800a356:	4b04      	ldr	r3, [pc, #16]	; (800a368 <ConnReq4+0x70>)
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  return;
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
}
 800a362:	3708      	adds	r7, #8
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	2000013c 	.word	0x2000013c
 800a36c:	20000594 	.word	0x20000594
 800a370:	48000400 	.word	0x48000400

0800a374 <ConnReq5>:
 * @brief  Connection Establishement on SERVER 5
 * @param  None
 * @retval None
 */
static void ConnReq5( void )
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08a      	sub	sp, #40	; 0x28
 800a378:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 5 **  \r\n\r");
  if (BleApplicationContext.EndDevice_Connection_Status[4] != APP_BLE_CONNECTED)
 800a37a:	4b1a      	ldr	r3, [pc, #104]	; (800a3e4 <ConnReq5+0x70>)
 800a37c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a380:	2b05      	cmp	r3, #5
 800a382:	d02b      	beq.n	800a3dc <ConnReq5+0x68>
  {
    result = aci_gap_create_connection(
 800a384:	2310      	movs	r3, #16
 800a386:	9306      	str	r3, [sp, #24]
 800a388:	2310      	movs	r3, #16
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	2300      	movs	r3, #0
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	23a0      	movs	r3, #160	; 0xa0
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4b10      	ldr	r3, [pc, #64]	; (800a3e8 <ConnReq5+0x74>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a3ac:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a3b0:	f7fc fee9 	bl	8007186 <aci_gap_create_connection>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d104      	bne.n	800a3c8 <ConnReq5+0x54>
    {
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_CONNECTING;
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <ConnReq5+0x70>)
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;

    }
  }

  return;
 800a3c6:	e009      	b.n	800a3dc <ConnReq5+0x68>
      HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	2102      	movs	r1, #2
 800a3cc:	4807      	ldr	r0, [pc, #28]	; (800a3ec <ConnReq5+0x78>)
 800a3ce:	f7f9 fd23 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[4] = APP_BLE_IDLE;
 800a3d2:	4b04      	ldr	r3, [pc, #16]	; (800a3e4 <ConnReq5+0x70>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  return;
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
}
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	2000013c 	.word	0x2000013c
 800a3e8:	200005b4 	.word	0x200005b4
 800a3ec:	48000400 	.word	0x48000400

0800a3f0 <ConnReq6>:
 * @brief  Connection Establishement on SERVER 3
 * @param  None
 * @retval None
 */
static void ConnReq6( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af08      	add	r7, sp, #32
  tBleStatus result;
  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO END DEVICE 6 **  \r\n\r");
  if (BleApplicationContext.EndDevice_Connection_Status[5] != APP_BLE_CONNECTED)
 800a3f6:	4b1a      	ldr	r3, [pc, #104]	; (800a460 <ConnReq6+0x70>)
 800a3f8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	d02b      	beq.n	800a458 <ConnReq6+0x68>
  {
    result = aci_gap_create_connection(
 800a400:	2310      	movs	r3, #16
 800a402:	9306      	str	r3, [sp, #24]
 800a404:	2310      	movs	r3, #16
 800a406:	9305      	str	r3, [sp, #20]
 800a408:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a40c:	9304      	str	r3, [sp, #16]
 800a40e:	2300      	movs	r3, #0
 800a410:	9303      	str	r3, [sp, #12]
 800a412:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a416:	9302      	str	r3, [sp, #8]
 800a418:	23a0      	movs	r3, #160	; 0xa0
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4b10      	ldr	r3, [pc, #64]	; (800a464 <ConnReq6+0x74>)
 800a422:	2200      	movs	r2, #0
 800a424:	f44f 7148 	mov.w	r1, #800	; 0x320
 800a428:	f44f 7048 	mov.w	r0, #800	; 0x320
 800a42c:	f7fc feab 	bl	8007186 <aci_gap_create_connection>
 800a430:	4603      	mov	r3, r0
 800a432:	71fb      	strb	r3, [r7, #7]
        0,
        SUPERV_TIMEOUT,
        CONN_L1,
        CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d104      	bne.n	800a444 <ConnReq6+0x54>
    {
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_CONNECTING;
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <ConnReq6+0x70>)
 800a43c:	2204      	movs	r2, #4
 800a43e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;

    }
  }

  return;
 800a442:	e009      	b.n	800a458 <ConnReq6+0x68>
      HAL_GPIO_WritePin(LD_RED_GPIO_Port,LD_RED_Pin,GPIO_PIN_SET);
 800a444:	2201      	movs	r2, #1
 800a446:	2102      	movs	r1, #2
 800a448:	4807      	ldr	r0, [pc, #28]	; (800a468 <ConnReq6+0x78>)
 800a44a:	f7f9 fce5 	bl	8003e18 <HAL_GPIO_WritePin>
      BleApplicationContext.EndDevice_Connection_Status[5] = APP_BLE_IDLE;
 800a44e:	4b04      	ldr	r3, [pc, #16]	; (800a460 <ConnReq6+0x70>)
 800a450:	2200      	movs	r2, #0
 800a452:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  return;
 800a456:	bf00      	nop
 800a458:	bf00      	nop
}
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	2000013c 	.word	0x2000013c
 800a464:	20000580 	.word	0x20000580
 800a468:	48000400 	.word	0x48000400

0800a46c <Evt_Notification>:
 * @brief  P2P GAP Notification
 * @param  GAP Notification (Opcode & Data)
 * @retval None
 */
void Evt_Notification( P2P_ConnHandle_Not_evt_t *pNotification )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Evt_Notification_1 */

/* USER CODE END Evt_Notification_1 */
  P2PR_APP_Device_Status_t device_status = { 0 };
 800a474:	f107 0308 	add.w	r3, r7, #8
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	809a      	strh	r2, [r3, #4]

  switch (pNotification->P2P_Evt_Opcode)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	2b0d      	cmp	r3, #13
 800a484:	f200 809d 	bhi.w	800a5c2 <Evt_Notification+0x156>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <Evt_Notification+0x24>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4c9 	.word	0x0800a4c9
 800a494:	0800a4d9 	.word	0x0800a4d9
 800a498:	0800a5c3 	.word	0x0800a5c3
 800a49c:	0800a4f1 	.word	0x0800a4f1
 800a4a0:	0800a4fb 	.word	0x0800a4fb
 800a4a4:	0800a50b 	.word	0x0800a50b
 800a4a8:	0800a51b 	.word	0x0800a51b
 800a4ac:	0800a52b 	.word	0x0800a52b
 800a4b0:	0800a53b 	.word	0x0800a53b
 800a4b4:	0800a54b 	.word	0x0800a54b
 800a4b8:	0800a563 	.word	0x0800a563
 800a4bc:	0800a57b 	.word	0x0800a57b
 800a4c0:	0800a593 	.word	0x0800a593
 800a4c4:	0800a5ab 	.word	0x0800a5ab
    case SMART_PHONE1_CONN_HANDLE_EVT:

      break;

    case P2P_SERVER1_CONN_HANDLE_EVT:
      device_status.Device1_Status = 0x81; /* Connected */
 800a4c8:	2381      	movs	r3, #129	; 0x81
 800a4ca:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a4cc:	f107 0308 	add.w	r3, r7, #8
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f9a7 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a4d6:	e075      	b.n	800a5c4 <Evt_Notification+0x158>

    case P2P_SERVER1_DISCON_HANDLE_EVT:
      device_status.Device1_Status = 0x80; /* Not connected */
 800a4d8:	2380      	movs	r3, #128	; 0x80
 800a4da:	723b      	strb	r3, [r7, #8]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f99f 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      /* restart Create Connection */
      UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	2004      	movs	r0, #4
 800a4ea:	f001 f99f 	bl	800b82c <UTIL_SEQ_SetTask>
      break;
 800a4ee:	e069      	b.n	800a5c4 <Evt_Notification+0x158>

    case SMART_PHONE1_DISCON_HANDLE_EVT:
      UTIL_SEQ_SetTask(1 << CFG_TASK_START_ADV_ID, CFG_SCH_PRIO_0);
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f001 f99a 	bl	800b82c <UTIL_SEQ_SetTask>
      break;
 800a4f8:	e064      	b.n	800a5c4 <Evt_Notification+0x158>

#if (CFG_P2P_DEMO_MULTI != 0)
    /* USER CODE BEGIN P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_CONN_HANDLE_EVT:
      device_status.Device2_Status = 0x81; /* Connected */
 800a4fa:	2381      	movs	r3, #129	; 0x81
 800a4fc:	727b      	strb	r3, [r7, #9]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a4fe:	f107 0308 	add.w	r3, r7, #8
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f98e 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a508:	e05c      	b.n	800a5c4 <Evt_Notification+0x158>

    case P2P_SERVER3_CONN_HANDLE_EVT:
      device_status.Device3_Status = 0x81; /* connected */
 800a50a:	2381      	movs	r3, #129	; 0x81
 800a50c:	72bb      	strb	r3, [r7, #10]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a50e:	f107 0308 	add.w	r3, r7, #8
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f986 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a518:	e054      	b.n	800a5c4 <Evt_Notification+0x158>

    case P2P_SERVER4_CONN_HANDLE_EVT:
      device_status.Device4_Status = 0x81; /* Connected */
 800a51a:	2381      	movs	r3, #129	; 0x81
 800a51c:	72fb      	strb	r3, [r7, #11]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a51e:	f107 0308 	add.w	r3, r7, #8
 800a522:	4618      	mov	r0, r3
 800a524:	f000 f97e 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a528:	e04c      	b.n	800a5c4 <Evt_Notification+0x158>

    case P2P_SERVER5_CONN_HANDLE_EVT:
      device_status.Device5_Status = 0x81; /* Connected */
 800a52a:	2381      	movs	r3, #129	; 0x81
 800a52c:	733b      	strb	r3, [r7, #12]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	4618      	mov	r0, r3
 800a534:	f000 f976 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a538:	e044      	b.n	800a5c4 <Evt_Notification+0x158>

    case P2P_SERVER6_CONN_HANDLE_EVT:
      device_status.Device6_Status = 0x81; /* Connected */
 800a53a:	2381      	movs	r3, #129	; 0x81
 800a53c:	737b      	strb	r3, [r7, #13]
      P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f96e 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
      break;
 800a548:	e03c      	b.n	800a5c4 <Evt_Notification+0x158>
    /* USER CODE END P2P_SERVER_CONN_HANDLE_EVT_Multi_Notification */
    /* USER CODE BEGIN P2P_SERVER_DISCON_HANDLE_EVT_Multi_Notification */
    case P2P_SERVER2_DISCON_HANDLE_EVT:
       device_status.Device2_Status = 0x80; /* Not connected */
 800a54a:	2380      	movs	r3, #128	; 0x80
 800a54c:	727b      	strb	r3, [r7, #9]
       P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f966 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
       UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_2_ID, CFG_SCH_PRIO_0);
 800a558:	2100      	movs	r1, #0
 800a55a:	2008      	movs	r0, #8
 800a55c:	f001 f966 	bl	800b82c <UTIL_SEQ_SetTask>
       break;
 800a560:	e030      	b.n	800a5c4 <Evt_Notification+0x158>

     case P2P_SERVER3_DISCON_HANDLE_EVT:
       device_status.Device3_Status = 0x80; /* Not connected */
 800a562:	2380      	movs	r3, #128	; 0x80
 800a564:	72bb      	strb	r3, [r7, #10]
       P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a566:	f107 0308 	add.w	r3, r7, #8
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 f95a 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
       /* Restart Create Connection */
       UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_3_ID, CFG_SCH_PRIO_0);
 800a570:	2100      	movs	r1, #0
 800a572:	2010      	movs	r0, #16
 800a574:	f001 f95a 	bl	800b82c <UTIL_SEQ_SetTask>
       break;
 800a578:	e024      	b.n	800a5c4 <Evt_Notification+0x158>

     case P2P_SERVER4_DISCON_HANDLE_EVT:
       device_status.Device4_Status = 0x80; /* Not connected */
 800a57a:	2380      	movs	r3, #128	; 0x80
 800a57c:	72fb      	strb	r3, [r7, #11]
       P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a57e:	f107 0308 	add.w	r3, r7, #8
 800a582:	4618      	mov	r0, r3
 800a584:	f000 f94e 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
       UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_4_ID, CFG_SCH_PRIO_0);
 800a588:	2100      	movs	r1, #0
 800a58a:	2020      	movs	r0, #32
 800a58c:	f001 f94e 	bl	800b82c <UTIL_SEQ_SetTask>
       break;
 800a590:	e018      	b.n	800a5c4 <Evt_Notification+0x158>

     case P2P_SERVER5_DISCON_HANDLE_EVT:
       device_status.Device5_Status = 0x80; /* Not connected */
 800a592:	2380      	movs	r3, #128	; 0x80
 800a594:	733b      	strb	r3, [r7, #12]
       P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a596:	f107 0308 	add.w	r3, r7, #8
 800a59a:	4618      	mov	r0, r3
 800a59c:	f000 f942 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
       /* Restart Create Connection */
       UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_5_ID, CFG_SCH_PRIO_0);
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	2040      	movs	r0, #64	; 0x40
 800a5a4:	f001 f942 	bl	800b82c <UTIL_SEQ_SetTask>
       break;
 800a5a8:	e00c      	b.n	800a5c4 <Evt_Notification+0x158>

     case P2P_SERVER6_DISCON_HANDLE_EVT:
       device_status.Device6_Status = 0x80; /* Not connected */
 800a5aa:	2380      	movs	r3, #128	; 0x80
 800a5ac:	737b      	strb	r3, [r7, #13]
       P2PR_APP_End_Device_Mgt_Connection_Update(&device_status);
 800a5ae:	f107 0308 	add.w	r3, r7, #8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f000 f936 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>
       UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_6_ID, CFG_SCH_PRIO_0);
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	2080      	movs	r0, #128	; 0x80
 800a5bc:	f001 f936 	bl	800b82c <UTIL_SEQ_SetTask>
       break;
 800a5c0:	e000      	b.n	800a5c4 <Evt_Notification+0x158>

    default:
    /* USER CODE BEGIN P2P_Evt_Opcode_Default */

    /* USER CODE END P2P_Evt_Opcode_Default */
    break;
 800a5c2:	bf00      	nop
  }
/* USER CODE BEGIN Evt_Notification_2 */

/* USER CODE END Evt_Notification_2 */
  return;
 800a5c4:	bf00      	nop
}
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800a5d2:	f7fe fe19 	bl	8009208 <LL_FLASH_GetUDN>
 800a5d6:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d023      	beq.n	800a628 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800a5e0:	f7fe fe2a 	bl	8009238 <LL_FLASH_GetSTCompanyID>
 800a5e4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800a5e6:	f7fe fe1b 	bl	8009220 <LL_FLASH_GetDeviceID>
 800a5ea:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	4b16      	ldr	r3, [pc, #88]	; (800a64c <BleGetBdAddress+0x80>)
 800a5f2:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	4b14      	ldr	r3, [pc, #80]	; (800a64c <BleGetBdAddress+0x80>)
 800a5fc:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	0c1b      	lsrs	r3, r3, #16
 800a602:	b2da      	uxtb	r2, r3
 800a604:	4b11      	ldr	r3, [pc, #68]	; (800a64c <BleGetBdAddress+0x80>)
 800a606:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	4b0f      	ldr	r3, [pc, #60]	; (800a64c <BleGetBdAddress+0x80>)
 800a60e:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	b2da      	uxtb	r2, r3
 800a614:	4b0d      	ldr	r3, [pc, #52]	; (800a64c <BleGetBdAddress+0x80>)
 800a616:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <BleGetBdAddress+0x80>)
 800a620:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800a622:	4b0a      	ldr	r3, [pc, #40]	; (800a64c <BleGetBdAddress+0x80>)
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e00b      	b.n	800a640 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800a628:	2000      	movs	r0, #0
 800a62a:	f7fe fd07 	bl	800903c <OTP_Read>
 800a62e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	617b      	str	r3, [r7, #20]
 800a63a:	e001      	b.n	800a640 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800a63c:	4b04      	ldr	r3, [pc, #16]	; (800a650 <BleGetBdAddress+0x84>)
 800a63e:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 800a640:	697b      	ldr	r3, [r7, #20]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	200002f4 	.word	0x200002f4
 800a650:	0800bd54 	.word	0x0800bd54

0800a654 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800a65c:	2100      	movs	r1, #0
 800a65e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a662:	f001 f8e3 	bl	800b82c <UTIL_SEQ_SetTask>
  return;
 800a666:	bf00      	nop
}
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a676:	2001      	movs	r0, #1
 800a678:	f001 f944 	bl	800b904 <UTIL_SEQ_SetEvt>
  return;
 800a67c:	bf00      	nop
}
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800a68c:	2001      	movs	r0, #1
 800a68e:	f001 f959 	bl	800b944 <UTIL_SEQ_WaitEvt>
  return;
 800a692:	bf00      	nop
}
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd ff15 	bl	80084dc <SVCCTL_UserEvtRx>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d003      	beq.n	800a6c4 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800a6c2:	e002      	b.n	800a6ca <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	701a      	strb	r2, [r3, #0]
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	4603      	mov	r3, r0
 800a6da:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <BLE_StatusNot+0x16>
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d007      	beq.n	800a6f6 <BLE_StatusNot+0x24>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800a6e6:	e00d      	b.n	800a704 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a6e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a6ec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f001 f8c8 	bl	800b884 <UTIL_SEQ_PauseTask>
      break;
 800a6f4:	e006      	b.n	800a704 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800a6f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800a6fa:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f001 f8e1 	bl	800b8c4 <UTIL_SEQ_ResumeTask>
      break;
 800a702:	bf00      	nop
  }
  return;
 800a704:	bf00      	nop
}
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <EDS_STM_App_Notification>:
 * @brief  End Device service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void EDS_STM_App_Notification(EDS_STM_App_Notification_evt_t *pNotification)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN EDS_STM_App_Notification_1 */

/* USER CODE END EDS_STM_App_Notification_1 */
        switch(pNotification->EDS_Evt_Opcode)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <EDS_STM_App_Notification+0x1c>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d107      	bne.n	800a730 <EDS_STM_App_Notification+0x24>
        case EDS_STM_NOTIFY_ENABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION ENABLED\r\n");
#endif
            /* USER CODE BEGIN EDS_STM_NOTIFY_ENABLED_EVT */
            P2P_Router_App_Context.Notification_EndDevice_Status = 1;
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <EDS_STM_App_Notification+0x34>)
 800a722:	2201      	movs	r2, #1
 800a724:	705a      	strb	r2, [r3, #1]

            /* USER CODE END EDS_STM_NOTIFY_ENABLED_EVT */
            break;
 800a726:	e004      	b.n	800a732 <EDS_STM_App_Notification+0x26>
        case EDS_STM_NOTIFY_DISABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : ENDDEVICEMGT NOTIFICATION DISABLED\r\n");
#endif
            /* USER CODE BEGIN EDS_STM_NOTIFY_DISABLED_EVT */
            P2P_Router_App_Context.Notification_EndDevice_Status = 0;
 800a728:	4b05      	ldr	r3, [pc, #20]	; (800a740 <EDS_STM_App_Notification+0x34>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	705a      	strb	r2, [r3, #1]

            /* USER CODE END EDS_STM_NOTIFY_DISABLED_EVT */
            break;
 800a72e:	e000      	b.n	800a732 <EDS_STM_App_Notification+0x26>

        default:
            /* USER CODE BEGIN EDS_Evt_Opcode_default */

            /* USER CODE END EDS_Evt_Opcode_default */
            break;
 800a730:	bf00      	nop
    }
/* USER CODE BEGIN EDS_STM_App_Notification_2 */

/* USER CODE END EDS_STM_App_Notification_2 */
    return;
 800a732:	bf00      	nop
}
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000254 	.word	0x20000254

0800a744 <P2PS_STM_App_Notification>:
 * @brief  P2P service Notification
 * @param  GATT Notification (Opcode & Data)
 * @retval None
 */
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
    switch(pNotification->P2P_Evt_Opcode)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b03      	cmp	r3, #3
 800a752:	d824      	bhi.n	800a79e <P2PS_STM_App_Notification+0x5a>
 800a754:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <P2PS_STM_App_Notification+0x18>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a76d 	.word	0x0800a76d
 800a760:	0800a775 	.word	0x0800a775
 800a764:	0800a79f 	.word	0x0800a79f
 800a768:	0800a77d 	.word	0x0800a77d
        case P2PS_STM__NOTIFY_ENABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION ENABLED\n\r");
#endif
            /* USER CODE BEGIN P2PS_STM__NOTIFY_ENABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 1;
 800a76c:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <P2PS_STM_App_Notification+0x64>)
 800a76e:	2201      	movs	r2, #1
 800a770:	701a      	strb	r2, [r3, #0]

            /* USER CODE END P2PS_STM__NOTIFY_ENABLED_EVT */
            break;
 800a772:	e015      	b.n	800a7a0 <P2PS_STM_App_Notification+0x5c>
        case P2PS_STM_NOTIFY_DISABLED_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : BUTTON NOTIFICATION DISABLED\n\r");
#endif
            /* USER CODE BEGIN P2PS_STM_NOTIFY_DISABLED_EVT */
            P2P_Router_App_Context.Notification_Button_Status = 0;
 800a774:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <P2PS_STM_App_Notification+0x64>)
 800a776:	2200      	movs	r2, #0
 800a778:	701a      	strb	r2, [r3, #0]

            /* USER CODE END P2PS_STM_NOTIFY_DISABLED_EVT */
            break;
 800a77a:	e011      	b.n	800a7a0 <P2PS_STM_App_Notification+0x5c>
        case P2PS_STM_WRITE_EVT:
#if(CFG_DEBUG_APP_TRACE != 0)
            APP_DBG_MSG("-- APPLICATION ROUTER : WRITE LED CONFIG TO ALL END DEVICE \n\r");
#endif
            /* USER CODE BEGIN P2PS_STM_WRITE_EVT */
            P2P_Router_App_Context.LedControlEndDevice.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <P2PS_STM_App_Notification+0x64>)
 800a784:	729a      	strb	r2, [r3, #10]
			P2P_Router_App_Context.LedControlEndDevice.Led1Control=pNotification->DataTransfered.pPayload[1];
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	785a      	ldrb	r2, [r3, #1]
 800a78c:	4b06      	ldr	r3, [pc, #24]	; (800a7a8 <P2PS_STM_App_Notification+0x64>)
 800a78e:	72da      	strb	r2, [r3, #11]
			Client_Update_Char( LED_CHAR_UUID, 0, (uint8_t *)&P2P_Router_App_Context.LedControlEndDevice);
 800a790:	4a06      	ldr	r2, [pc, #24]	; (800a7ac <P2PS_STM_App_Notification+0x68>)
 800a792:	2100      	movs	r1, #0
 800a794:	f642 3050 	movw	r0, #11088	; 0x2b50
 800a798:	f000 f99a 	bl	800aad0 <Client_Update_Char>

            /* USER CODE END P2PS_STM_WRITE_EVT */
            break;
 800a79c:	e000      	b.n	800a7a0 <P2PS_STM_App_Notification+0x5c>

        default:
            /* USER CODE BEGIN P2P_Evt_Opcode_default */

            /* USER CODE END P2P_Evt_Opcode_default */
        break;
 800a79e:	bf00      	nop
    }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
    return;
 800a7a0:	bf00      	nop
}
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	20000254 	.word	0x20000254
 800a7ac:	2000025e 	.word	0x2000025e

0800a7b0 <P2P_Router_APP_Init>:
 * @brief  Router Application initialisation
 * @param  None
 * @retval None
 */
void P2P_Router_APP_Init(void)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN P2P_Router_APP_Init_1 */
	P2PR_APP_Device_Status_t device_status;
    /* USER CODE END P2P_Router_APP_Init_1 */

    UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Client_Update_Service );
 800a7b6:	4a19      	ldr	r2, [pc, #100]	; (800a81c <P2P_Router_APP_Init+0x6c>)
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a7be:	f001 f813 	bl	800b7e8 <UTIL_SEQ_RegTask>

    /* USER CODE BEGIN P2P_Router_APP_Init_2 */
    /**
     * Initialize LedButton Service
     */
    P2P_Router_App_Context.Notification_Button_Status=0;
 800a7c2:	4b17      	ldr	r3, [pc, #92]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	701a      	strb	r2, [r3, #0]
    P2P_Router_App_Context.Notification_EndDevice_Status=0;
 800a7c8:	4b15      	ldr	r3, [pc, #84]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	705a      	strb	r2, [r3, #1]

    P2P_Router_App_Context.EndDeviceStatus.Device1_Status=0x00;
 800a7ce:	4b14      	ldr	r3, [pc, #80]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	709a      	strb	r2, [r3, #2]
    device_status.Device1_Status = 0x80; /* Not connected */
 800a7d4:	2380      	movs	r3, #128	; 0x80
 800a7d6:	703b      	strb	r3, [r7, #0]
#if (CFG_P2P_DEMO_MULTI != 0 )
    P2P_Router_App_Context.EndDeviceStatus.Device2_Status=0x00;
 800a7d8:	4b11      	ldr	r3, [pc, #68]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	70da      	strb	r2, [r3, #3]
    P2P_Router_App_Context.EndDeviceStatus.Device3_Status=0x00;
 800a7de:	4b10      	ldr	r3, [pc, #64]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	711a      	strb	r2, [r3, #4]
    P2P_Router_App_Context.EndDeviceStatus.Device4_Status=0x00;
 800a7e4:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	715a      	strb	r2, [r3, #5]
    P2P_Router_App_Context.EndDeviceStatus.Device5_Status=0x00;
 800a7ea:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	719a      	strb	r2, [r3, #6]
    P2P_Router_App_Context.EndDeviceStatus.Device6_Status=0x00;
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <P2P_Router_APP_Init+0x70>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	71da      	strb	r2, [r3, #7]
    device_status.Device2_Status = 0x80; /* Not connected */
 800a7f6:	2380      	movs	r3, #128	; 0x80
 800a7f8:	707b      	strb	r3, [r7, #1]
    device_status.Device3_Status = 0x80; /* Not connected */
 800a7fa:	2380      	movs	r3, #128	; 0x80
 800a7fc:	70bb      	strb	r3, [r7, #2]
    device_status.Device4_Status = 0x80; /* Not connected */
 800a7fe:	2380      	movs	r3, #128	; 0x80
 800a800:	70fb      	strb	r3, [r7, #3]
    device_status.Device5_Status = 0x80; /* Not connected */
 800a802:	2380      	movs	r3, #128	; 0x80
 800a804:	713b      	strb	r3, [r7, #4]
    device_status.Device6_Status = 0x80; /* Not connected */
 800a806:	2380      	movs	r3, #128	; 0x80
 800a808:	717b      	strb	r3, [r7, #5]
#endif
    /* Update EndDevice Management Service */


    P2PR_APP_End_Device_Mgt_Connection_Update( &device_status );
 800a80a:	463b      	mov	r3, r7
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 f809 	bl	800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>

    /* USER CODE END P2P_Router_APP_Init_2 */

    return;
 800a812:	bf00      	nop
}
 800a814:	3708      	adds	r7, #8
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	0800a979 	.word	0x0800a979
 800a820:	20000254 	.word	0x20000254

0800a824 <P2PR_APP_End_Device_Mgt_Connection_Update>:
 * @brief  End Device Managment
 * @param  None
 * @retval None
 */
void P2PR_APP_End_Device_Mgt_Connection_Update( P2PR_APP_Device_Status_t *p_device_status )
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_1 */

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_1 */
    if( (p_device_status->Device1_Status) & (0x80) )
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	b25b      	sxtb	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	da06      	bge.n	800a844 <P2PR_APP_End_Device_Mgt_Connection_Update+0x20>
    {
    /* USER CODE BEGIN Device1_Status */
    	  P2P_Router_App_Context.EndDeviceStatus.Device1_Status = (p_device_status->Device1_Status) & (0x7F);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	4b23      	ldr	r3, [pc, #140]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a842:	709a      	strb	r2, [r3, #2]

    /* USER CODE END Device1_Status */
    }
#if (CFG_P2P_DEMO_MULTI != 0 )
    /* USER CODE BEGIN CFG_P2P_DEMO_MULTI */
    if( (p_device_status->Device2_Status) & (0x80) )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	b25b      	sxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	da06      	bge.n	800a85c <P2PR_APP_End_Device_Mgt_Connection_Update+0x38>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device2_Status = (p_device_status->Device2_Status) & (0x7F);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	785b      	ldrb	r3, [r3, #1]
 800a852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a856:	b2da      	uxtb	r2, r3
 800a858:	4b1d      	ldr	r3, [pc, #116]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a85a:	70da      	strb	r2, [r3, #3]
    }

    if( (p_device_status->Device3_Status) & (0x80) )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	789b      	ldrb	r3, [r3, #2]
 800a860:	b25b      	sxtb	r3, r3
 800a862:	2b00      	cmp	r3, #0
 800a864:	da06      	bge.n	800a874 <P2PR_APP_End_Device_Mgt_Connection_Update+0x50>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device3_Status = (p_device_status->Device3_Status) & (0x7F);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	789b      	ldrb	r3, [r3, #2]
 800a86a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	4b17      	ldr	r3, [pc, #92]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a872:	711a      	strb	r2, [r3, #4]
    }

    if( (p_device_status->Device4_Status) & (0x80) )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	78db      	ldrb	r3, [r3, #3]
 800a878:	b25b      	sxtb	r3, r3
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	da06      	bge.n	800a88c <P2PR_APP_End_Device_Mgt_Connection_Update+0x68>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device4_Status = (p_device_status->Device4_Status) & (0x7F);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	78db      	ldrb	r3, [r3, #3]
 800a882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a886:	b2da      	uxtb	r2, r3
 800a888:	4b11      	ldr	r3, [pc, #68]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a88a:	715a      	strb	r2, [r3, #5]
    }
    if( (p_device_status->Device5_Status) & (0x80) )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	791b      	ldrb	r3, [r3, #4]
 800a890:	b25b      	sxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	da06      	bge.n	800a8a4 <P2PR_APP_End_Device_Mgt_Connection_Update+0x80>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device5_Status = (p_device_status->Device5_Status) & (0x7F);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	791b      	ldrb	r3, [r3, #4]
 800a89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a8a2:	719a      	strb	r2, [r3, #6]
    }

    if( (p_device_status->Device6_Status) & (0x80) )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	795b      	ldrb	r3, [r3, #5]
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	da06      	bge.n	800a8bc <P2PR_APP_End_Device_Mgt_Connection_Update+0x98>
    {
        P2P_Router_App_Context.EndDeviceStatus.Device6_Status = (p_device_status->Device6_Status) & (0x7F);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	795b      	ldrb	r3, [r3, #5]
 800a8b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b6:	b2da      	uxtb	r2, r3
 800a8b8:	4b05      	ldr	r3, [pc, #20]	; (800a8d0 <P2PR_APP_End_Device_Mgt_Connection_Update+0xac>)
 800a8ba:	71da      	strb	r2, [r3, #7]
    }

    /* USER CODE END CFG_P2P_DEMO_MULTI */
#endif
/* USER CODE BEGIN P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    EDS_STM_Update_Char(END_DEVICE_STATUS_CHAR_UUID,
 800a8bc:	4905      	ldr	r1, [pc, #20]	; (800a8d4 <P2PR_APP_End_Device_Mgt_Connection_Update+0xb0>)
 800a8be:	f642 3060 	movw	r0, #11104	; 0x2b60
 800a8c2:	f7fd fbf9 	bl	80080b8 <EDS_STM_Update_Char>
            (uint8_t *)&P2P_Router_App_Context.EndDeviceStatus);

/* USER CODE END P2PR_APP_End_Device_Mgt_Connection_Update_2 */
    return;
 800a8c6:	bf00      	nop
}
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000254 	.word	0x20000254
 800a8d4:	20000256 	.word	0x20000256

0800a8d8 <P2P_Client_App_Notification>:
 * @brief  Notification from the Server
 * @param  Client Notification from Server side
 * @retval None
 */
void P2P_Client_App_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2P_Client_App_Notification_1 */

/* USER CODE END P2P_Client_App_Notification_1 */
    switch(pNotification->P2P_Client_Evt_Opcode)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d113      	bne.n	800a910 <P2P_Client_App_Notification+0x38>
    {
    /* USER CODE BEGIN P2P_Client_Evt_Opcode */
    case P2P_BUTTON_INFO_RECEIVED_EVT:
      {

         if(P2P_Router_App_Context.Notification_Button_Status){
 800a8e8:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <P2P_Client_App_Notification+0x48>)
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d011      	beq.n	800a914 <P2P_Client_App_Notification+0x3c>
          APP_DBG_MSG("-- APPLICATION : INFORM SMART PHONE DEVICE %x BUTTON PUSHED \n\r ",pNotification->DataTransfered.pPayload[0]);
          APP_DBG_MSG("\r\n\r ");
          P2P_Router_App_Context.ButtonStatusEndDevice.ButtonStatus=pNotification->DataTransfered.pPayload[1];
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	785a      	ldrb	r2, [r3, #1]
 800a8f6:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <P2P_Client_App_Notification+0x48>)
 800a8f8:	725a      	strb	r2, [r3, #9]
          P2P_Router_App_Context.ButtonStatusEndDevice.Device_Button_Selection=pNotification->DataTransfered.pPayload[0];
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	781a      	ldrb	r2, [r3, #0]
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <P2P_Client_App_Notification+0x48>)
 800a902:	721a      	strb	r2, [r3, #8]
          P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Router_App_Context.ButtonStatusEndDevice);
 800a904:	4907      	ldr	r1, [pc, #28]	; (800a924 <P2P_Client_App_Notification+0x4c>)
 800a906:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800a90a:	f7fd fcfb 	bl	8008304 <P2PS_STM_App_Update_Char>
      }



      }
      break;
 800a90e:	e001      	b.n	800a914 <P2P_Client_App_Notification+0x3c>
    /* USER CODE END P2P_Client_Evt_Opcode */
        default:
    /* USER CODE BEGIN P2P_Client_Evt_Opcode_default */

    /* USER CODE END P2P_Client_Evt_Opcode_default */
            break;
 800a910:	bf00      	nop
 800a912:	e000      	b.n	800a916 <P2P_Client_App_Notification+0x3e>
      break;
 800a914:	bf00      	nop

    }
/* USER CODE BEGIN P2P_Client_App_Notification_2 */

/* USER CODE END P2P_Client_App_Notification_2 */
    return;
 800a916:	bf00      	nop
}
 800a918:	3708      	adds	r7, #8
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	20000254 	.word	0x20000254
 800a924:	2000025c 	.word	0x2000025c

0800a928 <P2P_Client_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2P_Client_Init(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
    uint8_t index =0;
 800a92e:	2300      	movs	r3, #0
 800a930:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2P_Client_Init_1 */

/* USER CODE END P2P_Client_Init_1 */

    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800a932:	2300      	movs	r3, #0
 800a934:	71fb      	strb	r3, [r7, #7]
 800a936:	e008      	b.n	800a94a <P2P_Client_Init+0x22>
        aP2PClientContext[index].state= APP_BLE_IDLE;
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	4a09      	ldr	r2, [pc, #36]	; (800a960 <P2P_Client_Init+0x38>)
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	4413      	add	r3, r2
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 800a944:	79fb      	ldrb	r3, [r7, #7]
 800a946:	3301      	adds	r3, #1
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	2b05      	cmp	r3, #5
 800a94e:	d9f3      	bls.n	800a938 <P2P_Client_Init+0x10>
    /**
     *    Register the event handler to the BLE controller
     */
    SVCCTL_RegisterCltHandler(Client_Event_Handler);
 800a950:	4804      	ldr	r0, [pc, #16]	; (800a964 <P2P_Client_Init+0x3c>)
 800a952:	f7fd fda9 	bl	80084a8 <SVCCTL_RegisterCltHandler>
/* USER CODE BEGIN P2P_Client_Init_2 */
    APP_DBG_MSG("-- LED BUTTON CLIENT INITIALIZED \n");

/* USER CODE END P2P_Client_Init_2 */
    return;
 800a956:	bf00      	nop
}
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	200001f4 	.word	0x200001f4
 800a964:	0800ab45 	.word	0x0800ab45

0800a968 <P2PR_APP_Init>:
 *
 * PUBLIC FUNCTIONS
 *
 *************************************************************/
void P2PR_APP_Init( void )
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	af00      	add	r7, sp, #0
    P2P_Router_APP_Init();
 800a96c:	f7ff ff20 	bl	800a7b0 <P2P_Router_APP_Init>
    P2P_Client_Init();
 800a970:	f7ff ffda 	bl	800a928 <P2P_Client_Init>
    /* USER CODE BEGIN P2PR_APP_Init */

    /* USER CODE END P2PR_APP_Init */
    return;
 800a974:	bf00      	nop
}
 800a976:	bd80      	pop	{r7, pc}

0800a978 <Client_Update_Service>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Client_Update_Service( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Client_Update_Service_1 */

    /* USER CODE END Client_Update_Service_1 */
    uint16_t enable = 0x0001;
 800a97e:	2301      	movs	r3, #1
 800a980:	80bb      	strh	r3, [r7, #4]

    uint8_t index;

    index = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800a986:	e091      	b.n	800aaac <Client_Update_Service+0x134>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {

        switch(aP2PClientContext[index].state)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	4a50      	ldr	r2, [pc, #320]	; (800aacc <Client_Update_Service+0x154>)
 800a98c:	011b      	lsls	r3, r3, #4
 800a98e:	4413      	add	r3, r2
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	3b06      	subs	r3, #6
 800a994:	2b06      	cmp	r3, #6
 800a996:	f200 8085 	bhi.w	800aaa4 <Client_Update_Service+0x12c>
 800a99a:	a201      	add	r2, pc, #4	; (adr r2, 800a9a0 <Client_Update_Service+0x28>)
 800a99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a0:	0800aaa5 	.word	0x0800aaa5
 800a9a4:	0800aa4b 	.word	0x0800aa4b
 800a9a8:	0800a9bd 	.word	0x0800a9bd
 800a9ac:	0800a9ed 	.word	0x0800a9ed
 800a9b0:	0800aaa5 	.word	0x0800aaa5
 800a9b4:	0800aa1d 	.word	0x0800aa1d
 800a9b8:	0800aa77 	.word	0x0800aa77
        {
            /* USER CODE BEGIN aP2PClientContext */
        case APP_BLE_DISCOVER_LED_CHAR_DESC: /* Not Used - No decriptor */
            APP_DBG_MSG("* GATT : Discover Descriptor of Led Characteritic\n");
            aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	4a43      	ldr	r2, [pc, #268]	; (800aacc <Client_Update_Service+0x154>)
 800a9c0:	011b      	lsls	r3, r3, #4
 800a9c2:	4413      	add	r3, r2
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	8818      	ldrh	r0, [r3, #0]
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	4a40      	ldr	r2, [pc, #256]	; (800aacc <Client_Update_Service+0x154>)
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	4413      	add	r3, r2
 800a9d0:	3308      	adds	r3, #8
 800a9d2:	8819      	ldrh	r1, [r3, #0]
                    aP2PClientContext[index].P2PLedCharHdle,
                    aP2PClientContext[index].P2PLedCharHdle+2);
 800a9d4:	79fb      	ldrb	r3, [r7, #7]
 800a9d6:	4a3d      	ldr	r2, [pc, #244]	; (800aacc <Client_Update_Service+0x154>)
 800a9d8:	011b      	lsls	r3, r3, #4
 800a9da:	4413      	add	r3, r2
 800a9dc:	3308      	adds	r3, #8
 800a9de:	881b      	ldrh	r3, [r3, #0]
            aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	f7fc ff91 	bl	800790c <aci_gatt_disc_all_char_desc>

            break;
 800a9ea:	e05c      	b.n	800aaa6 <Client_Update_Service+0x12e>
        case APP_BLE_DISCOVER_BUTTON_CHAR_DESC:
            APP_DBG_MSG("* GATT : Discover Descriptor of Button Characteritic\n");
            aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800a9ec:	79fb      	ldrb	r3, [r7, #7]
 800a9ee:	4a37      	ldr	r2, [pc, #220]	; (800aacc <Client_Update_Service+0x154>)
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	4413      	add	r3, r2
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	8818      	ldrh	r0, [r3, #0]
 800a9f8:	79fb      	ldrb	r3, [r7, #7]
 800a9fa:	4a34      	ldr	r2, [pc, #208]	; (800aacc <Client_Update_Service+0x154>)
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	4413      	add	r3, r2
 800aa00:	330c      	adds	r3, #12
 800aa02:	8819      	ldrh	r1, [r3, #0]
                    aP2PClientContext[index].P2PClientCharHdle,
                    aP2PClientContext[index].P2PClientCharHdle+2);
 800aa04:	79fb      	ldrb	r3, [r7, #7]
 800aa06:	4a31      	ldr	r2, [pc, #196]	; (800aacc <Client_Update_Service+0x154>)
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	4413      	add	r3, r2
 800aa0c:	330c      	adds	r3, #12
 800aa0e:	881b      	ldrh	r3, [r3, #0]
            aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 800aa10:	3302      	adds	r3, #2
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	461a      	mov	r2, r3
 800aa16:	f7fc ff79 	bl	800790c <aci_gatt_disc_all_char_desc>

            break;
 800aa1a:	e044      	b.n	800aaa6 <Client_Update_Service+0x12e>
        case APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC:
            APP_DBG_MSG("* GATT : Enable Button Notification\n");
            aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	4a2b      	ldr	r2, [pc, #172]	; (800aacc <Client_Update_Service+0x154>)
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	4413      	add	r3, r2
 800aa24:	3302      	adds	r3, #2
 800aa26:	8818      	ldrh	r0, [r3, #0]
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	4a28      	ldr	r2, [pc, #160]	; (800aacc <Client_Update_Service+0x154>)
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	4413      	add	r3, r2
 800aa30:	330e      	adds	r3, #14
 800aa32:	8819      	ldrh	r1, [r3, #0]
 800aa34:	1d3b      	adds	r3, r7, #4
 800aa36:	2202      	movs	r2, #2
 800aa38:	f7fc ffd3 	bl	80079e2 <aci_gatt_write_char_desc>
                    aP2PClientContext[index].P2PClientDescHandle,
                    2,
                    (uint8_t *)&enable);

            aP2PClientContext[index].state = APP_BLE_CONNECTED;
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	4a23      	ldr	r2, [pc, #140]	; (800aacc <Client_Update_Service+0x154>)
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	4413      	add	r3, r2
 800aa44:	2205      	movs	r2, #5
 800aa46:	701a      	strb	r2, [r3, #0]

            break;
 800aa48:	e02d      	b.n	800aaa6 <Client_Update_Service+0x12e>
            break;
            case APP_BLE_DISCOVER_CHARACS:
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Discover Led Button  Characteristics\n");
#endif
                aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	4a1f      	ldr	r2, [pc, #124]	; (800aacc <Client_Update_Service+0x154>)
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	4413      	add	r3, r2
 800aa52:	3302      	adds	r3, #2
 800aa54:	8818      	ldrh	r0, [r3, #0]
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <Client_Update_Service+0x154>)
 800aa5a:	011b      	lsls	r3, r3, #4
 800aa5c:	4413      	add	r3, r2
 800aa5e:	3304      	adds	r3, #4
 800aa60:	8819      	ldrh	r1, [r3, #0]
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	4a19      	ldr	r2, [pc, #100]	; (800aacc <Client_Update_Service+0x154>)
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	4413      	add	r3, r2
 800aa6a:	3306      	adds	r3, #6
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7fc fee1 	bl	8007836 <aci_gatt_disc_all_char_of_service>
                        aP2PClientContext[index].P2PServiceHandle,
                        aP2PClientContext[index].P2PServiceEndHandle);
            /* USER CODE BEGIN APP_BLE_DISCOVER_CHARACS */

            /* USER CODE END APP_BLE_DISCOVER_CHARACS */
                break;
 800aa74:	e017      	b.n	800aaa6 <Client_Update_Service+0x12e>

            case APP_BLE_DISABLE_NOTIFICATION_TX_DESC :
#if(CFG_DEBUG_APP_TRACE != 0)
                APP_DBG_MSG("* GATT : Disable Button Notification\n");
#endif
                aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 800aa76:	79fb      	ldrb	r3, [r7, #7]
 800aa78:	4a14      	ldr	r2, [pc, #80]	; (800aacc <Client_Update_Service+0x154>)
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	4413      	add	r3, r2
 800aa7e:	3302      	adds	r3, #2
 800aa80:	8818      	ldrh	r0, [r3, #0]
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	4a11      	ldr	r2, [pc, #68]	; (800aacc <Client_Update_Service+0x154>)
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	4413      	add	r3, r2
 800aa8a:	330e      	adds	r3, #14
 800aa8c:	8819      	ldrh	r1, [r3, #0]
 800aa8e:	1d3b      	adds	r3, r7, #4
 800aa90:	2202      	movs	r2, #2
 800aa92:	f7fc ffa6 	bl	80079e2 <aci_gatt_write_char_desc>
                        aP2PClientContext[index].P2PClientDescHandle,
                        2,
                        (uint8_t *)&enable);

                aP2PClientContext[index].state = APP_BLE_CONNECTED;
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	4a0c      	ldr	r2, [pc, #48]	; (800aacc <Client_Update_Service+0x154>)
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	4413      	add	r3, r2
 800aa9e:	2205      	movs	r2, #5
 800aaa0:	701a      	strb	r2, [r3, #0]
            /* USER CODE BEGIN APP_BLE_DISABLE_NOTIFICATION_TX_DESC */

            /* USER CODE END APP_BLE_DISABLE_NOTIFICATION_TX_DESC */
                break;
 800aaa2:	e000      	b.n	800aaa6 <Client_Update_Service+0x12e>
            default:
            /* USER CODE BEGIN aP2PClientContext_default */

            /* USER CODE END aP2PClientContext_default */
                break;
 800aaa4:	bf00      	nop
        }
        index++;
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	71fb      	strb	r3, [r7, #7]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d808      	bhi.n	800aac4 <Client_Update_Service+0x14c>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	4a05      	ldr	r2, [pc, #20]	; (800aacc <Client_Update_Service+0x154>)
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	4413      	add	r3, r2
 800aaba:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f47f af63 	bne.w	800a988 <Client_Update_Service+0x10>
    }
    /* USER CODE BEGIN Client_Update_Service_2 */

    /* USER CODE END Client_Update_Service_2 */
    return;
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
}
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	200001f4 	.word	0x200001f4

0800aad0 <Client_Update_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Client_Update_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	603a      	str	r2, [r7, #0]
 800aada:	80fb      	strh	r3, [r7, #6]
 800aadc:	460b      	mov	r3, r1
 800aade:	717b      	strb	r3, [r7, #5]
    /* USER CODE BEGIN Client_Update_Char_1 */

    /* USER CODE END Client_Update_Char_1 */
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800aae0:	2342      	movs	r3, #66	; 0x42
 800aae2:	73fb      	strb	r3, [r7, #15]
    uint8_t index;

    index = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800aae8:	e01b      	b.n	800ab22 <Client_Update_Char+0x52>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
    {
        /* USER CODE BEGIN Client_Update_Char_2 */
        switch(UUID)
 800aaea:	88fb      	ldrh	r3, [r7, #6]
 800aaec:	f642 3250 	movw	r2, #11088	; 0x2b50
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d112      	bne.n	800ab1a <Client_Update_Char+0x4a>
        {
            case LED_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
                ret =aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	4a12      	ldr	r2, [pc, #72]	; (800ab40 <Client_Update_Char+0x70>)
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	4413      	add	r3, r2
 800aafc:	3302      	adds	r3, #2
 800aafe:	8818      	ldrh	r0, [r3, #0]
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	4a0f      	ldr	r2, [pc, #60]	; (800ab40 <Client_Update_Char+0x70>)
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4413      	add	r3, r2
 800ab08:	3308      	adds	r3, #8
 800ab0a:	8819      	ldrh	r1, [r3, #0]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f7fc ffec 	bl	8007aec <aci_gatt_write_without_resp>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
                        aP2PClientContext[index].P2PLedCharHdle,
                        2, /* charValueLen */
                        (uint8_t *)  pPayload);

                break;
 800ab18:	e000      	b.n	800ab1c <Client_Update_Char+0x4c>

            default:
                break;
 800ab1a:	bf00      	nop
        }
        /* USER CODE END Client_Update_Char_2 */
        index++;
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	73bb      	strb	r3, [r7, #14]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ab22:	7bbb      	ldrb	r3, [r7, #14]
 800ab24:	2b05      	cmp	r3, #5
 800ab26:	d806      	bhi.n	800ab36 <Client_Update_Char+0x66>
            (aP2PClientContext[index].state != APP_BLE_IDLE))
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	4a05      	ldr	r2, [pc, #20]	; (800ab40 <Client_Update_Char+0x70>)
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	4413      	add	r3, r2
 800ab30:	781b      	ldrb	r3, [r3, #0]
    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1d9      	bne.n	800aaea <Client_Update_Char+0x1a>
    }
    /* USER CODE BEGIN Client_Update_Char_3 */

    /* USER CODE END Client_Update_Char_3 */
    return ret;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}/* end Client_Update_Char() */
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	200001f4 	.word	0x200001f4

0800ab44 <Client_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Client_Event_Handler(void *Event)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b096      	sub	sp, #88	; 0x58
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
    SVCCTL_EvtAckStatus_t return_value;
    hci_event_pckt *event_pckt;
    evt_blue_aci *blue_evt;
    P2P_Client_App_Notification_evt_t Notification;

    return_value = SVCCTL_EvtNotAck;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3301      	adds	r3, #1
 800ab56:	64bb      	str	r3, [r7, #72]	; 0x48

    switch(event_pckt->evt)
 800ab58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2bff      	cmp	r3, #255	; 0xff
 800ab5e:	f040 827f 	bne.w	800b060 <Client_Event_Handler+0x51c>
        case EVT_VENDOR:
        {
            /* USER CODE BEGIN EVT_VENDOR */

            /* USER CODE END EVT_VENDOR */
            blue_evt = (evt_blue_aci*)event_pckt->data;
 800ab62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab64:	3302      	adds	r3, #2
 800ab66:	647b      	str	r3, [r7, #68]	; 0x44
            switch(blue_evt->ecode)
 800ab68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800ab72:	2b0c      	cmp	r3, #12
 800ab74:	f200 8268 	bhi.w	800b048 <Client_Event_Handler+0x504>
 800ab78:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <Client_Event_Handler+0x3c>)
 800ab7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7e:	bf00      	nop
 800ab80:	0800ae73 	.word	0x0800ae73
 800ab84:	0800b049 	.word	0x0800b049
 800ab88:	0800ad55 	.word	0x0800ad55
 800ab8c:	0800b049 	.word	0x0800b049
 800ab90:	0800b049 	.word	0x0800b049
 800ab94:	0800b049 	.word	0x0800b049
 800ab98:	0800abb5 	.word	0x0800abb5
 800ab9c:	0800b049 	.word	0x0800b049
 800aba0:	0800b049 	.word	0x0800b049
 800aba4:	0800b049 	.word	0x0800b049
 800aba8:	0800b049 	.word	0x0800b049
 800abac:	0800af81 	.word	0x0800af81
 800abb0:	0800affd 	.word	0x0800affd
                case EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP */

                    /* USER CODE END EVT_BLUE_ATT_READ_BY_GROUP_TYPE_RESP */
                    aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800abb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb6:	3302      	adds	r3, #2
 800abb8:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint8_t numServ, i, idx;
                    uint16_t uuid, handle;

                    uint8_t index;
                    handle = pr->Connection_Handle;
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	785b      	ldrb	r3, [r3, #1]
 800abc0:	021b      	lsls	r3, r3, #8
 800abc2:	4313      	orrs	r3, r2
 800abc4:	86fb      	strh	r3, [r7, #54]	; 0x36
                    index = 0;
 800abc6:	2300      	movs	r3, #0
 800abc8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800abcc:	e02e      	b.n	800ac2c <Client_Event_Handler+0xe8>
                            (aP2PClientContext[index].state != APP_BLE_IDLE)/* &&
                        (aP2PClientContext[index].connHandle != handle)*/)
                    {
                        APP_BLE_ConnStatus_t status;

                        status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 800abce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800abd2:	4aab      	ldr	r2, [pc, #684]	; (800ae80 <Client_Event_Handler+0x33c>)
 800abd4:	011b      	lsls	r3, r3, #4
 800abd6:	4413      	add	r3, r2
 800abd8:	3302      	adds	r3, #2
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff f905 	bl	8009dec <APP_BLE_Get_Client_Connection_Status>
 800abe2:	4603      	mov	r3, r0
 800abe4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                        if((aP2PClientContext[index].state == APP_BLE_CONNECTED)&&
 800abe8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800abec:	4aa4      	ldr	r2, [pc, #656]	; (800ae80 <Client_Event_Handler+0x33c>)
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	4413      	add	r3, r2
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b05      	cmp	r3, #5
 800abf6:	d114      	bne.n	800ac22 <Client_Event_Handler+0xde>
 800abf8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d110      	bne.n	800ac22 <Client_Event_Handler+0xde>
                                (status == APP_BLE_IDLE))
                        {
                            /* Handle deconnected */

                            aP2PClientContext[index].state = APP_BLE_IDLE;
 800ac00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac04:	4a9e      	ldr	r2, [pc, #632]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ac06:	011b      	lsls	r3, r3, #4
 800ac08:	4413      	add	r3, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
                            aP2PClientContext[index].connHandle = 0xFFFF;
 800ac0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac12:	4a9b      	ldr	r2, [pc, #620]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	4413      	add	r3, r2
 800ac18:	3302      	adds	r3, #2
 800ac1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac1e:	801a      	strh	r2, [r3, #0]
                            break;
 800ac20:	e010      	b.n	800ac44 <Client_Event_Handler+0x100>
                        }
                        index++;
 800ac22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac26:	3301      	adds	r3, #1
 800ac28:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ac2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	d807      	bhi.n	800ac44 <Client_Event_Handler+0x100>
                            (aP2PClientContext[index].state != APP_BLE_IDLE)/* &&
 800ac34:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac38:	4a91      	ldr	r2, [pc, #580]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	4413      	add	r3, r2
 800ac3e:	781b      	ldrb	r3, [r3, #0]
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1c4      	bne.n	800abce <Client_Event_Handler+0x8a>
                    }

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ac44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac48:	2b05      	cmp	r3, #5
 800ac4a:	f200 81ff 	bhi.w	800b04c <Client_Event_Handler+0x508>
                    {
                        aP2PClientContext[index].connHandle= handle;
 800ac4e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ac52:	4a8b      	ldr	r2, [pc, #556]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	4413      	add	r3, r2
 800ac58:	3302      	adds	r3, #2
 800ac5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ac5c:	801a      	strh	r2, [r3, #0]
                        numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac60:	78da      	ldrb	r2, [r3, #3]
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	789b      	ldrb	r3, [r3, #2]
 800ac66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                         * So check if the data length is 6
                         * we are intersted only if the UUID is 128 bit.
                         * So check if the data length is 20
                         */
#if (UUID_128BIT_FORMAT==1)
                        if (pr->Attribute_Data_Length == 20)
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	789b      	ldrb	r3, [r3, #2]
 800ac72:	2b14      	cmp	r3, #20
 800ac74:	f040 81ea 	bne.w	800b04c <Client_Event_Handler+0x508>
                        {
                            idx = 16;
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#else
                            if (pr->Attribute_Data_Length == 6)
                            {
                                idx = 4;
#endif
                                for (i=0; i<numServ; i++)
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ac84:	e05f      	b.n	800ad46 <Client_Event_Handler+0x202>
                                {
                                    uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 800ac86:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800ac8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8c:	4413      	add	r3, r2
 800ac8e:	791b      	ldrb	r3, [r3, #4]
 800ac90:	b29a      	uxth	r2, r3
 800ac92:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800ac96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac98:	440b      	add	r3, r1
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	021b      	lsls	r3, r3, #8
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	4313      	orrs	r3, r2
 800aca8:	867b      	strh	r3, [r7, #50]	; 0x32
                                    if(uuid == P2P_SERVICE_UUID)
 800acaa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800acac:	f64f 6240 	movw	r2, #65088	; 0xfe40
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d13e      	bne.n	800ad32 <Client_Event_Handler+0x1ee>
                                    {
#if(CFG_DEBUG_APP_TRACE != 0)
                                        APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
#endif
                                        #if (UUID_128BIT_FORMAT==1)
                                        aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 800acb4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800acb8:	3b10      	subs	r3, #16
 800acba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acbc:	4413      	add	r3, r2
 800acbe:	791b      	ldrb	r3, [r3, #4]
 800acc0:	b299      	uxth	r1, r3
 800acc2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800acc6:	3b10      	subs	r3, #16
 800acc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acca:	4413      	add	r3, r2
 800accc:	3304      	adds	r3, #4
 800acce:	3301      	adds	r3, #1
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800acdc:	430a      	orrs	r2, r1
 800acde:	b291      	uxth	r1, r2
 800ace0:	4a67      	ldr	r2, [pc, #412]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	460a      	mov	r2, r1
 800acea:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 800acec:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800acf0:	3b0e      	subs	r3, #14
 800acf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acf4:	4413      	add	r3, r2
 800acf6:	791b      	ldrb	r3, [r3, #4]
 800acf8:	b299      	uxth	r1, r3
 800acfa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800acfe:	3b0e      	subs	r3, #14
 800ad00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad02:	4413      	add	r3, r2
 800ad04:	3304      	adds	r3, #4
 800ad06:	3301      	adds	r3, #1
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	021b      	lsls	r3, r3, #8
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ad14:	430a      	orrs	r2, r1
 800ad16:	b291      	uxth	r1, r2
 800ad18:	4a59      	ldr	r2, [pc, #356]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4413      	add	r3, r2
 800ad1e:	3306      	adds	r3, #6
 800ad20:	460a      	mov	r2, r1
 800ad22:	801a      	strh	r2, [r3, #0]
#else
                                        aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                                        aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                                        aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 800ad24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800ad28:	4a55      	ldr	r2, [pc, #340]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4413      	add	r3, r2
 800ad2e:	2207      	movs	r2, #7
 800ad30:	701a      	strb	r2, [r3, #0]
                                    }
                                    idx += 6;
 800ad32:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800ad36:	3306      	adds	r3, #6
 800ad38:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                                for (i=0; i<numServ; i++)
 800ad3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ad40:	3301      	adds	r3, #1
 800ad42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800ad46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ad4a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d399      	bcc.n	800ac86 <Client_Event_Handler+0x142>
                                }
                            }
                        }
                    }
                    break;
 800ad52:	e17b      	b.n	800b04c <Client_Event_Handler+0x508>
                case EVT_BLUE_ATT_READ_BY_TYPE_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_READ_BY_TYPE_RESP */

                    /* USER CODE END EVT_BLUE_ATT_READ_BY_TYPE_RESP */
                    aci_att_read_by_type_resp_event_rp0 *pr = (void*)blue_evt->data;
 800ad54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad56:	3302      	adds	r3, #2
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
                     * 2 or 16 bytes data
                     */

                    uint8_t index;

                    index = 0;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ad60:	e004      	b.n	800ad6c <Client_Event_Handler+0x228>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 800ad62:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ad66:	3301      	adds	r3, #1
 800ad68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ad6c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ad70:	2b05      	cmp	r3, #5
 800ad72:	d80b      	bhi.n	800ad8c <Client_Event_Handler+0x248>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ad74:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ad78:	4a41      	ldr	r2, [pc, #260]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3302      	adds	r3, #2
 800ad80:	881a      	ldrh	r2, [r3, #0]
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d1ea      	bne.n	800ad62 <Client_Event_Handler+0x21e>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800ad8c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ad90:	2b05      	cmp	r3, #5
 800ad92:	f200 815d 	bhi.w	800b050 <Client_Event_Handler+0x50c>
                    {

                        /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
                        idx = 17;
 800ad96:	2311      	movs	r3, #17
 800ad98:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                        if (pr->Handle_Value_Pair_Length == 21)
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	789b      	ldrb	r3, [r3, #2]
 800ada0:	2b15      	cmp	r3, #21
 800ada2:	f040 8155 	bne.w	800b050 <Client_Event_Handler+0x50c>
#else
                            idx = 5;
                        if (pr->Handle_Value_Pair_Length == 7)
#endif
                        {
                            pr->Data_Length -= 1;
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	78db      	ldrb	r3, [r3, #3]
 800adaa:	3b01      	subs	r3, #1
 800adac:	b2da      	uxtb	r2, r3
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	70da      	strb	r2, [r3, #3]
                            while(pr->Data_Length > 0)
 800adb2:	e059      	b.n	800ae68 <Client_Event_Handler+0x324>
                            {
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 800adb4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800adb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adba:	4413      	add	r3, r2
 800adbc:	791b      	ldrb	r3, [r3, #4]
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800adc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adc6:	440b      	add	r3, r1
 800adc8:	3304      	adds	r3, #4
 800adca:	3301      	adds	r3, #1
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	021b      	lsls	r3, r3, #8
 800add2:	b29b      	uxth	r3, r3
 800add4:	4313      	orrs	r3, r2
 800add6:	857b      	strh	r3, [r7, #42]	; 0x2a
                                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 800add8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800addc:	3b0e      	subs	r3, #14
 800adde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade0:	4413      	add	r3, r2
 800ade2:	791b      	ldrb	r3, [r3, #4]
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800adea:	3b0e      	subs	r3, #14
 800adec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800adee:	440b      	add	r3, r1
 800adf0:	3304      	adds	r3, #4
 800adf2:	3301      	adds	r3, #1
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	021b      	lsls	r3, r3, #8
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	4313      	orrs	r3, r2
 800adfe:	853b      	strh	r3, [r7, #40]	; 0x28
#else
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                                if(uuid == P2P_WRITE_CHAR_UUID)
 800ae00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae02:	f64f 6241 	movw	r2, #65089	; 0xfe41
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d10f      	bne.n	800ae2a <Client_Event_Handler+0x2e6>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : LED_CHAR_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_LED_CHAR_DESC;
 800ae0a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ae0e:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ae10:	011b      	lsls	r3, r3, #4
 800ae12:	4413      	add	r3, r2
 800ae14:	2208      	movs	r2, #8
 800ae16:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PLedCharHdle = handle;
 800ae18:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ae1c:	4a18      	ldr	r2, [pc, #96]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	4413      	add	r3, r2
 800ae22:	3308      	adds	r3, #8
 800ae24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	e013      	b.n	800ae52 <Client_Event_Handler+0x30e>
                                }

                                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800ae2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ae2c:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d10e      	bne.n	800ae52 <Client_Event_Handler+0x30e>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : BUTTON_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                                    aP2PClientContext[index].state = APP_BLE_DISCOVER_BUTTON_CHAR_DESC;
 800ae34:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ae38:	4a11      	ldr	r2, [pc, #68]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ae3a:	011b      	lsls	r3, r3, #4
 800ae3c:	4413      	add	r3, r2
 800ae3e:	2209      	movs	r2, #9
 800ae40:	701a      	strb	r2, [r3, #0]
                                    aP2PClientContext[index].P2PClientCharHdle = handle;
 800ae42:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ae46:	4a0e      	ldr	r2, [pc, #56]	; (800ae80 <Client_Event_Handler+0x33c>)
 800ae48:	011b      	lsls	r3, r3, #4
 800ae4a:	4413      	add	r3, r2
 800ae4c:	330c      	adds	r3, #12
 800ae4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ae50:	801a      	strh	r2, [r3, #0]
                                }
#if (UUID_128BIT_FORMAT==1)
                                pr->Data_Length -= 21;
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	78db      	ldrb	r3, [r3, #3]
 800ae56:	3b15      	subs	r3, #21
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	70da      	strb	r2, [r3, #3]
                                idx += 21;
 800ae5e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800ae62:	3315      	adds	r3, #21
 800ae64:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                            while(pr->Data_Length > 0)
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	78db      	ldrb	r3, [r3, #3]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d1a1      	bne.n	800adb4 <Client_Event_Handler+0x270>
#endif
                            }
                        }
                    }
                }
                break;
 800ae70:	e0ee      	b.n	800b050 <Client_Event_Handler+0x50c>
                case EVT_BLUE_ATT_FIND_INFORMATION_RESP:
                {
                    /* USER CODE BEGIN EVT_BLUE_ATT_FIND_INFORMATION_RESP */

                    /* USER CODE END EVT_BLUE_ATT_FIND_INFORMATION_RESP */
                    aci_att_find_info_resp_event_rp0 *pr = (void*)blue_evt->data;
 800ae72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae74:	3302      	adds	r3, #2
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
                     * 2 bytes UUID
                     */

                    uint8_t index;

                    index = 0;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ae7e:	e006      	b.n	800ae8e <Client_Event_Handler+0x34a>
 800ae80:	200001f4 	.word	0x200001f4
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))

                        index++;
 800ae84:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ae88:	3301      	adds	r3, #1
 800ae8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800ae8e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ae92:	2b05      	cmp	r3, #5
 800ae94:	d80b      	bhi.n	800aeae <Client_Event_Handler+0x36a>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800ae96:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ae9a:	4a75      	ldr	r2, [pc, #468]	; (800b070 <Client_Event_Handler+0x52c>)
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4413      	add	r3, r2
 800aea0:	3302      	adds	r3, #2
 800aea2:	881a      	ldrh	r2, [r3, #0]
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d1ea      	bne.n	800ae84 <Client_Event_Handler+0x340>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800aeae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800aeb2:	2b05      	cmp	r3, #5
 800aeb4:	f200 80ce 	bhi.w	800b054 <Client_Event_Handler+0x510>
                    {

                        numDesc = (pr->Event_Data_Length) / 4;
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeba:	78db      	ldrb	r3, [r3, #3]
 800aebc:	089b      	lsrs	r3, r3, #2
 800aebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                        /* we are interested only in 16 bit UUIDs */
                        idx = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                        if (pr->Format == UUID_TYPE_16)
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	789b      	ldrb	r3, [r3, #2]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	f040 80c1 	bne.w	800b054 <Client_Event_Handler+0x510>
                        {
                            for (i=0; i<numDesc; i++)
 800aed2:	2300      	movs	r3, #0
 800aed4:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800aed8:	e04b      	b.n	800af72 <Client_Event_Handler+0x42e>
                            {
                                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 800aeda:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800aede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee0:	4413      	add	r3, r2
 800aee2:	791b      	ldrb	r3, [r3, #4]
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800aeea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeec:	440b      	add	r3, r1
 800aeee:	3304      	adds	r3, #4
 800aef0:	3301      	adds	r3, #1
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	021b      	lsls	r3, r3, #8
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4313      	orrs	r3, r2
 800aefc:	843b      	strh	r3, [r7, #32]
                                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 800aefe:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800af02:	3302      	adds	r3, #2
 800af04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af06:	4413      	add	r3, r2
 800af08:	791b      	ldrb	r3, [r3, #4]
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800af10:	3302      	adds	r3, #2
 800af12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af14:	440b      	add	r3, r1
 800af16:	3304      	adds	r3, #4
 800af18:	3301      	adds	r3, #1
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	021b      	lsls	r3, r3, #8
 800af20:	b29b      	uxth	r3, r3
 800af22:	4313      	orrs	r3, r2
 800af24:	83fb      	strh	r3, [r7, #30]

                                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800af26:	8bfb      	ldrh	r3, [r7, #30]
 800af28:	f642 1202 	movw	r2, #10498	; 0x2902
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d116      	bne.n	800af5e <Client_Event_Handler+0x41a>
                                {
#if(CFG_DEBUG_APP_TRACE != 0)
                                    APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                                    if( aP2PClientContext[index].state == APP_BLE_DISCOVER_BUTTON_CHAR_DESC)
 800af30:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800af34:	4a4e      	ldr	r2, [pc, #312]	; (800b070 <Client_Event_Handler+0x52c>)
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	4413      	add	r3, r2
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b09      	cmp	r3, #9
 800af3e:	d10e      	bne.n	800af5e <Client_Event_Handler+0x41a>
                                    {

                                        aP2PClientContext[index].P2PClientDescHandle = handle;
 800af40:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800af44:	4a4a      	ldr	r2, [pc, #296]	; (800b070 <Client_Event_Handler+0x52c>)
 800af46:	011b      	lsls	r3, r3, #4
 800af48:	4413      	add	r3, r2
 800af4a:	330e      	adds	r3, #14
 800af4c:	8c3a      	ldrh	r2, [r7, #32]
 800af4e:	801a      	strh	r2, [r3, #0]
                                        aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_BUTTON_DESC;
 800af50:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800af54:	4a46      	ldr	r2, [pc, #280]	; (800b070 <Client_Event_Handler+0x52c>)
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	4413      	add	r3, r2
 800af5a:	220b      	movs	r2, #11
 800af5c:	701a      	strb	r2, [r3, #0]

                                    }
                                }
                                idx += 4;
 800af5e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800af62:	3304      	adds	r3, #4
 800af64:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                            for (i=0; i<numDesc; i++)
 800af68:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800af6c:	3301      	adds	r3, #1
 800af6e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800af72:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 800af76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3ad      	bcc.n	800aeda <Client_Event_Handler+0x396>
                            }
                        }
                    }
                }
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800af7e:	e069      	b.n	800b054 <Client_Event_Handler+0x510>
                case EVT_BLUE_GATT_NOTIFICATION:
                {
                    /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION */

                    /* USER CODE END EVT_BLUE_GATT_NOTIFICATION */
                    aci_gatt_notification_event_rp0 *pr = (void*)blue_evt->data;
 800af80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af82:	3302      	adds	r3, #2
 800af84:	63fb      	str	r3, [r7, #60]	; 0x3c
                    uint8_t index;

                    index = 0;
 800af86:	2300      	movs	r3, #0
 800af88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800af8c:	e004      	b.n	800af98 <Client_Event_Handler+0x454>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 800af8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af92:	3301      	adds	r3, #1
 800af94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800af98:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800af9c:	2b05      	cmp	r3, #5
 800af9e:	d80b      	bhi.n	800afb8 <Client_Event_Handler+0x474>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800afa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afa4:	4a32      	ldr	r2, [pc, #200]	; (800b070 <Client_Event_Handler+0x52c>)
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4413      	add	r3, r2
 800afaa:	3302      	adds	r3, #2
 800afac:	881a      	ldrh	r2, [r3, #0]
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d1ea      	bne.n	800af8e <Client_Event_Handler+0x44a>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800afb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afbc:	2b05      	cmp	r3, #5
 800afbe:	d84b      	bhi.n	800b058 <Client_Event_Handler+0x514>
                    {

                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 800afc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc2:	885b      	ldrh	r3, [r3, #2]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800afca:	4929      	ldr	r1, [pc, #164]	; (800b070 <Client_Event_Handler+0x52c>)
 800afcc:	011b      	lsls	r3, r3, #4
 800afce:	440b      	add	r3, r1
 800afd0:	330c      	adds	r3, #12
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d13f      	bne.n	800b058 <Client_Event_Handler+0x514>
                                (pr->Attribute_Value_Length == (2)) )
 800afd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afda:	791b      	ldrb	r3, [r3, #4]
                        if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PClientCharHdle) &&
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d13b      	bne.n	800b058 <Client_Event_Handler+0x514>
                        {
#if(CFG_DEBUG_APP_TRACE != 0)
                            APP_DBG_MSG("-- GATT : BUTTON CHARACTERISTICS RECEIVED_EVT - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                            Notification.P2P_Client_Evt_Opcode = P2P_BUTTON_INFO_RECEIVED_EVT;
 800afe0:	2302      	movs	r3, #2
 800afe2:	733b      	strb	r3, [r7, #12]
                            Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800afe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe6:	791b      	ldrb	r3, [r3, #4]
 800afe8:	753b      	strb	r3, [r7, #20]
                            Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 800afea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afec:	3305      	adds	r3, #5
 800afee:	613b      	str	r3, [r7, #16]

                            P2P_Client_App_Notification(&Notification);
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7ff fc6f 	bl	800a8d8 <P2P_Client_App_Notification>
                            /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

                        }
                    }
                }
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800affa:	e02d      	b.n	800b058 <Client_Event_Handler+0x514>
                case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
                {
                    /* USER CODE BEGIN EVT_BLUE_GATT_PROCEDURE_COMPLETE */

                    /* USER CODE END EVT_BLUE_GATT_PROCEDURE_COMPLETE */
                    aci_gatt_proc_complete_event_rp0 *pr = (void*)blue_evt->data;
 800affc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800affe:	3302      	adds	r3, #2
 800b000:	643b      	str	r3, [r7, #64]	; 0x40
#if(CFG_DEBUG_APP_TRACE != 0)
                    APP_DBG_MSG("-- GATT : EVT_BLUE_GATT_PROCEDURE_COMPLETE \n");
                    APP_DBG_MSG("\n");
#endif
                    uint8_t index;
                    index = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b008:	e004      	b.n	800b014 <Client_Event_Handler+0x4d0>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
                        index++;
 800b00a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b00e:	3301      	adds	r3, #1
 800b010:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b014:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b018:	2b05      	cmp	r3, #5
 800b01a:	d80b      	bhi.n	800b034 <Client_Event_Handler+0x4f0>
                            (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 800b01c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b020:	4a13      	ldr	r2, [pc, #76]	; (800b070 <Client_Event_Handler+0x52c>)
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	4413      	add	r3, r2
 800b026:	3302      	adds	r3, #2
 800b028:	881a      	ldrh	r2, [r3, #0]
 800b02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b02c:	881b      	ldrh	r3, [r3, #0]
 800b02e:	b29b      	uxth	r3, r3
                    while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800b030:	429a      	cmp	r2, r3
 800b032:	d1ea      	bne.n	800b00a <Client_Event_Handler+0x4c6>

                    if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800b034:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800b038:	2b05      	cmp	r3, #5
 800b03a:	d80f      	bhi.n	800b05c <Client_Event_Handler+0x518>
                    {
                        UTIL_SEQ_SetTask(  1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0 );
 800b03c:	2100      	movs	r1, #0
 800b03e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b042:	f000 fbf3 	bl	800b82c <UTIL_SEQ_SetTask>
                    }
                }
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800b046:	e009      	b.n	800b05c <Client_Event_Handler+0x518>
                default:
                    /* USER CODE BEGIN ecode_default */

                    /* USER CODE END ecode_default */
                    break;
 800b048:	bf00      	nop
 800b04a:	e00a      	b.n	800b062 <Client_Event_Handler+0x51e>
                    break;
 800b04c:	bf00      	nop
 800b04e:	e008      	b.n	800b062 <Client_Event_Handler+0x51e>
                break;
 800b050:	bf00      	nop
 800b052:	e006      	b.n	800b062 <Client_Event_Handler+0x51e>
                break; /*EVT_BLUE_ATT_FIND_INFORMATION_RESP*/
 800b054:	bf00      	nop
 800b056:	e004      	b.n	800b062 <Client_Event_Handler+0x51e>
                break;/* end EVT_BLUE_GATT_NOTIFICATION */
 800b058:	bf00      	nop
 800b05a:	e002      	b.n	800b062 <Client_Event_Handler+0x51e>
                break; /*EVT_BLUE_GATT_PROCEDURE_COMPLETE*/
 800b05c:	bf00      	nop
                }
            }

            break; /* HCI_EVT_VENDOR_SPECIFIC */
 800b05e:	e000      	b.n	800b062 <Client_Event_Handler+0x51e>

        default:
            /* USER CODE BEGIN evt_default */

            /* USER CODE END evt_default */
            break;
 800b060:	bf00      	nop
        }
/* USER CODE BEGIN Client_Event_Handler_2 */

/* USER CODE END Client_Event_Handler_2 */
        return(return_value);
 800b062:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
    }/* end BLE_CTRL_Event_Acknowledged_Status_t */
 800b066:	4618      	mov	r0, r3
 800b068:	3758      	adds	r7, #88	; 0x58
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	200001f4 	.word	0x200001f4

0800b074 <LL_PWR_EnableBootC2>:
{
 800b074:	b480      	push	{r7}
 800b076:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b078:	4b05      	ldr	r3, [pc, #20]	; (800b090 <LL_PWR_EnableBootC2+0x1c>)
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	4a04      	ldr	r2, [pc, #16]	; (800b090 <LL_PWR_EnableBootC2+0x1c>)
 800b07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b082:	60d3      	str	r3, [r2, #12]
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	58000400 	.word	0x58000400

0800b094 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b09e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b0a2:	4905      	ldr	r1, [pc, #20]	; (800b0b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	58000800 	.word	0x58000800

0800b0bc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	4904      	ldr	r1, [pc, #16]	; (800b0dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	620b      	str	r3, [r1, #32]
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	58000800 	.word	0x58000800

0800b0e0 <LL_AHB3_GRP1_EnableClock>:
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b0e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b0f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4013      	ands	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b104:	68fb      	ldr	r3, [r7, #12]
}
 800b106:	bf00      	nop
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b112:	b480      	push	{r7}
 800b114:	b085      	sub	sp, #20
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b11a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b11e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4313      	orrs	r3, r2
 800b12a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b12e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b132:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4013      	ands	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b13c:	68fb      	ldr	r3, [r7, #12]
}
 800b13e:	bf00      	nop
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <LL_C1_IPCC_EnableIT_TXF>:
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
}
 800b15e:	bf00      	nop
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <LL_C1_IPCC_EnableIT_RXO>:
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f043 0201 	orr.w	r2, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	041b      	lsls	r3, r3, #16
 800b19c:	43db      	mvns	r3, r3
 800b19e:	401a      	ands	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	605a      	str	r2, [r3, #4]
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	041b      	lsls	r3, r3, #16
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	605a      	str	r2, [r3, #4]
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	43db      	mvns	r3, r3
 800b1e6:	401a      	ands	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	605a      	str	r2, [r3, #4]
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	609a      	str	r2, [r3, #8]
}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <LL_C1_IPCC_SetFlag_CHx>:
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	041a      	lsls	r2, r3, #16
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	609a      	str	r2, [r3, #8]
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68da      	ldr	r2, [r3, #12]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	4013      	ands	r3, r2
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d101      	bne.n	800b24e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b24a:	2301      	movs	r3, #1
 800b24c:	e000      	b.n	800b250 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	69da      	ldr	r2, [r3, #28]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	4013      	ands	r3, r2
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d101      	bne.n	800b278 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
	...

0800b288 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b28c:	2102      	movs	r1, #2
 800b28e:	4819      	ldr	r0, [pc, #100]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b290:	f7ff ffe4 	bl	800b25c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d009      	beq.n	800b2ae <HW_IPCC_Rx_Handler+0x26>
 800b29a:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	43db      	mvns	r3, r3
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b2a8:	f000 f8ea 	bl	800b480 <HW_IPCC_SYS_EvtHandler>
 800b2ac:	e01f      	b.n	800b2ee <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	4810      	ldr	r0, [pc, #64]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b2b2:	f7ff ffd3 	bl	800b25c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d008      	beq.n	800b2ce <HW_IPCC_Rx_Handler+0x46>
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b2c8:	f000 f89e 	bl	800b408 <HW_IPCC_BLE_EvtHandler>
 800b2cc:	e00f      	b.n	800b2ee <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b2ce:	2108      	movs	r1, #8
 800b2d0:	4808      	ldr	r0, [pc, #32]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b2d2:	f7ff ffc3 	bl	800b25c <LL_C2_IPCC_IsActiveFlag_CHx>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d009      	beq.n	800b2f0 <HW_IPCC_Rx_Handler+0x68>
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <HW_IPCC_Rx_Handler+0x6c>)
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	43db      	mvns	r3, r3
 800b2e2:	f003 0308 	and.w	r3, r3, #8
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b2ea:	f000 f915 	bl	800b518 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
}
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	58000c00 	.word	0x58000c00

0800b2f8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b2fc:	2102      	movs	r1, #2
 800b2fe:	4822      	ldr	r0, [pc, #136]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b300:	f7ff ff97 	bl	800b232 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <HW_IPCC_Tx_Handler+0x26>
 800b30a:	4b1f      	ldr	r3, [pc, #124]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	43db      	mvns	r3, r3
 800b310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b318:	f000 f8a6 	bl	800b468 <HW_IPCC_SYS_CmdEvtHandler>
 800b31c:	e031      	b.n	800b382 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b31e:	2102      	movs	r1, #2
 800b320:	4819      	ldr	r0, [pc, #100]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b322:	f7ff ff86 	bl	800b232 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b326:	4603      	mov	r3, r0
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <HW_IPCC_Tx_Handler+0x48>
 800b32c:	4b16      	ldr	r3, [pc, #88]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	43db      	mvns	r3, r3
 800b332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b33a:	f000 f895 	bl	800b468 <HW_IPCC_SYS_CmdEvtHandler>
 800b33e:	e020      	b.n	800b382 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b340:	2108      	movs	r1, #8
 800b342:	4811      	ldr	r0, [pc, #68]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b344:	f7ff ff75 	bl	800b232 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d109      	bne.n	800b362 <HW_IPCC_Tx_Handler+0x6a>
 800b34e:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	43db      	mvns	r3, r3
 800b354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800b35c:	f000 f8be 	bl	800b4dc <HW_IPCC_MM_FreeBufHandler>
 800b360:	e00f      	b.n	800b382 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800b362:	2120      	movs	r1, #32
 800b364:	4808      	ldr	r0, [pc, #32]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b366:	f7ff ff64 	bl	800b232 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d109      	bne.n	800b384 <HW_IPCC_Tx_Handler+0x8c>
 800b370:	4b05      	ldr	r3, [pc, #20]	; (800b388 <HW_IPCC_Tx_Handler+0x90>)
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	43db      	mvns	r3, r3
 800b376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800b37e:	f000 f84f 	bl	800b420 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800b382:	bf00      	nop
 800b384:	bf00      	nop
}
 800b386:	bd80      	pop	{r7, pc}
 800b388:	58000c00 	.word	0x58000c00

0800b38c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800b390:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b394:	f7ff febd 	bl	800b112 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800b398:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b39c:	f7ff fe7a 	bl	800b094 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800b3a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b3a4:	f7ff fe8a 	bl	800b0bc <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800b3a8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800b3aa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800b3ac:	f7ff fe62 	bl	800b074 <LL_PWR_EnableBootC2>

  return;
 800b3b0:	bf00      	nop
}
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800b3b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b3bc:	f7ff fe90 	bl	800b0e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800b3c0:	4806      	ldr	r0, [pc, #24]	; (800b3dc <HW_IPCC_Init+0x28>)
 800b3c2:	f7ff fed2 	bl	800b16a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800b3c6:	4805      	ldr	r0, [pc, #20]	; (800b3dc <HW_IPCC_Init+0x28>)
 800b3c8:	f7ff febf 	bl	800b14a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800b3cc:	202c      	movs	r0, #44	; 0x2c
 800b3ce:	f7f8 f954 	bl	800367a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800b3d2:	202d      	movs	r0, #45	; 0x2d
 800b3d4:	f7f8 f951 	bl	800367a <HAL_NVIC_EnableIRQ>

  return;
 800b3d8:	bf00      	nop
}
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	58000c00 	.word	0x58000c00

0800b3e0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	4802      	ldr	r0, [pc, #8]	; (800b3f0 <HW_IPCC_BLE_Init+0x10>)
 800b3e8:	f7ff fef4 	bl	800b1d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b3ec:	bf00      	nop
}
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	58000c00 	.word	0x58000c00

0800b3f4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4802      	ldr	r0, [pc, #8]	; (800b404 <HW_IPCC_BLE_SendCmd+0x10>)
 800b3fc:	f7ff ff0a 	bl	800b214 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b400:	bf00      	nop
}
 800b402:	bd80      	pop	{r7, pc}
 800b404:	58000c00 	.word	0x58000c00

0800b408 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800b40c:	f7fd fc5e 	bl	8008ccc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800b410:	2101      	movs	r1, #1
 800b412:	4802      	ldr	r0, [pc, #8]	; (800b41c <HW_IPCC_BLE_EvtHandler+0x14>)
 800b414:	f7ff fef0 	bl	800b1f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b418:	bf00      	nop
}
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	58000c00 	.word	0x58000c00

0800b420 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800b424:	2120      	movs	r1, #32
 800b426:	4803      	ldr	r0, [pc, #12]	; (800b434 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800b428:	f7ff fec2 	bl	800b1b0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800b42c:	f7fd fc7e 	bl	8008d2c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800b430:	bf00      	nop
}
 800b432:	bd80      	pop	{r7, pc}
 800b434:	58000c00 	.word	0x58000c00

0800b438 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b43c:	2102      	movs	r1, #2
 800b43e:	4802      	ldr	r0, [pc, #8]	; (800b448 <HW_IPCC_SYS_Init+0x10>)
 800b440:	f7ff fec8 	bl	800b1d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b444:	bf00      	nop
}
 800b446:	bd80      	pop	{r7, pc}
 800b448:	58000c00 	.word	0x58000c00

0800b44c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b450:	2102      	movs	r1, #2
 800b452:	4804      	ldr	r0, [pc, #16]	; (800b464 <HW_IPCC_SYS_SendCmd+0x18>)
 800b454:	f7ff fede 	bl	800b214 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b458:	2102      	movs	r1, #2
 800b45a:	4802      	ldr	r0, [pc, #8]	; (800b464 <HW_IPCC_SYS_SendCmd+0x18>)
 800b45c:	f7ff fe95 	bl	800b18a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800b460:	bf00      	nop
}
 800b462:	bd80      	pop	{r7, pc}
 800b464:	58000c00 	.word	0x58000c00

0800b468 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800b46c:	2102      	movs	r1, #2
 800b46e:	4803      	ldr	r0, [pc, #12]	; (800b47c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800b470:	f7ff fe9e 	bl	800b1b0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800b474:	f7fd fcaa 	bl	8008dcc <HW_IPCC_SYS_CmdEvtNot>

  return;
 800b478:	bf00      	nop
}
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	58000c00 	.word	0x58000c00

0800b480 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800b484:	f7fd fcb8 	bl	8008df8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800b488:	2102      	movs	r1, #2
 800b48a:	4802      	ldr	r0, [pc, #8]	; (800b494 <HW_IPCC_SYS_EvtHandler+0x14>)
 800b48c:	f7ff feb4 	bl	800b1f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b490:	bf00      	nop
}
 800b492:	bd80      	pop	{r7, pc}
 800b494:	58000c00 	.word	0x58000c00

0800b498 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800b4a0:	2108      	movs	r1, #8
 800b4a2:	480c      	ldr	r0, [pc, #48]	; (800b4d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4a4:	f7ff fec5 	bl	800b232 <LL_C1_IPCC_IsActiveFlag_CHx>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d007      	beq.n	800b4be <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800b4ae:	4a0a      	ldr	r2, [pc, #40]	; (800b4d8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4b4:	2108      	movs	r1, #8
 800b4b6:	4807      	ldr	r0, [pc, #28]	; (800b4d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4b8:	f7ff fe67 	bl	800b18a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800b4bc:	e006      	b.n	800b4cc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4c2:	2108      	movs	r1, #8
 800b4c4:	4803      	ldr	r0, [pc, #12]	; (800b4d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800b4c6:	f7ff fea5 	bl	800b214 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800b4ca:	bf00      	nop
}
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	58000c00 	.word	0x58000c00
 800b4d8:	200002fc 	.word	0x200002fc

0800b4dc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4e0:	2108      	movs	r1, #8
 800b4e2:	4806      	ldr	r0, [pc, #24]	; (800b4fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b4e4:	f7ff fe64 	bl	800b1b0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800b4e8:	4b05      	ldr	r3, [pc, #20]	; (800b500 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800b4ee:	2108      	movs	r1, #8
 800b4f0:	4802      	ldr	r0, [pc, #8]	; (800b4fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 800b4f2:	f7ff fe8f 	bl	800b214 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800b4f6:	bf00      	nop
}
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	58000c00 	.word	0x58000c00
 800b500:	200002fc 	.word	0x200002fc

0800b504 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b508:	2108      	movs	r1, #8
 800b50a:	4802      	ldr	r0, [pc, #8]	; (800b514 <HW_IPCC_TRACES_Init+0x10>)
 800b50c:	f7ff fe62 	bl	800b1d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800b510:	bf00      	nop
}
 800b512:	bd80      	pop	{r7, pc}
 800b514:	58000c00 	.word	0x58000c00

0800b518 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800b51c:	f7fd fd14 	bl	8008f48 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800b520:	2108      	movs	r1, #8
 800b522:	4802      	ldr	r0, [pc, #8]	; (800b52c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800b524:	f7ff fe68 	bl	800b1f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800b528:	bf00      	nop
}
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	58000c00 	.word	0x58000c00

0800b530 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <UTIL_LPM_Init+0x1c>)
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b53a:	4b05      	ldr	r3, [pc, #20]	; (800b550 <UTIL_LPM_Init+0x20>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b540:	bf00      	nop
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	20000300 	.word	0x20000300
 800b550:	20000304 	.word	0x20000304

0800b554 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b560:	f3ef 8310 	mrs	r3, PRIMASK
 800b564:	613b      	str	r3, [r7, #16]
  return(result);
 800b566:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b56a:	b672      	cpsid	i
}
 800b56c:	bf00      	nop
  
  switch(state)
 800b56e:	78fb      	ldrb	r3, [r7, #3]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d008      	beq.n	800b586 <UTIL_LPM_SetOffMode+0x32>
 800b574:	2b01      	cmp	r3, #1
 800b576:	d10e      	bne.n	800b596 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b578:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4313      	orrs	r3, r2
 800b580:	4a0b      	ldr	r2, [pc, #44]	; (800b5b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b582:	6013      	str	r3, [r2, #0]
      break;
 800b584:	e008      	b.n	800b598 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	43da      	mvns	r2, r3
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4013      	ands	r3, r2
 800b590:	4a07      	ldr	r2, [pc, #28]	; (800b5b0 <UTIL_LPM_SetOffMode+0x5c>)
 800b592:	6013      	str	r3, [r2, #0]
      break;
 800b594:	e000      	b.n	800b598 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b596:	bf00      	nop
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f383 8810 	msr	PRIMASK, r3
}
 800b5a2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b5a4:	bf00      	nop
 800b5a6:	371c      	adds	r7, #28
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	20000304 	.word	0x20000304

0800b5b4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b5be:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800b5c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5c4:	b672      	cpsid	i
}
 800b5c6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800b5c8:	4b12      	ldr	r3, [pc, #72]	; (800b614 <UTIL_LPM_EnterLowPower+0x60>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d006      	beq.n	800b5de <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	4798      	blx	r3
 800b5dc:	e010      	b.n	800b600 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800b5de:	4b0f      	ldr	r3, [pc, #60]	; (800b61c <UTIL_LPM_EnterLowPower+0x68>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d006      	beq.n	800b5f4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800b5e6:	4b0c      	ldr	r3, [pc, #48]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	4798      	blx	r3
 800b5f2:	e005      	b.n	800b600 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800b5f4:	4b08      	ldr	r3, [pc, #32]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800b5fa:	4b07      	ldr	r3, [pc, #28]	; (800b618 <UTIL_LPM_EnterLowPower+0x64>)
 800b5fc:	695b      	ldr	r3, [r3, #20]
 800b5fe:	4798      	blx	r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f383 8810 	msr	PRIMASK, r3
}
 800b60a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	20000300 	.word	0x20000300
 800b618:	0800bc84 	.word	0x0800bc84
 800b61c:	20000304 	.word	0x20000304

0800b620 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b628:	4b67      	ldr	r3, [pc, #412]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b62e:	4b66      	ldr	r3, [pc, #408]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4013      	ands	r3, r2
 800b636:	4a64      	ldr	r2, [pc, #400]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b638:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b63a:	e083      	b.n	800b744 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b640:	e002      	b.n	800b648 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	3301      	adds	r3, #1
 800b646:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b648:	4a60      	ldr	r2, [pc, #384]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b650:	4b5f      	ldr	r3, [pc, #380]	; (800b7d0 <UTIL_SEQ_Run+0x1b0>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	401a      	ands	r2, r3
 800b656:	4b5c      	ldr	r3, [pc, #368]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4013      	ands	r3, r2
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0f0      	beq.n	800b642 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b660:	4a5a      	ldr	r2, [pc, #360]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b664:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b668:	4b59      	ldr	r3, [pc, #356]	; (800b7d0 <UTIL_SEQ_Run+0x1b0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	401a      	ands	r2, r3
 800b66e:	4b56      	ldr	r3, [pc, #344]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4013      	ands	r3, r2
 800b674:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b676:	4a55      	ldr	r2, [pc, #340]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	4413      	add	r3, r2
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	4013      	ands	r3, r2
 800b684:	2b00      	cmp	r3, #0
 800b686:	d106      	bne.n	800b696 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b688:	4a50      	ldr	r2, [pc, #320]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	4413      	add	r3, r2
 800b690:	f04f 32ff 	mov.w	r2, #4294967295
 800b694:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b696:	4a4d      	ldr	r2, [pc, #308]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	4413      	add	r3, r2
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f99d 	bl	800b9e4 <SEQ_BitPosition>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	4b49      	ldr	r3, [pc, #292]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b6b0:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b6b2:	4a46      	ldr	r2, [pc, #280]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	4413      	add	r3, r2
 800b6ba:	685a      	ldr	r2, [r3, #4]
 800b6bc:	4b45      	ldr	r3, [pc, #276]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2101      	movs	r1, #1
 800b6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6c6:	43db      	mvns	r3, r3
 800b6c8:	401a      	ands	r2, r3
 800b6ca:	4940      	ldr	r1, [pc, #256]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	440b      	add	r3, r1
 800b6d2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b6d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b6da:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b6dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6de:	b672      	cpsid	i
}
 800b6e0:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b6e2:	4b3c      	ldr	r3, [pc, #240]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ec:	43da      	mvns	r2, r3
 800b6ee:	4b3a      	ldr	r3, [pc, #232]	; (800b7d8 <UTIL_SEQ_Run+0x1b8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	4a38      	ldr	r2, [pc, #224]	; (800b7d8 <UTIL_SEQ_Run+0x1b8>)
 800b6f6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6fc:	e013      	b.n	800b726 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	3b01      	subs	r3, #1
 800b702:	4a32      	ldr	r2, [pc, #200]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b704:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b708:	4b32      	ldr	r3, [pc, #200]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2201      	movs	r2, #1
 800b70e:	fa02 f303 	lsl.w	r3, r2, r3
 800b712:	43da      	mvns	r2, r3
 800b714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b716:	3b01      	subs	r3, #1
 800b718:	400a      	ands	r2, r1
 800b71a:	492c      	ldr	r1, [pc, #176]	; (800b7cc <UTIL_SEQ_Run+0x1ac>)
 800b71c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	3b01      	subs	r3, #1
 800b724:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d1e8      	bne.n	800b6fe <UTIL_SEQ_Run+0xde>
 800b72c:	6a3b      	ldr	r3, [r7, #32]
 800b72e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f383 8810 	msr	PRIMASK, r3
}
 800b736:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b738:	4b26      	ldr	r3, [pc, #152]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a27      	ldr	r2, [pc, #156]	; (800b7dc <UTIL_SEQ_Run+0x1bc>)
 800b73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b742:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b744:	4b24      	ldr	r3, [pc, #144]	; (800b7d8 <UTIL_SEQ_Run+0x1b8>)
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	4b21      	ldr	r3, [pc, #132]	; (800b7d0 <UTIL_SEQ_Run+0x1b0>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	401a      	ands	r2, r3
 800b74e:	4b1e      	ldr	r3, [pc, #120]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4013      	ands	r3, r2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d007      	beq.n	800b768 <UTIL_SEQ_Run+0x148>
 800b758:	4b21      	ldr	r3, [pc, #132]	; (800b7e0 <UTIL_SEQ_Run+0x1c0>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	4b21      	ldr	r3, [pc, #132]	; (800b7e4 <UTIL_SEQ_Run+0x1c4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4013      	ands	r3, r2
 800b762:	2b00      	cmp	r3, #0
 800b764:	f43f af6a 	beq.w	800b63c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b768:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <UTIL_SEQ_Run+0x1b4>)
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295
 800b76e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b770:	f000 f92a 	bl	800b9c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b774:	f3ef 8310 	mrs	r3, PRIMASK
 800b778:	613b      	str	r3, [r7, #16]
  return(result);
 800b77a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b77c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b77e:	b672      	cpsid	i
}
 800b780:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b782:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <UTIL_SEQ_Run+0x1b8>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b12      	ldr	r3, [pc, #72]	; (800b7d0 <UTIL_SEQ_Run+0x1b0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	401a      	ands	r2, r3
 800b78c:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4013      	ands	r3, r2
 800b792:	2b00      	cmp	r3, #0
 800b794:	d108      	bne.n	800b7a8 <UTIL_SEQ_Run+0x188>
 800b796:	4b12      	ldr	r3, [pc, #72]	; (800b7e0 <UTIL_SEQ_Run+0x1c0>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	4b12      	ldr	r3, [pc, #72]	; (800b7e4 <UTIL_SEQ_Run+0x1c4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4013      	ands	r3, r2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800b7a4:	f7f5 f835 	bl	8000812 <UTIL_SEQ_Idle>
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f383 8810 	msr	PRIMASK, r3
}
 800b7b2:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b7b4:	f000 f90f 	bl	800b9d6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b7b8:	4a03      	ldr	r2, [pc, #12]	; (800b7c8 <UTIL_SEQ_Run+0x1a8>)
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	6013      	str	r3, [r2, #0]

  return;
 800b7be:	bf00      	nop
}
 800b7c0:	3730      	adds	r7, #48	; 0x30
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	2000002c 	.word	0x2000002c
 800b7cc:	20000398 	.word	0x20000398
 800b7d0:	20000028 	.word	0x20000028
 800b7d4:	20000314 	.word	0x20000314
 800b7d8:	20000308 	.word	0x20000308
 800b7dc:	20000318 	.word	0x20000318
 800b7e0:	2000030c 	.word	0x2000030c
 800b7e4:	20000310 	.word	0x20000310

0800b7e8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b7fa:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b7fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7fe:	b672      	cpsid	i
}
 800b800:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 f8ee 	bl	800b9e4 <SEQ_BitPosition>
 800b808:	4603      	mov	r3, r0
 800b80a:	4619      	mov	r1, r3
 800b80c:	4a06      	ldr	r2, [pc, #24]	; (800b828 <UTIL_SEQ_RegTask+0x40>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	f383 8810 	msr	PRIMASK, r3
}
 800b81e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b820:	bf00      	nop
}
 800b822:	3720      	adds	r7, #32
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	20000318 	.word	0x20000318

0800b82c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b836:	f3ef 8310 	mrs	r3, PRIMASK
 800b83a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b83c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b83e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b840:	b672      	cpsid	i
}
 800b842:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b844:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <UTIL_SEQ_SetTask+0x50>)
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	4a0b      	ldr	r2, [pc, #44]	; (800b87c <UTIL_SEQ_SetTask+0x50>)
 800b84e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b850:	4a0b      	ldr	r2, [pc, #44]	; (800b880 <UTIL_SEQ_SetTask+0x54>)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	431a      	orrs	r2, r3
 800b85c:	4908      	ldr	r1, [pc, #32]	; (800b880 <UTIL_SEQ_SetTask+0x54>)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	f383 8810 	msr	PRIMASK, r3
}
 800b86e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b870:	bf00      	nop
}
 800b872:	371c      	adds	r7, #28
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000308 	.word	0x20000308
 800b880:	20000398 	.word	0x20000398

0800b884 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b88c:	f3ef 8310 	mrs	r3, PRIMASK
 800b890:	60fb      	str	r3, [r7, #12]
  return(result);
 800b892:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b896:	b672      	cpsid	i
}
 800b898:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	43da      	mvns	r2, r3
 800b89e:	4b08      	ldr	r3, [pc, #32]	; (800b8c0 <UTIL_SEQ_PauseTask+0x3c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	4a06      	ldr	r2, [pc, #24]	; (800b8c0 <UTIL_SEQ_PauseTask+0x3c>)
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	f383 8810 	msr	PRIMASK, r3
}
 800b8b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b8b4:	bf00      	nop
}
 800b8b6:	371c      	adds	r7, #28
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr
 800b8c0:	20000028 	.word	0x20000028

0800b8c4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b8d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d6:	b672      	cpsid	i
}
 800b8d8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b8da:	4b09      	ldr	r3, [pc, #36]	; (800b900 <UTIL_SEQ_ResumeTask+0x3c>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	4a07      	ldr	r2, [pc, #28]	; (800b900 <UTIL_SEQ_ResumeTask+0x3c>)
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f383 8810 	msr	PRIMASK, r3
}
 800b8f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b8f2:	bf00      	nop
}
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20000028 	.word	0x20000028

0800b904 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b904:	b480      	push	{r7}
 800b906:	b087      	sub	sp, #28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b90c:	f3ef 8310 	mrs	r3, PRIMASK
 800b910:	60fb      	str	r3, [r7, #12]
  return(result);
 800b912:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b916:	b672      	cpsid	i
}
 800b918:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <UTIL_SEQ_SetEvt+0x3c>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4313      	orrs	r3, r2
 800b922:	4a07      	ldr	r2, [pc, #28]	; (800b940 <UTIL_SEQ_SetEvt+0x3c>)
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	f383 8810 	msr	PRIMASK, r3
}
 800b930:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b932:	bf00      	nop
}
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	2000030c 	.word	0x2000030c

0800b944 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b94c:	4b1b      	ldr	r3, [pc, #108]	; (800b9bc <UTIL_SEQ_WaitEvt+0x78>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b952:	4b1a      	ldr	r3, [pc, #104]	; (800b9bc <UTIL_SEQ_WaitEvt+0x78>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b95a:	d102      	bne.n	800b962 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]
 800b960:	e005      	b.n	800b96e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800b962:	4b16      	ldr	r3, [pc, #88]	; (800b9bc <UTIL_SEQ_WaitEvt+0x78>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	2201      	movs	r2, #1
 800b968:	fa02 f303 	lsl.w	r3, r2, r3
 800b96c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800b974:	4a12      	ldr	r2, [pc, #72]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800b97a:	e005      	b.n	800b988 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800b97c:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4619      	mov	r1, r3
 800b982:	6978      	ldr	r0, [r7, #20]
 800b984:	f7f4 ff4b 	bl	800081e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800b988:	4b0e      	ldr	r3, [pc, #56]	; (800b9c4 <UTIL_SEQ_WaitEvt+0x80>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4013      	ands	r3, r2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d0f2      	beq.n	800b97c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b996:	4a09      	ldr	r2, [pc, #36]	; (800b9bc <UTIL_SEQ_WaitEvt+0x78>)
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800b99c:	4b08      	ldr	r3, [pc, #32]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	43da      	mvns	r2, r3
 800b9a2:	4b08      	ldr	r3, [pc, #32]	; (800b9c4 <UTIL_SEQ_WaitEvt+0x80>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	4a06      	ldr	r2, [pc, #24]	; (800b9c4 <UTIL_SEQ_WaitEvt+0x80>)
 800b9aa:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800b9ac:	4a04      	ldr	r2, [pc, #16]	; (800b9c0 <UTIL_SEQ_WaitEvt+0x7c>)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6013      	str	r3, [r2, #0]

  return;
 800b9b2:	bf00      	nop
}
 800b9b4:	3718      	adds	r7, #24
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20000314 	.word	0x20000314
 800b9c0:	20000310 	.word	0x20000310
 800b9c4:	2000030c 	.word	0x2000030c

0800b9c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b9cc:	bf00      	nop
}
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b9da:	bf00      	nop
}
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	0c1b      	lsrs	r3, r3, #16
 800b9f4:	041b      	lsls	r3, r3, #16
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d104      	bne.n	800ba04 <SEQ_BitPosition+0x20>
 800b9fa:	2310      	movs	r3, #16
 800b9fc:	73fb      	strb	r3, [r7, #15]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	041b      	lsls	r3, r3, #16
 800ba02:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d105      	bne.n	800ba1a <SEQ_BitPosition+0x36>
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	3308      	adds	r3, #8
 800ba12:	73fb      	strb	r3, [r7, #15]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d105      	bne.n	800ba30 <SEQ_BitPosition+0x4c>
 800ba24:	7bfb      	ldrb	r3, [r7, #15]
 800ba26:	3304      	adds	r3, #4
 800ba28:	73fb      	strb	r3, [r7, #15]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	011b      	lsls	r3, r3, #4
 800ba2e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	0f1b      	lsrs	r3, r3, #28
 800ba34:	4a07      	ldr	r2, [pc, #28]	; (800ba54 <SEQ_BitPosition+0x70>)
 800ba36:	5cd2      	ldrb	r2, [r2, r3]
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ba3e:	7bfb      	ldrb	r3, [r7, #15]
 800ba40:	f1c3 031f 	rsb	r3, r3, #31
 800ba44:	b2db      	uxtb	r3, r3
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	0800bd7c 	.word	0x0800bd7c

0800ba58 <__libc_init_array>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	4d0d      	ldr	r5, [pc, #52]	; (800ba90 <__libc_init_array+0x38>)
 800ba5c:	4c0d      	ldr	r4, [pc, #52]	; (800ba94 <__libc_init_array+0x3c>)
 800ba5e:	1b64      	subs	r4, r4, r5
 800ba60:	10a4      	asrs	r4, r4, #2
 800ba62:	2600      	movs	r6, #0
 800ba64:	42a6      	cmp	r6, r4
 800ba66:	d109      	bne.n	800ba7c <__libc_init_array+0x24>
 800ba68:	4d0b      	ldr	r5, [pc, #44]	; (800ba98 <__libc_init_array+0x40>)
 800ba6a:	4c0c      	ldr	r4, [pc, #48]	; (800ba9c <__libc_init_array+0x44>)
 800ba6c:	f000 f82e 	bl	800bacc <_init>
 800ba70:	1b64      	subs	r4, r4, r5
 800ba72:	10a4      	asrs	r4, r4, #2
 800ba74:	2600      	movs	r6, #0
 800ba76:	42a6      	cmp	r6, r4
 800ba78:	d105      	bne.n	800ba86 <__libc_init_array+0x2e>
 800ba7a:	bd70      	pop	{r4, r5, r6, pc}
 800ba7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba80:	4798      	blx	r3
 800ba82:	3601      	adds	r6, #1
 800ba84:	e7ee      	b.n	800ba64 <__libc_init_array+0xc>
 800ba86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba8a:	4798      	blx	r3
 800ba8c:	3601      	adds	r6, #1
 800ba8e:	e7f2      	b.n	800ba76 <__libc_init_array+0x1e>
 800ba90:	0800bd94 	.word	0x0800bd94
 800ba94:	0800bd94 	.word	0x0800bd94
 800ba98:	0800bd94 	.word	0x0800bd94
 800ba9c:	0800bd98 	.word	0x0800bd98

0800baa0 <memcpy>:
 800baa0:	440a      	add	r2, r1
 800baa2:	4291      	cmp	r1, r2
 800baa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baa8:	d100      	bne.n	800baac <memcpy+0xc>
 800baaa:	4770      	bx	lr
 800baac:	b510      	push	{r4, lr}
 800baae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab6:	4291      	cmp	r1, r2
 800bab8:	d1f9      	bne.n	800baae <memcpy+0xe>
 800baba:	bd10      	pop	{r4, pc}

0800babc <memset>:
 800babc:	4402      	add	r2, r0
 800babe:	4603      	mov	r3, r0
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d100      	bne.n	800bac6 <memset+0xa>
 800bac4:	4770      	bx	lr
 800bac6:	f803 1b01 	strb.w	r1, [r3], #1
 800baca:	e7f9      	b.n	800bac0 <memset+0x4>

0800bacc <_init>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr

0800bad8 <_fini>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr
